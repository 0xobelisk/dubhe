  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dubhe::dapp_metadata {

  use sui::bcs::{to_bytes};

  use dubhe::table_id;

  use dubhe::dapp_service::{Self, DappHub};

  use dubhe::dapp_system;

  use dubhe::dapp_key;

  use dubhe::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"dapp_metadata";

  public struct DappMetadata has copy, drop, store {
    name: vector<u8>,
    description: vector<u8>,
    website_url: vector<u8>,
    cover_url: vector<vector<u8>>,
    partners: vector<vector<u8>>,
    package_ids: vector<address>,
    created_at: u64,
    admin: address,
    version: u32,
    pausable: bool,
  }

  public fun new(
    name: vector<u8>,
    description: vector<u8>,
    website_url: vector<u8>,
    cover_url: vector<vector<u8>>,
    partners: vector<vector<u8>>,
    package_ids: vector<address>,
    created_at: u64,
    admin: address,
    version: u32,
    pausable: bool,
  ): DappMetadata {
    DappMetadata {
            name,
            description,
            website_url,
            cover_url,
            partners,
            package_ids,
            created_at,
            admin,
            version,
            pausable,
        }
  }

  public fun name(self: &DappMetadata): vector<u8> {
    self.name
  }

  public fun description(self: &DappMetadata): vector<u8> {
    self.description
  }

  public fun website_url(self: &DappMetadata): vector<u8> {
    self.website_url
  }

  public fun cover_url(self: &DappMetadata): vector<vector<u8>> {
    self.cover_url
  }

  public fun partners(self: &DappMetadata): vector<vector<u8>> {
    self.partners
  }

  public fun package_ids(self: &DappMetadata): vector<address> {
    self.package_ids
  }

  public fun created_at(self: &DappMetadata): u64 {
    self.created_at
  }

  public fun admin(self: &DappMetadata): address {
    self.admin
  }

  public fun version(self: &DappMetadata): u32 {
    self.version
  }

  public fun pausable(self: &DappMetadata): bool {
    self.pausable
  }

  public fun update_name(self: &mut DappMetadata, name: vector<u8>) {
    self.name = name
  }

  public fun update_description(self: &mut DappMetadata, description: vector<u8>) {
    self.description = description
  }

  public fun update_website_url(self: &mut DappMetadata, website_url: vector<u8>) {
    self.website_url = website_url
  }

  public fun update_cover_url(self: &mut DappMetadata, cover_url: vector<vector<u8>>) {
    self.cover_url = cover_url
  }

  public fun update_partners(self: &mut DappMetadata, partners: vector<vector<u8>>) {
    self.partners = partners
  }

  public fun update_package_ids(self: &mut DappMetadata, package_ids: vector<address>) {
    self.package_ids = package_ids
  }

  public fun update_created_at(self: &mut DappMetadata, created_at: u64) {
    self.created_at = created_at
  }

  public fun update_admin(self: &mut DappMetadata, admin: address) {
    self.admin = admin
  }

  public fun update_version(self: &mut DappMetadata, version: u32) {
    self.version = version
  }

  public fun update_pausable(self: &mut DappMetadata, pausable: bool) {
    self.pausable = pausable
  }

  public fun get_table_id(): vector<u8> {
    table_id::encode(table_id::onchain_table_type(), TABLE_NAME)
  }

  public fun get_key_schemas(): vector<vector<u8>> {
    vector[b"vector<u8>"]
  }

  public fun get_value_schemas(): vector<vector<u8>> {
    vector[b"vector<u8>", b"vector<u8>", b"vector<u8>", b"vector<vector<u8>>", b"vector<vector<u8>>", b"vector<address>", b"u64", b"address", b"u32", b"bool"]
  }

  public fun get_key_names(): vector<vector<u8>> {
    vector[b"dapp_key"]
  }

  public fun get_value_names(): vector<vector<u8>> {
    vector[b"name", b"description", b"website_url", b"cover_url", b"partners", b"package_ids", b"created_at", b"admin", b"version", b"pausable"]
  }

  public(package) fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_service::register_table(
            dapp_hub, 
            dapp_key,
            get_table_id(), 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub, dapp_key: vector<u8>): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub, dapp_key: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub, dapp_key: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public(package) fun delete(dapp_hub: &mut DappHub, dapp_key: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    dapp_service::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple);
  }

  public fun get_name(dapp_hub: &DappHub, dapp_key: vector<u8>): vector<u8> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let name = sui::bcs::peel_vec_u8(&mut bsc_type);
    name
  }

  public(package) fun set_name(dapp_hub: &mut DappHub, dapp_key: vector<u8>, name: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&name);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 0, value);
  }

  public fun get_description(dapp_hub: &DappHub, dapp_key: vector<u8>): vector<u8> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let description = sui::bcs::peel_vec_u8(&mut bsc_type);
    description
  }

  public(package) fun set_description(dapp_hub: &mut DappHub, dapp_key: vector<u8>, description: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&description);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 1, value);
  }

  public fun get_website_url(dapp_hub: &DappHub, dapp_key: vector<u8>): vector<u8> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2);
    let mut bsc_type = sui::bcs::new(value);
    let website_url = sui::bcs::peel_vec_u8(&mut bsc_type);
    website_url
  }

  public(package) fun set_website_url(dapp_hub: &mut DappHub, dapp_key: vector<u8>, website_url: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&website_url);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 2, value);
  }

  public fun get_cover_url(dapp_hub: &DappHub, dapp_key: vector<u8>): vector<vector<u8>> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 3);
    let mut bsc_type = sui::bcs::new(value);
    let cover_url = sui::bcs::peel_vec_vec_u8(&mut bsc_type);
    cover_url
  }

  public(package) fun set_cover_url(dapp_hub: &mut DappHub, dapp_key: vector<u8>, cover_url: vector<vector<u8>>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&cover_url);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 3, value);
  }

  public fun get_partners(dapp_hub: &DappHub, dapp_key: vector<u8>): vector<vector<u8>> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 4);
    let mut bsc_type = sui::bcs::new(value);
    let partners = sui::bcs::peel_vec_vec_u8(&mut bsc_type);
    partners
  }

  public(package) fun set_partners(dapp_hub: &mut DappHub, dapp_key: vector<u8>, partners: vector<vector<u8>>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&partners);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 4, value);
  }

  public fun get_package_ids(dapp_hub: &DappHub, dapp_key: vector<u8>): vector<address> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 5);
    let mut bsc_type = sui::bcs::new(value);
    let package_ids = sui::bcs::peel_vec_address(&mut bsc_type);
    package_ids
  }

  public(package) fun set_package_ids(dapp_hub: &mut DappHub, dapp_key: vector<u8>, package_ids: vector<address>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&package_ids);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 5, value);
  }

  public fun get_created_at(dapp_hub: &DappHub, dapp_key: vector<u8>): u64 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 6);
    let mut bsc_type = sui::bcs::new(value);
    let created_at = sui::bcs::peel_u64(&mut bsc_type);
    created_at
  }

  public(package) fun set_created_at(dapp_hub: &mut DappHub, dapp_key: vector<u8>, created_at: u64) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&created_at);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 6, value);
  }

  public fun get_admin(dapp_hub: &DappHub, dapp_key: vector<u8>): address {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 7);
    let mut bsc_type = sui::bcs::new(value);
    let admin = sui::bcs::peel_address(&mut bsc_type);
    admin
  }

  public(package) fun set_admin(dapp_hub: &mut DappHub, dapp_key: vector<u8>, admin: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&admin);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 7, value);
  }

  public fun get_version(dapp_hub: &DappHub, dapp_key: vector<u8>): u32 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 8);
    let mut bsc_type = sui::bcs::new(value);
    let version = sui::bcs::peel_u32(&mut bsc_type);
    version
  }

  public(package) fun set_version(dapp_hub: &mut DappHub, dapp_key: vector<u8>, version: u32) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&version);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 8, value);
  }

  public fun get_pausable(dapp_hub: &DappHub, dapp_key: vector<u8>): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 9);
    let mut bsc_type = sui::bcs::new(value);
    let pausable = sui::bcs::peel_bool(&mut bsc_type);
    pausable
  }

  public(package) fun set_pausable(dapp_hub: &mut DappHub, dapp_key: vector<u8>, pausable: bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&pausable);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 9, value);
  }

  public fun get(
    dapp_hub: &DappHub,
    dapp_key: vector<u8>,
  ): (vector<u8>, vector<u8>, vector<u8>, vector<vector<u8>>, vector<vector<u8>>, vector<address>, u64, address, u32, bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let name = sui::bcs::peel_vec_u8(&mut bsc_type);
    let description = sui::bcs::peel_vec_u8(&mut bsc_type);
    let website_url = sui::bcs::peel_vec_u8(&mut bsc_type);
    let cover_url = sui::bcs::peel_vec_vec_u8(&mut bsc_type);
    let partners = sui::bcs::peel_vec_vec_u8(&mut bsc_type);
    let package_ids = sui::bcs::peel_vec_address(&mut bsc_type);
    let created_at = sui::bcs::peel_u64(&mut bsc_type);
    let admin = sui::bcs::peel_address(&mut bsc_type);
    let version = sui::bcs::peel_u32(&mut bsc_type);
    let pausable = sui::bcs::peel_bool(&mut bsc_type);
    (name, description, website_url, cover_url, partners, package_ids, created_at, admin, version, pausable)
  }

  public(package) fun set(
    dapp_hub: &mut DappHub,
    dapp_key: vector<u8>,
    name: vector<u8>,
    description: vector<u8>,
    website_url: vector<u8>,
    cover_url: vector<vector<u8>>,
    partners: vector<vector<u8>>,
    package_ids: vector<address>,
    created_at: u64,
    admin: address,
    version: u32,
    pausable: bool,
  ) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value_tuple = encode(name, description, website_url, cover_url, partners, package_ids, created_at, admin, version, pausable);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun get_struct(dapp_hub: &DappHub, dapp_key: vector<u8>): DappMetadata {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public(package) fun set_struct(dapp_hub: &mut DappHub, dapp_key: vector<u8>, dapp_metadata: DappMetadata) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value_tuple = encode_struct(dapp_metadata);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun encode(
    name: vector<u8>,
    description: vector<u8>,
    website_url: vector<u8>,
    cover_url: vector<vector<u8>>,
    partners: vector<vector<u8>>,
    package_ids: vector<address>,
    created_at: u64,
    admin: address,
    version: u32,
    pausable: bool,
  ): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&name));
    value_tuple.push_back(to_bytes(&description));
    value_tuple.push_back(to_bytes(&website_url));
    value_tuple.push_back(to_bytes(&cover_url));
    value_tuple.push_back(to_bytes(&partners));
    value_tuple.push_back(to_bytes(&package_ids));
    value_tuple.push_back(to_bytes(&created_at));
    value_tuple.push_back(to_bytes(&admin));
    value_tuple.push_back(to_bytes(&version));
    value_tuple.push_back(to_bytes(&pausable));
    value_tuple
  }

  public fun encode_struct(dapp_metadata: DappMetadata): vector<vector<u8>> {
    encode(dapp_metadata.name, dapp_metadata.description, dapp_metadata.website_url, dapp_metadata.cover_url, dapp_metadata.partners, dapp_metadata.package_ids, dapp_metadata.created_at, dapp_metadata.admin, dapp_metadata.version, dapp_metadata.pausable)
  }

  public fun decode(data: vector<u8>): DappMetadata {
    let mut bsc_type = sui::bcs::new(data);
    let name = sui::bcs::peel_vec_u8(&mut bsc_type);
    let description = sui::bcs::peel_vec_u8(&mut bsc_type);
    let website_url = sui::bcs::peel_vec_u8(&mut bsc_type);
    let cover_url = sui::bcs::peel_vec_vec_u8(&mut bsc_type);
    let partners = sui::bcs::peel_vec_vec_u8(&mut bsc_type);
    let package_ids = sui::bcs::peel_vec_address(&mut bsc_type);
    let created_at = sui::bcs::peel_u64(&mut bsc_type);
    let admin = sui::bcs::peel_address(&mut bsc_type);
    let version = sui::bcs::peel_u32(&mut bsc_type);
    let pausable = sui::bcs::peel_bool(&mut bsc_type);
    DappMetadata {
            name,
            description,
            website_url,
            cover_url,
            partners,
            package_ids,
            created_at,
            admin,
            version,
            pausable,
        }
  }
}
