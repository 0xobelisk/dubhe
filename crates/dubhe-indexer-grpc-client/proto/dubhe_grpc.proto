syntax = "proto3";

package dubhe_grpc;

// GRPC service definition
service DubheGrpc {
  // Query data from a specific table
  rpc QueryData(QueryRequest) returns (QueryResponse);
  
  // Subscribe to table updates
  rpc SubscribeToTable(SubscribeRequest) returns (stream TableUpdate);
  
  // Get table metadata
  rpc GetTableMetadata(TableMetadataRequest) returns (TableMetadataResponse);
  
  // List all available tables
  rpc ListTables(ListTablesRequest) returns (ListTablesResponse);
}

// Query request
message QueryRequest {
  string table_id = 1;
  string query = 2;  // SQL query or filter conditions
  int32 limit = 3;
  int32 offset = 4;
}

// Query response
message QueryResponse {
  repeated TableRow rows = 1;
  int32 total_count = 2;
  bool success = 3;
  string error_message = 4;
}

// Table row data
message TableRow {
  map<string, string> fields = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  int64 last_updated_checkpoint = 4;
}

// Subscribe request
message SubscribeRequest {
  repeated string table_ids = 1;  // Multiple table IDs to subscribe to
}

// Table update stream
message TableUpdate {
  string table_id = 1;
  string operation = 2;  // "INSERT", "UPDATE", "DELETE"
  TableRow data = 3;
  int64 checkpoint = 4;
  int64 timestamp = 5;
}

// Table metadata request
message TableMetadataRequest {
  string table_id = 1;
}

// Table metadata response
message TableMetadataResponse {
  string table_id = 1;
  string table_type = 2;  // "component", "resource"
  repeated FieldMetadata fields = 3;
  bool offchain = 4;
}

// Field metadata
message FieldMetadata {
  string field_name = 1;
  string field_type = 2;
  int32 field_index = 3;
  bool is_key = 4;
  bool is_enum = 5;
}

// List tables request
message ListTablesRequest {
  string table_type = 1;  // Optional filter by table type
}

// List tables response
message ListTablesResponse {
  repeated string table_ids = 1;
} 