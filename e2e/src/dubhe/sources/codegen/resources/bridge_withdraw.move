  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dubhe::bridge_withdraw {

  use sui::bcs::{to_bytes};

  use std::ascii::{string, String, into_bytes};

  use dubhe::table_id;

  use dubhe::dapp_service::{Self, DappHub};

  use dubhe::dapp_system;

  use dubhe::dapp_key;

  use dubhe::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"bridge_withdraw";

  const TABLE_TYPE: vector<u8> = b"Resource";

  const OFFCHAIN: bool = true;

  public struct BridgeWithdraw has copy, drop, store {
    from: address,
    to: address,
    to_chain: String,
    amount: u256,
    fee: u256,
  }

  public fun new(from: address, to: address, to_chain: String, amount: u256, fee: u256): BridgeWithdraw {
    BridgeWithdraw {
            from,
            to,
            to_chain,
            amount,
            fee,
        }
  }

  public fun from(self: &BridgeWithdraw): address {
    self.from
  }

  public fun to(self: &BridgeWithdraw): address {
    self.to
  }

  public fun to_chain(self: &BridgeWithdraw): String {
    self.to_chain
  }

  public fun amount(self: &BridgeWithdraw): u256 {
    self.amount
  }

  public fun fee(self: &BridgeWithdraw): u256 {
    self.fee
  }

  public fun update_from(self: &mut BridgeWithdraw, from: address) {
    self.from = from
  }

  public fun update_to(self: &mut BridgeWithdraw, to: address) {
    self.to = to
  }

  public fun update_to_chain(self: &mut BridgeWithdraw, to_chain: String) {
    self.to_chain = to_chain
  }

  public fun update_amount(self: &mut BridgeWithdraw, amount: u256) {
    self.amount = amount
  }

  public fun update_fee(self: &mut BridgeWithdraw, fee: u256) {
    self.fee = fee
  }

  public fun get_table_id(): String {
    string(TABLE_NAME)
  }

  public fun get_key_schemas(): vector<String> {
    vector[]
  }

  public fun get_value_schemas(): vector<String> {
    vector[string(b"address"), string(b"address"), string(b"String"), string(b"u256"),
    string(b"u256")
    ]
  }

  public fun get_key_names(): vector<String> {
    vector[]
  }

  public fun get_value_names(): vector<String> {
    vector[string(b"from"), string(b"to"), string(b"to_chain"), string(b"amount"),
    string(b"fee")
    ]
  }

  public(package) fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_service::register_table(
            dapp_hub,
             dapp_key,
            string(TABLE_TYPE),
            get_table_id(), 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            OFFCHAIN,
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public(package) fun delete(dapp_hub: &mut DappHub) {
    let key_tuple = vector::empty();
    dapp_service::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, OFFCHAIN);
  }

  public fun get_from(dapp_hub: &DappHub): address {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let from = sui::bcs::peel_address(&mut bsc_type);
    from
  }

  public(package) fun set_from(dapp_hub: &mut DappHub, from: address) {
    let key_tuple = vector::empty();
    let value = to_bytes(&from);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 0, value, OFFCHAIN);
  }

  public fun get_to(dapp_hub: &DappHub): address {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let to = sui::bcs::peel_address(&mut bsc_type);
    to
  }

  public(package) fun set_to(dapp_hub: &mut DappHub, to: address) {
    let key_tuple = vector::empty();
    let value = to_bytes(&to);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 1, value, OFFCHAIN);
  }

  public fun get_to_chain(dapp_hub: &DappHub): String {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2);
    let mut bsc_type = sui::bcs::new(value);
    let to_chain = dubhe::bcs::peel_string(&mut bsc_type);
    to_chain
  }

  public(package) fun set_to_chain(dapp_hub: &mut DappHub, to_chain: String) {
    let key_tuple = vector::empty();
    let value = to_bytes(&into_bytes(to_chain));
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 2, value, OFFCHAIN);
  }

  public fun get_amount(dapp_hub: &DappHub): u256 {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 3);
    let mut bsc_type = sui::bcs::new(value);
    let amount = sui::bcs::peel_u256(&mut bsc_type);
    amount
  }

  public(package) fun set_amount(dapp_hub: &mut DappHub, amount: u256) {
    let key_tuple = vector::empty();
    let value = to_bytes(&amount);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 3, value, OFFCHAIN);
  }

  public fun get_fee(dapp_hub: &DappHub): u256 {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 4);
    let mut bsc_type = sui::bcs::new(value);
    let fee = sui::bcs::peel_u256(&mut bsc_type);
    fee
  }

  public(package) fun set_fee(dapp_hub: &mut DappHub, fee: u256) {
    let key_tuple = vector::empty();
    let value = to_bytes(&fee);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 4, value, OFFCHAIN);
  }

  public fun get(dapp_hub: &DappHub): (address, address, String, u256, u256) {
    let key_tuple = vector::empty();
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let from = sui::bcs::peel_address(&mut bsc_type);
    let to = sui::bcs::peel_address(&mut bsc_type);
    let to_chain = dubhe::bcs::peel_string(&mut bsc_type);
    let amount = sui::bcs::peel_u256(&mut bsc_type);
    let fee = sui::bcs::peel_u256(&mut bsc_type);
    (from, to, to_chain, amount, fee)
  }

  public(package) fun set(
    dapp_hub: &mut DappHub,
    from: address,
    to: address,
    to_chain: String,
    amount: u256,
    fee: u256,
  ) {
    let key_tuple = vector::empty();
    let value_tuple = encode(from, to, to_chain, amount, fee);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun get_struct(dapp_hub: &DappHub): BridgeWithdraw {
    let key_tuple = vector::empty();
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public(package) fun set_struct(dapp_hub: &mut DappHub, bridge_withdraw: BridgeWithdraw) {
    let key_tuple = vector::empty();
    let value_tuple = encode_struct(bridge_withdraw);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun encode(from: address, to: address, to_chain: String, amount: u256, fee: u256): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&from));
    value_tuple.push_back(to_bytes(&to));
    value_tuple.push_back(to_bytes(&into_bytes(to_chain)));
    value_tuple.push_back(to_bytes(&amount));
    value_tuple.push_back(to_bytes(&fee));
    value_tuple
  }

  public fun encode_struct(bridge_withdraw: BridgeWithdraw): vector<vector<u8>> {
    encode(bridge_withdraw.from, bridge_withdraw.to, bridge_withdraw.to_chain, bridge_withdraw.amount, bridge_withdraw.fee)
  }

  public fun decode(data: vector<u8>): BridgeWithdraw {
    let mut bsc_type = sui::bcs::new(data);
    let from = sui::bcs::peel_address(&mut bsc_type);
    let to = sui::bcs::peel_address(&mut bsc_type);
    let to_chain = string(sui::bcs::peel_vec_u8(&mut bsc_type));
    let amount = sui::bcs::peel_u256(&mut bsc_type);
    let fee = sui::bcs::peel_u256(&mut bsc_type);
    BridgeWithdraw {
            from,
            to,
            to_chain,
            amount,
            fee,
        }
  }
}
