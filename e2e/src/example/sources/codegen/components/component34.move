  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module example::component34 {

  use sui::bcs::{to_bytes};

  use std::ascii::{string, String, into_bytes};

  use dubhe::table_id;

  use dubhe::dapp_service::{Self, DappHub};

  use dubhe::dapp_system;

  use example::dapp_key;

  use example::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"component34";

  public struct Component34 has copy, drop, store {
    name: vector<String>,
    age: u8,
  }

  public fun new(name: vector<String>, age: u8): Component34 {
    Component34 {
            name,
            age,
        }
  }

  public fun name(self: &Component34): vector<String> {
    self.name
  }

  public fun age(self: &Component34): u8 {
    self.age
  }

  public fun update_name(self: &mut Component34, name: vector<String>) {
    self.name = name
  }

  public fun update_age(self: &mut Component34, age: u8) {
    self.age = age
  }

  public fun get_table_id(): vector<u8> {
    table_id::encode(table_id::onchain_table_type(), TABLE_NAME)
  }

  public fun get_key_schemas(): vector<vector<u8>> {
    vector[b"address"]
  }

  public fun get_value_schemas(): vector<vector<u8>> {
    vector[b"vector<String>", b"u8"]
  }

  public fun get_key_names(): vector<vector<u8>> {
    vector[b"entity_id"]
  }

  public fun get_value_names(): vector<vector<u8>> {
    vector[b"name", b"age"]
  }

  public(package) fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_system::register_table(
            dapp_hub, 
            dapp_key,
            get_table_id(), 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub, entity_id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_system::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub, entity_id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_system::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub, entity_id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_system::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public(package) fun delete(dapp_hub: &mut DappHub, entity_id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_system::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple);
  }

  public fun get_name(dapp_hub: &DappHub, entity_id: address): vector<String> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value = dapp_system::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let name = dubhe::bcs::peel_vec_string(&mut bsc_type);
    name
  }

  public(package) fun set_name(dapp_hub: &mut DappHub, entity_id: address, name: vector<String>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value = to_bytes(&name);
    dapp_system::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 0, value);
  }

  public fun get_age(dapp_hub: &DappHub, entity_id: address): u8 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value = dapp_system::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let age = sui::bcs::peel_u8(&mut bsc_type);
    age
  }

  public(package) fun set_age(dapp_hub: &mut DappHub, entity_id: address, age: u8) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value = to_bytes(&age);
    dapp_system::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 1, value);
  }

  public fun get(dapp_hub: &DappHub, entity_id: address): (vector<String>, u8) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value_tuple = dapp_system::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let name = dubhe::bcs::peel_vec_string(&mut bsc_type);
    let age = sui::bcs::peel_u8(&mut bsc_type);
    (name, age)
  }

  public(package) fun set(dapp_hub: &mut DappHub, entity_id: address, name: vector<String>, age: u8) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value_tuple = encode(name, age);
    dapp_system::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun get_struct(dapp_hub: &DappHub, entity_id: address): Component34 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value_tuple = dapp_system::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public(package) fun set_struct(dapp_hub: &mut DappHub, entity_id: address, component34: Component34) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value_tuple = encode_struct(component34);
    dapp_system::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun encode(name: vector<String>, age: u8): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&name));
    value_tuple.push_back(to_bytes(&age));
    value_tuple
  }

  public fun encode_struct(component34: Component34): vector<vector<u8>> {
    encode(component34.name, component34.age)
  }

  public fun decode(data: vector<u8>): Component34 {
    let mut bsc_type = sui::bcs::new(data);
    let name = dubhe::bcs::peel_vec_string(&mut bsc_type);
    let age = sui::bcs::peel_u8(&mut bsc_type);
    Component34 {
            name,
            age,
        }
  }
}
