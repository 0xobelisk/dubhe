  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dms::mailbox_schema {

  use std::ascii::String;

  use std::ascii::string;

  use sui::package::UpgradeCap;

  use std::type_name;

  use dubhe::storage_migration;

  use dubhe::storage_value::{Self, StorageValue};

  use dubhe::storage_map::{Self, StorageMap};

  use dubhe::storage_double_map::{Self, StorageDoubleMap};

  use sui::dynamic_field as df;

  use sui::sui::SUI;

  use sui::coin::Coin;

  use sui::balance::Balance;

  public struct Mailbox has key, store {
    id: UID,
  }

  public fun borrow_world_message(self: &Mailbox): &StorageValue<String> {
    storage_migration::borrow_field(&self.id, b"world_message")
  }

  public(package) fun world_message(self: &mut Mailbox): &mut StorageValue<String> {
    storage_migration::borrow_mut_field(&mut self.id, b"world_message")
  }

  public fun borrow_private_message(self: &Mailbox): &StorageMap<address, String> {
    storage_migration::borrow_field(&self.id, b"private_message")
  }

  public(package) fun private_message(self: &mut Mailbox): &mut StorageMap<address, String> {
    storage_migration::borrow_mut_field(&mut self.id, b"private_message")
  }

  public(package) fun create(ctx: &mut TxContext): Mailbox {
    let mut id = object::new(ctx);
    storage_migration::add_field<StorageValue<String>>(&mut id, b"world_message", storage_value::new());
    storage_migration::add_field<StorageMap<address, String>>(&mut id, b"private_message", storage_map::new());
    Mailbox { id }
  }

  public fun migrate(_mailbox: &mut Mailbox, _cap: &UpgradeCap) {}

  // ======================================== View Functions ========================================

  public fun get_world_message(self: &Mailbox): &String {
    self.borrow_world_message().borrow()
  }

  public fun get_private_message(self: &Mailbox, key: address): &String {
    self.borrow_private_message().borrow(key)
  }

  public fun get_private_message_keys(self: &Mailbox): vector<address> {
    self.borrow_private_message().keys()
  }

  public fun get_private_message_values(self: &Mailbox): vector<String> {
    self.borrow_private_message().values()
  }

  // =========================================================================================================
}
