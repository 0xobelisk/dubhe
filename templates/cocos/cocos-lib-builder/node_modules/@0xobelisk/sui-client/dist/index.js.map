{"version":3,"sources":["../src/index.ts","../src/dubhe.ts","../src/libs/suiAccountManager/index.ts","../src/libs/suiAccountManager/keypair.ts","../src/libs/suiAccountManager/util.ts","../src/libs/suiAccountManager/crypto.ts","../src/libs/suiTxBuilder/index.ts","../src/libs/suiTxBuilder/util.ts","../src/libs/suiInteractor/suiInteractor.ts","../src/libs/suiModel/suiOwnedObject.ts","../src/libs/suiModel/suiSharedObject.ts","../src/libs/suiInteractor/util.ts","../src/libs/suiContractFactory/index.ts","../src/utils/index.ts","../src/errors/index.ts","../src/libs/multiSig/client.ts","../src/libs/multiSig/publickey.ts","../src/metadata/index.ts"],"sourcesContent":["export * from '@mysten/sui/client';\nexport * from '@mysten/sui/utils';\nexport * from '@mysten/sui/transactions';\nexport * from '@mysten/sui/bcs';\nexport * from '@mysten/sui/keypairs/ed25519';\nexport * from '@mysten/sui/keypairs/secp256k1';\nexport * from '@mysten/sui/keypairs/secp256r1';\nexport { bcs, BcsType } from '@mysten/bcs';\nexport { Dubhe } from './dubhe';\nexport { SuiAccountManager } from './libs/suiAccountManager';\nexport { SuiTx } from './libs/suiTxBuilder';\nexport { MultiSigClient } from './libs/multiSig';\nexport { SuiContractFactory } from './libs/suiContractFactory';\nexport { loadMetadata } from './metadata';\nexport type * from './types';\n","import keccak256 from 'keccak256';\nimport { getFullnodeUrl } from '@mysten/sui/client';\nimport { Transaction, TransactionResult } from '@mysten/sui/transactions';\nimport { BcsType, SerializedBcs } from '@mysten/bcs';\nimport type { TransactionArgument } from '@mysten/sui/transactions';\nimport type {\n  SuiTransactionBlockResponse,\n  DevInspectResults,\n  SuiMoveNormalizedModules,\n  SuiMoveNormalizedType,\n  SuiObjectData,\n} from '@mysten/sui/client';\nimport { SuiAccountManager } from './libs/suiAccountManager';\nimport { SuiTx } from './libs/suiTxBuilder';\nimport { SuiInteractor } from './libs/suiInteractor';\nimport {\n  MapObjectStruct,\n  MoveStructType,\n  DubheObjectContent,\n  SuiDubheReturnType,\n} from './types';\nimport { SuiContractFactory } from './libs/suiContractFactory';\nimport {\n  SuiMoveMoudleFuncType,\n  SuiMoveMoudleValueType,\n} from './libs/suiContractFactory/types';\nimport {\n  ContractQuery,\n  ContractTx,\n  DerivePathParams,\n  FaucetNetworkType,\n  MapMoudleFuncQuery,\n  MapMoudleFuncTx,\n  DubheParams,\n  SuiTxArg,\n  // SuiTxArgument,\n  SuiObjectArg,\n  SuiVecTxArg,\n} from './types';\nimport { normalizeHexAddress, numberToAddressHex } from './utils';\nimport { bcs, fromHEX, toHEX } from '@mysten/bcs';\nimport { ContractDataParsingError } from './errors';\n\nexport function isUndefined(value?: unknown): value is undefined {\n  return value === undefined;\n}\n\nexport function withMeta<T extends { meta: SuiMoveMoudleFuncType }>(\n  meta: SuiMoveMoudleFuncType,\n  creator: Omit<T, 'meta'>\n): T {\n  (creator as T).meta = meta;\n\n  return creator as T;\n}\n\nfunction createQuery(\n  meta: SuiMoveMoudleFuncType,\n  fn: (\n    tx: Transaction,\n    params?: (TransactionArgument | SerializedBcs<any>)[],\n    typeArguments?: string[],\n    isRaw?: boolean\n  ) => Promise<DevInspectResults | TransactionResult>\n): ContractQuery {\n  return withMeta(\n    meta,\n    async ({\n      tx,\n      params,\n      typeArguments,\n      isRaw,\n    }: {\n      tx: Transaction;\n      params?: (TransactionArgument | SerializedBcs<any>)[];\n      typeArguments?: string[];\n      isRaw?: boolean;\n    }): Promise<DevInspectResults | TransactionResult> => {\n      const result = await fn(tx, params, typeArguments, isRaw);\n      return result;\n    }\n  );\n}\n\nfunction createTx(\n  meta: SuiMoveMoudleFuncType,\n  fn: (\n    tx: Transaction,\n    params?: (TransactionArgument | SerializedBcs<any>)[],\n    typeArguments?: string[],\n    isRaw?: boolean\n  ) => Promise<SuiTransactionBlockResponse | TransactionResult>\n): ContractTx {\n  return withMeta(\n    meta,\n    async ({\n      tx,\n      params,\n      typeArguments,\n      isRaw,\n    }: {\n      tx: Transaction;\n      params?: (TransactionArgument | SerializedBcs<any>)[];\n      typeArguments?: string[];\n      isRaw?: boolean;\n    }): Promise<SuiTransactionBlockResponse | TransactionResult> => {\n      return await fn(tx, params, typeArguments, isRaw);\n    }\n  );\n}\n\n/**\n * @class Dubhe\n * @description This class is used to aggregate the tools that used to interact with SUI network.\n */\nexport class Dubhe {\n  public accountManager: SuiAccountManager;\n  public suiInteractor: SuiInteractor;\n  public contractFactory: SuiContractFactory;\n  public packageId: string | undefined;\n  public metadata: SuiMoveNormalizedModules | undefined;\n\n  readonly #query: MapMoudleFuncQuery = {};\n  readonly #tx: MapMoudleFuncTx = {};\n  readonly #object: MapObjectStruct = {\n    address: bcs.bytes(32).transform({\n      // To change the input type, you need to provide a type definition for the input\n      input: (val: string) => fromHEX(val),\n      output: (val) => toHEX(val),\n    }),\n    u8: bcs.u8(),\n    u16: bcs.u16(),\n    u32: bcs.u32(),\n    u64: bcs.u64(),\n    u128: bcs.u128(),\n    u256: bcs.u256(),\n    bool: bcs.bool(),\n    '0x1::ascii::String': bcs.string(),\n    '0x1::string::String': bcs.string(),\n    '0x1::option::Option<address>': bcs.option(\n      bcs.bytes(32).transform({\n        // To change the input type, you need to provide a type definition for the input\n        input: (val: string) => fromHEX(val),\n        output: (val) => toHEX(val),\n      })\n    ),\n    '0x1::option::Option<u8>': bcs.option(bcs.u8()),\n    '0x1::option::Option<u16>': bcs.option(bcs.u16()),\n    '0x1::option::Option<u32>': bcs.option(bcs.u32()),\n    '0x1::option::Option<u64>': bcs.option(bcs.u64()),\n    '0x1::option::Option<u128>': bcs.option(bcs.u128()),\n    '0x1::option::Option<u256>': bcs.option(bcs.u256()),\n    '0x1::option::Option<bool>': bcs.option(bcs.bool()),\n    '0x1::option::Option<vector<address>>': bcs.option(\n      bcs.vector(\n        bcs.bytes(32).transform({\n          // To change the input type, you need to provide a type definition for the input\n          input: (val: string) => fromHEX(val),\n          output: (val) => toHEX(val),\n        })\n      )\n    ),\n    '0x1::option::Option<vector<u8>>': bcs.option(bcs.vector(bcs.u8())),\n    '0x1::option::Option<vector<u16>>': bcs.option(bcs.vector(bcs.u16())),\n    '0x1::option::Option<vector<u32>>': bcs.option(bcs.vector(bcs.u32())),\n    '0x1::option::Option<vector<u64>>': bcs.option(bcs.vector(bcs.u64())),\n    '0x1::option::Option<vector<u128>>': bcs.option(bcs.vector(bcs.u128())),\n    '0x1::option::Option<vector<u256>>': bcs.option(bcs.vector(bcs.u256())),\n    '0x1::option::Option<vector<bool>>': bcs.option(bcs.vector(bcs.bool())),\n    'vector<address>': bcs.vector(\n      bcs.bytes(32).transform({\n        // To change the input type, you need to provide a type definition for the input\n        input: (val: string) => fromHEX(val),\n        output: (val) => toHEX(val),\n      })\n    ),\n    'vector<u8>': bcs.vector(bcs.u8()),\n    'vector<u16>': bcs.vector(bcs.u16()),\n    'vector<u32>': bcs.vector(bcs.u32()),\n    'vector<u64>': bcs.vector(bcs.u64()),\n    'vector<u128>': bcs.vector(bcs.u128()),\n    'vector<u256>': bcs.vector(bcs.u256()),\n    'vector<bool>': bcs.vector(bcs.bool()),\n    'vector<vector<address>>': bcs.vector(\n      bcs.vector(\n        bcs.bytes(32).transform({\n          // To change the input type, you need to provide a type definition for the input\n          input: (val: string) => fromHEX(val),\n          output: (val) => toHEX(val),\n        })\n      )\n    ),\n    'vector<vector<u8>>': bcs.vector(bcs.vector(bcs.u8())),\n    'vector<vector<u16>>': bcs.vector(bcs.vector(bcs.u16())),\n    'vector<vector<u32>>': bcs.vector(bcs.vector(bcs.u32())),\n    'vector<vector<u64>>': bcs.vector(bcs.vector(bcs.u64())),\n    'vector<vector<u128>>': bcs.vector(bcs.vector(bcs.u128())),\n    'vector<vector<u256>>': bcs.vector(bcs.vector(bcs.u256())),\n    'vector<vector<bool>>': bcs.vector(bcs.vector(bcs.bool())),\n  };\n\n  /**\n   * Support the following ways to init the DubheClient:\n   * 1. mnemonics\n   * 2. secretKey (base64 or hex)\n   * If none of them is provided, will generate a random mnemonics with 24 words.\n   *\n   * @param mnemonics, 12 or 24 mnemonics words, separated by space\n   * @param secretKey, base64 or hex string or bech32, when mnemonics is provided, secretKey will be ignored\n   * @param networkType, 'testnet' | 'mainnet' | 'devnet' | 'localnet', default is 'devnet'\n   * @param fullnodeUrl, the fullnode url, default is the preconfig fullnode url for the given network type\n   * @param packageId\n   */\n  constructor({\n    mnemonics,\n    secretKey,\n    networkType,\n    fullnodeUrls,\n    packageId,\n    metadata,\n  }: DubheParams = {}) {\n    // Init the account manager\n    this.accountManager = new SuiAccountManager({ mnemonics, secretKey });\n    // Init the rpc provider\n    fullnodeUrls = fullnodeUrls || [getFullnodeUrl(networkType ?? 'mainnet')];\n    this.suiInteractor = new SuiInteractor(fullnodeUrls, networkType);\n\n    this.packageId = packageId;\n    if (metadata !== undefined) {\n      this.metadata = metadata as SuiMoveNormalizedModules;\n\n      const maxLoopNum = 5;\n      let loopNum = 0;\n      let stillNeedFormat = true;\n      while (stillNeedFormat === true && loopNum <= maxLoopNum) {\n        let loopFlag = false;\n        Object.values(metadata as SuiMoveNormalizedModules).forEach(\n          (moudlevalue) => {\n            const data = moudlevalue as SuiMoveMoudleValueType;\n            const moduleName = data.name;\n            const objMoudleId = `${packageId}::${moduleName}`;\n\n            Object.entries(data.structs).forEach(([objectName, objectType]) => {\n              const objectId = `${objMoudleId}::${objectName}`;\n              const bcsmeta: MoveStructType = {\n                objectId,\n                objectName,\n                objectType,\n              };\n              // if (isUndefined(this.#object[objectId])) {\n              let bcsObj = this.#bcs(bcsmeta);\n              if (bcsObj.loopFlag === true) {\n                loopFlag = bcsObj.loopFlag;\n              }\n\n              this.#object[objectId] = bcsObj.bcs;\n\n              this.#object[`vector<${objectId}>`] = bcs.vector(bcsObj.bcs);\n              this.#object[`0x1::option::Option<${objectId}>`] = bcs.option(\n                bcsObj.bcs\n              );\n            });\n\n            Object.entries(data.exposedFunctions).forEach(\n              ([funcName, funcvalue]) => {\n                const meta = funcvalue as SuiMoveMoudleFuncType;\n                meta.moduleName = moduleName;\n                meta.funcName = funcName;\n                if (isUndefined(this.#query[moduleName])) {\n                  this.#query[moduleName] = {};\n                }\n                if (isUndefined(this.#query[moduleName][funcName])) {\n                  this.#query[moduleName][funcName] = createQuery(\n                    meta,\n                    (tx, p, typeArguments, isRaw) =>\n                      this.#read(meta, tx, p, typeArguments, isRaw)\n                  );\n                }\n\n                if (isUndefined(this.#tx[moduleName])) {\n                  this.#tx[moduleName] = {};\n                }\n                if (isUndefined(this.#tx[moduleName][funcName])) {\n                  this.#tx[moduleName][funcName] = createTx(\n                    meta,\n                    (tx, p, typeArguments, isRaw) =>\n                      this.#exec(meta, tx, p, typeArguments, isRaw)\n                  );\n                }\n              }\n            );\n          }\n        );\n\n        stillNeedFormat = loopFlag;\n        loopNum++;\n      }\n    }\n    this.contractFactory = new SuiContractFactory({\n      packageId,\n      metadata,\n    });\n  }\n\n  public get query(): MapMoudleFuncQuery {\n    return this.#query;\n  }\n\n  public get tx(): MapMoudleFuncTx {\n    return this.#tx;\n  }\n\n  public get object(): MapObjectStruct {\n    return this.#object;\n  }\n\n  #exec = async (\n    meta: SuiMoveMoudleFuncType,\n    tx: Transaction,\n    params?: (TransactionArgument | SerializedBcs<any>)[],\n    typeArguments?: string[],\n    isRaw?: boolean\n  ) => {\n    if (isRaw === true) {\n      return tx.moveCall({\n        target: `${this.contractFactory.packageId}::${meta.moduleName}::${meta.funcName}`,\n        arguments: params,\n        typeArguments,\n      });\n    }\n\n    tx.moveCall({\n      target: `${this.contractFactory.packageId}::${meta.moduleName}::${meta.funcName}`,\n      arguments: params,\n      typeArguments,\n    });\n    return await this.signAndSendTxn(tx);\n  };\n\n  #read = async (\n    meta: SuiMoveMoudleFuncType,\n    tx: Transaction,\n    params?: (TransactionArgument | SerializedBcs<any>)[],\n    typeArguments?: string[],\n    isRaw?: boolean\n  ) => {\n    if (isRaw === true) {\n      return tx.moveCall({\n        target: `${this.contractFactory.packageId}::${meta.moduleName}::${meta.funcName}`,\n        arguments: params,\n        typeArguments,\n      });\n    }\n\n    tx.moveCall({\n      target: `${this.contractFactory.packageId}::${meta.moduleName}::${meta.funcName}`,\n      arguments: params,\n      typeArguments,\n    });\n\n    return await this.inspectTxn(tx);\n  };\n\n  #bcs = (bcsmeta: MoveStructType) => {\n    let loopFlag = false;\n    const bcsJson: Record<string, BcsType<any, any>> = {};\n    Object.entries(bcsmeta.objectType.fields).forEach(([index, type]) => {\n      const objName = type.name;\n      const objType: SuiMoveNormalizedType = type.type;\n      switch (typeof objType) {\n        case 'object':\n          for (const [key, value] of Object.entries(objType)) {\n            switch (key) {\n              case 'Struct':\n                const structType = value as {\n                  address: string;\n                  module: string;\n                  name: string;\n                  typeArguments: SuiMoveNormalizedType[];\n                };\n                if (\n                  structType.address === '0x1' &&\n                  structType.module === 'ascii' &&\n                  structType.name === 'String'\n                ) {\n                  bcsJson[objName] = bcs.string();\n                  return;\n                } else if (\n                  structType.address === '0x2' &&\n                  structType.module === 'object' &&\n                  structType.name === 'UID'\n                ) {\n                  bcsJson[objName] = bcs.fixedArray(32, bcs.u8()).transform({\n                    input: (id: string) => fromHEX(id),\n                    output: (id) => toHEX(Uint8Array.from(id)),\n                  });\n                  return;\n                } else if (\n                  structType.address === '0x2' &&\n                  structType.module === 'object' &&\n                  structType.name === 'ID'\n                ) {\n                  bcsJson[objName] = bcs.fixedArray(32, bcs.u8()).transform({\n                    input: (id: string) => fromHEX(id),\n                    output: (id) => toHEX(Uint8Array.from(id)),\n                  });\n                  return;\n                } else if (\n                  structType.address === '0x2' &&\n                  structType.module === 'bag' &&\n                  structType.name === 'Bag'\n                ) {\n                  bcsJson[objName] = bcs.fixedArray(32, bcs.u8()).transform({\n                    input: (id: string) => fromHEX(id),\n                    output: (id) => toHEX(Uint8Array.from(id)),\n                  });\n                  return;\n                } else if (\n                  structType.address === '0x1' &&\n                  structType.module === 'option' &&\n                  structType.name === 'Option'\n                ) {\n                  switch (structType.typeArguments[0]) {\n                    case 'U8':\n                      bcsJson[objName] = bcs.option(bcs.u8());\n                      return;\n                    case 'U16':\n                      bcsJson[objName] = bcs.option(bcs.u16());\n                      return;\n                    case 'U32':\n                      bcsJson[objName] = bcs.option(bcs.u32());\n                      return;\n                    case 'U64':\n                      bcsJson[objName] = bcs.option(bcs.u64());\n                      return;\n                    case 'U128':\n                      bcsJson[objName] = bcs.option(bcs.u128());\n                      return;\n                    case 'U256':\n                      bcsJson[objName] = bcs.option(bcs.u256());\n                      return;\n                    case 'Bool':\n                      bcsJson[objName] = bcs.option(bcs.bool());\n                      return;\n                    case 'Address':\n                      bcsJson[objName] = bcs.option(\n                        bcs.bytes(32).transform({\n                          // To change the input type, you need to provide a type definition for the input\n                          input: (val: string) => fromHEX(val),\n                          output: (val) => toHEX(val),\n                        })\n                      );\n                      return;\n                    default:\n                    // throw new Error('Unsupported type');\n                  }\n                } else {\n                  if (\n                    this.object[\n                      `${structType.address}::${structType.module}::${structType.name}`\n                    ] === undefined\n                  ) {\n                    loopFlag = true;\n                  } else {\n                    bcsJson[objName] =\n                      this.object[\n                        `${structType.address}::${structType.module}::${structType.name}`\n                      ];\n                    return;\n                  }\n                }\n                return;\n              case 'Vector':\n                switch (value) {\n                  case 'U8':\n                    bcsJson[objName] = bcs.vector(bcs.u8());\n                    return;\n                  case 'U16':\n                    bcsJson[objName] = bcs.vector(bcs.u16());\n                    return;\n                  case 'U32':\n                    bcsJson[objName] = bcs.vector(bcs.u32());\n                    return;\n                  case 'U64':\n                    bcsJson[objName] = bcs.vector(bcs.u64());\n                    return;\n                  case 'U128':\n                    bcsJson[objName] = bcs.vector(bcs.u128());\n                    return;\n                  case 'U256':\n                    bcsJson[objName] = bcs.vector(bcs.u256());\n                    return;\n                  case 'Bool':\n                    bcsJson[objName] = bcs.vector(bcs.bool());\n                    return;\n                  case 'Address':\n                    bcsJson[objName] = bcs.vector(\n                      bcs.bytes(32).transform({\n                        // To change the input type, you need to provide a type definition for the input\n                        input: (val: string) => fromHEX(val),\n                        output: (val) => toHEX(val),\n                      })\n                    );\n                    return;\n                  default:\n                  // throw new Error('Unsupported type');\n                }\n              case 'TypeParameter':\n                bcsJson[objName] = bcs.u128();\n                return;\n              // case 'Reference':\n\n              // case 'MutableReference':\n\n              default:\n                throw new Error('Unsupported type');\n            }\n          }\n          return;\n        case 'string':\n          switch (objType) {\n            case 'U8':\n              bcsJson[objName] = bcs.u8();\n              return;\n            case 'U16':\n              bcsJson[objName] = bcs.u16();\n              return;\n            case 'U32':\n              bcsJson[objName] = bcs.u32();\n              return;\n            case 'U64':\n              bcsJson[objName] = bcs.u64();\n              return;\n            case 'U128':\n              bcsJson[objName] = bcs.u128();\n              return;\n            case 'U256':\n              bcsJson[objName] = bcs.u256();\n              return;\n            case 'Bool':\n              bcsJson[objName] = bcs.bool();\n              return;\n            case 'Address':\n              bcsJson[objName] = bcs.bytes(32).transform({\n                // To change the input type, you need to provide a type definition for the input\n                input: (val: string) => fromHEX(val),\n                output: (val) => toHEX(val),\n              });\n              return;\n            default:\n              return;\n          }\n        default:\n          throw new Error('Unsupported type');\n      }\n    });\n\n    return {\n      bcs: bcs.struct(bcsmeta.objectName, bcsJson),\n      loopFlag,\n    };\n  };\n\n  view(dryResult: DevInspectResults) {\n    let returnValues = [];\n\n    if (dryResult.effects.status.status === 'success') {\n      const resultList = dryResult.results![0].returnValues!;\n\n      for (const res of resultList) {\n        let baseValue = res[0];\n        let baseType = res[1];\n\n        const value = Uint8Array.from(baseValue);\n\n        if (!this.#object[baseType]) {\n          console.log(\n            '\\n\\x1b[41m\\x1b[37m ERROR \\x1b[0m \\x1b[31mUnsupported Type\\x1b[0m'\n          );\n          console.log('\\x1b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\x1b[0m');\n          console.log(`\\x1b[95m•\\x1b[0m Type: \\x1b[33m\"${baseType}\"\\x1b[0m`);\n          console.log('\\x1b[95m\\n✨ Available Types:\\x1b[0m');\n          Object.keys(this.#object).forEach((type) => {\n            console.log(`  \\x1b[36m◆\\x1b[0m ${type}`);\n          });\n          console.log('\\n\\x1b[34m💡 How to Add Custom Type:\\x1b[0m');\n          console.log(\n            `  You can add custom type by extending the #object map in your code:`\n          );\n          console.log(\n            `  \\x1b[32mdubhe.object[\"${baseType}\"] = bcs.struct(\"YourTypeName\", {\\n    field1: bcs.string(),\\n    field2: bcs.u64(),\\n    // ... other fields\\n  });\\x1b[0m`\n          );\n          console.log(\n            '\\x1b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\x1b[0m\\n'\n          );\n          throw new Error(`Unsupported type: ${baseType}`);\n        }\n\n        returnValues.push(this.#object[baseType].parse(value));\n      }\n      return returnValues;\n    } else {\n      throw new ContractDataParsingError(dryResult);\n    }\n  }\n\n  /**\n   * if derivePathParams is not provided or mnemonics is empty, it will return the keypair.\n   * else:\n   * it will generate signer from the mnemonic with the given derivePathParams.\n   * @param derivePathParams, such as { accountIndex: 2, isExternal: false, addressIndex: 10 }, comply with the BIP44 standard\n   */\n  getKeypair(derivePathParams?: DerivePathParams) {\n    return this.accountManager.getKeyPair(derivePathParams);\n  }\n\n  /**\n   * @description Switch the current account with the given derivePathParams\n   * @param derivePathParams, such as { accountIndex: 2, isExternal: false, addressIndex: 10 }, comply with the BIP44 standard\n   */\n  switchAccount(derivePathParams: DerivePathParams) {\n    this.accountManager.switchAccount(derivePathParams);\n  }\n\n  /**\n   * @description Get the address of the account for the given derivePathParams\n   * @param derivePathParams, such as { accountIndex: 2, isExternal: false, addressIndex: 10 }, comply with the BIP44 standard\n   */\n  getAddress(derivePathParams?: DerivePathParams) {\n    return this.accountManager.getAddress(derivePathParams);\n  }\n\n  currentAddress() {\n    return this.accountManager.currentAddress;\n  }\n\n  getPackageId() {\n    return this.contractFactory.packageId;\n  }\n\n  getMetadata() {\n    return this.contractFactory.metadata;\n  }\n\n  getNetwork() {\n    return this.suiInteractor.network;\n  }\n  /**\n   * Request some SUI from faucet\n   * @Returns {Promise<boolean>}, true if the request is successful, false otherwise.\n   */\n  async requestFaucet(\n    address?: string,\n    network?: FaucetNetworkType,\n    derivePathParams?: DerivePathParams\n  ) {\n    if (address === undefined) {\n      address = this.accountManager.getAddress(derivePathParams);\n    }\n    if (network === undefined) {\n      network = this.getNetwork() as\n        | FaucetNetworkType\n        | 'devnet' as FaucetNetworkType;\n    }\n    // const addr = this.accountManager.getAddress(derivePathParams);\n    return this.suiInteractor.requestFaucet(address, network);\n  }\n\n  async getBalance(coinType?: string, derivePathParams?: DerivePathParams) {\n    const owner = this.accountManager.getAddress(derivePathParams);\n    return this.suiInteractor.currentClient.getBalance({ owner, coinType });\n  }\n\n  async balanceOf(\n    accountAddress?: string,\n    coinType?: string,\n    derivePathParams?: DerivePathParams\n  ) {\n    if (accountAddress === undefined) {\n      accountAddress = this.accountManager.getAddress(derivePathParams);\n    }\n    const owner = accountAddress;\n    return this.suiInteractor.currentClient.getBalance({ owner, coinType });\n  }\n\n  client() {\n    return this.suiInteractor.currentClient;\n  }\n\n  async getObject(objectId: string) {\n    return this.suiInteractor.getObject(objectId);\n  }\n\n  async getObjects(objectIds: string[]) {\n    return this.suiInteractor.getObjects(objectIds);\n  }\n\n  async signTxn(\n    tx: Uint8Array | Transaction | SuiTx,\n    derivePathParams?: DerivePathParams\n  ) {\n    if (tx instanceof SuiTx || tx instanceof Transaction) {\n      tx.setSender(this.getAddress(derivePathParams));\n    }\n    const txBlock = tx instanceof SuiTx ? tx.tx : tx;\n    const txBytes =\n      txBlock instanceof Transaction\n        ? await txBlock.build({ client: this.client() })\n        : txBlock;\n    const keyPair = this.getKeypair(derivePathParams);\n    return await keyPair.signTransaction(txBytes);\n  }\n\n  async signAndSendTxn(\n    tx: Uint8Array | Transaction | SuiTx,\n    derivePathParams?: DerivePathParams\n  ): Promise<SuiTransactionBlockResponse> {\n    const { bytes, signature } = await this.signTxn(tx, derivePathParams);\n    return this.suiInteractor.sendTx(bytes, signature);\n  }\n\n  async sendTxn(\n    transactionBlock: Uint8Array | string,\n    signature: string | string[]\n  ): Promise<SuiTransactionBlockResponse> {\n    return this.suiInteractor.sendTx(transactionBlock, signature);\n  }\n\n  /**\n   * Transfer the given amount of SUI to the recipient\n   * @param recipient\n   * @param amount\n   * @param derivePathParams\n   */\n  async transferSui(\n    recipient: string,\n    amount: number,\n    derivePathParams?: DerivePathParams\n  ) {\n    const tx = new SuiTx();\n    tx.transferSui(recipient, amount);\n    return this.signAndSendTxn(tx, derivePathParams);\n  }\n\n  /**\n   * Transfer to mutliple recipients\n   * @param recipients the recipients addresses\n   * @param amounts the amounts of SUI to transfer to each recipient, the length of amounts should be the same as the length of recipients\n   * @param derivePathParams\n   */\n  async transferSuiToMany(\n    recipients: string[],\n    amounts: number[],\n    derivePathParams?: DerivePathParams\n  ) {\n    const tx = new SuiTx();\n    tx.transferSuiToMany(recipients, amounts);\n    return this.signAndSendTxn(tx, derivePathParams);\n  }\n\n  /**\n   * Transfer the given amounts of coin to multiple recipients\n   * @param recipients the list of recipient address\n   * @param amounts the amounts to transfer for each recipient\n   * @param coinType any custom coin type but not SUI\n   * @param derivePathParams the derive path params for the current signer\n   */\n  async transferCoinToMany(\n    recipients: string[],\n    amounts: number[],\n    coinType: string,\n    derivePathParams?: DerivePathParams\n  ) {\n    const tx = new SuiTx();\n    const owner = this.accountManager.getAddress(derivePathParams);\n    const totalAmount = amounts.reduce((a, b) => a + b, 0);\n    const coins = await this.suiInteractor.selectCoins(\n      owner,\n      totalAmount,\n      coinType\n    );\n    tx.transferCoinToMany(\n      coins.map((c) => c.objectId),\n      owner,\n      recipients,\n      amounts\n    );\n    return this.signAndSendTxn(tx, derivePathParams);\n  }\n\n  async transferCoin(\n    recipient: string,\n    amount: number,\n    coinType: string,\n    derivePathParams?: DerivePathParams\n  ) {\n    return this.transferCoinToMany(\n      [recipient],\n      [amount],\n      coinType,\n      derivePathParams\n    );\n  }\n\n  async transferObjects(\n    objects: SuiObjectArg[],\n    recipient: string,\n    derivePathParams?: DerivePathParams\n  ) {\n    const tx = new SuiTx();\n    tx.transferObjects(objects, recipient);\n    return this.signAndSendTxn(tx, derivePathParams);\n  }\n\n  async moveCall(callParams: {\n    target: string;\n    arguments?: (SuiTxArg | SuiVecTxArg)[];\n    typeArguments?: string[];\n    derivePathParams?: DerivePathParams;\n  }) {\n    const {\n      target,\n      arguments: args = [],\n      typeArguments = [],\n      derivePathParams,\n    } = callParams;\n    const tx = new SuiTx();\n    tx.moveCall(target, args, typeArguments);\n    return this.signAndSendTxn(tx, derivePathParams);\n  }\n\n  /**\n   * Select coins with the given amount and coin type, the total amount is greater than or equal to the given amount\n   * @param amount\n   * @param coinType\n   * @param owner\n   */\n  async selectCoinsWithAmount(\n    amount: number,\n    coinType: string,\n    owner?: string\n  ) {\n    owner = owner || this.accountManager.currentAddress;\n    const coins = await this.suiInteractor.selectCoins(owner, amount, coinType);\n    return coins.map((c) => c.objectId);\n  }\n\n  async selectObjectsWithType(objectType: string, owner?: string) {\n    owner = owner || this.accountManager.currentAddress;\n    const objects = await this.suiInteractor.selectObjects(owner, objectType);\n    return objects.map((c) => c.objectId);\n  }\n\n  /**\n   * stake the given amount of SUI to the validator\n   * @param amount the amount of SUI to stake\n   * @param validatorAddr the validator address\n   * @param derivePathParams the derive path params for the current signer\n   */\n  async stakeSui(\n    amount: number,\n    validatorAddr: string,\n    derivePathParams?: DerivePathParams\n  ) {\n    const tx = new SuiTx();\n    tx.stakeSui(amount, validatorAddr);\n    return this.signAndSendTxn(tx, derivePathParams);\n  }\n\n  /**\n   * Execute the transaction with on-chain data but without really submitting. Useful for querying the effects of a transaction.\n   * Since the transaction is not submitted, its gas cost is not charged.\n   * @param tx the transaction to execute\n   * @param derivePathParams the derive path params\n   * @returns the effects and events of the transaction, such as object changes, gas cost, event emitted.\n   */\n  async inspectTxn(\n    tx: Uint8Array | Transaction | SuiTx,\n    derivePathParams?: DerivePathParams\n  ): Promise<DevInspectResults> {\n    const txBlock = tx instanceof SuiTx ? tx.tx : tx;\n    return this.suiInteractor.currentClient.devInspectTransactionBlock({\n      transactionBlock: txBlock,\n      sender: this.getAddress(derivePathParams),\n    });\n  }\n\n  async getOwnedObjects(owner: string, cursor?: string, limit?: number) {\n    const ownedObjects = await this.suiInteractor.getOwnedObjects(\n      owner,\n      cursor,\n      limit\n    );\n    const ownedObjectsRes: SuiObjectData[] = [];\n\n    for (const object of ownedObjects.data) {\n      const objectDetail = await this.getObject(object.data!.objectId);\n      if (\n        objectDetail.type!.split('::')[0] === this.contractFactory.packageId\n      ) {\n        ownedObjectsRes.push(objectDetail);\n      }\n    }\n\n    return ownedObjectsRes;\n  }\n\n  async entity_key_from_object(objectId: string) {\n    const checkObjectId = normalizeHexAddress(objectId);\n    if (checkObjectId !== null) {\n      objectId = checkObjectId;\n      return objectId;\n    } else {\n      return undefined;\n    }\n  }\n\n  async entity_key_from_bytes(bytes: Uint8Array | Buffer | string) {\n    const hashBytes = keccak256(bytes);\n    const hashU8Array: number[] = Array.from(hashBytes);\n    const value = Uint8Array.from(hashU8Array);\n    const Address = bcs.bytes(32).transform({\n      // To change the input type, you need to provide a type definition for the input\n      input: (val: string) => fromHEX(val),\n      output: (val) => toHEX(val),\n    });\n    const data = Address.parse(value);\n    return '0x' + data;\n  }\n\n  async entity_key_from_address_with_seed(objectId: string, seed: string) {\n    const checkObjectId = normalizeHexAddress(objectId);\n    if (checkObjectId !== null) {\n      objectId = checkObjectId;\n      const bytes = Buffer.from(objectId.slice(2), 'hex');\n      const newBuffer = Buffer.concat([bytes, Buffer.from(seed, 'utf-8')]);\n      return this.entity_key_from_bytes(newBuffer);\n    } else {\n      return undefined;\n    }\n  }\n\n  async entity_key_from_address_with_u256(objectId: string, x: number) {\n    const checkObjectId = normalizeHexAddress(objectId);\n    if (checkObjectId !== null) {\n      objectId = checkObjectId;\n      const bytes = Buffer.from(objectId.slice(2), 'hex');\n\n      const numberBytes = bcs.u256().serialize(x).toBytes();\n\n      return this.entity_key_from_bytes(Buffer.concat([bytes, numberBytes]));\n    } else {\n      return undefined;\n    }\n  }\n\n  async entity_key_from_u256(x: number) {\n    return numberToAddressHex(x);\n  }\n\n  // async formatData(type: string, value: Buffer | number[] | Uint8Array) {\n  //   const u8Value = Uint8Array.from(value);\n  //   return bcs.de(type, u8Value);\n  // }\n}\n","import { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { getKeyPair } from './keypair';\nimport { hexOrBase64ToUint8Array, normalizePrivateKey } from './util';\nimport { generateMnemonic } from './crypto';\nimport type { AccountMangerParams, DerivePathParams } from 'src/types';\nimport {\n  SUI_PRIVATE_KEY_PREFIX,\n  decodeSuiPrivateKey,\n} from '@mysten/sui/cryptography';\n\nexport class SuiAccountManager {\n  private mnemonics: string;\n  private secretKey: string;\n  public currentKeyPair: Ed25519Keypair;\n  public currentAddress: string;\n\n  /**\n   * Support the following ways to init the SuiToolkit:\n   * 1. mnemonics\n   * 2. secretKey (base64 or hex)\n   * If none of them is provided, will generate a random mnemonics with 24 words.\n   *\n   * @param mnemonics, 12 or 24 mnemonics words, separated by space\n   * @param secretKey, base64 or hex string or Bech32 string, when mnemonics is provided, secretKey will be ignored\n   */\n  constructor({ mnemonics, secretKey }: AccountMangerParams = {}) {\n    // If the mnemonics or secretKey is provided, use it\n    // Otherwise, generate a random mnemonics with 24 words\n    this.mnemonics = mnemonics || '';\n    this.secretKey = secretKey || '';\n    if (!this.mnemonics && !this.secretKey) {\n      this.mnemonics = generateMnemonic(24);\n    }\n\n    // Init the current account\n    this.currentKeyPair = this.secretKey\n      ? this.parseSecretKey(this.secretKey)\n      : getKeyPair(this.mnemonics);\n    this.currentAddress = this.currentKeyPair.getPublicKey().toSuiAddress();\n  }\n\n  /**\n   * Check if the secretKey starts with bench32 format\n   */\n  parseSecretKey(secretKey: string) {\n    if (secretKey.startsWith(SUI_PRIVATE_KEY_PREFIX)) {\n      const { secretKey: uint8ArraySecretKey } = decodeSuiPrivateKey(secretKey);\n      return Ed25519Keypair.fromSecretKey(\n        normalizePrivateKey(uint8ArraySecretKey)\n      );\n    }\n\n    return Ed25519Keypair.fromSecretKey(\n      normalizePrivateKey(hexOrBase64ToUint8Array(secretKey))\n    );\n  }\n\n  /**\n   * if derivePathParams is not provided or mnemonics is empty, it will return the currentKeyPair.\n   * else:\n   * it will generate keyPair from the mnemonic with the given derivePathParams.\n   */\n  getKeyPair(derivePathParams?: DerivePathParams) {\n    if (!derivePathParams || !this.mnemonics) return this.currentKeyPair;\n    return getKeyPair(this.mnemonics, derivePathParams);\n  }\n\n  /**\n   * if derivePathParams is not provided or mnemonics is empty, it will return the currentAddress.\n   * else:\n   * it will generate address from the mnemonic with the given derivePathParams.\n   */\n  getAddress(derivePathParams?: DerivePathParams) {\n    if (!derivePathParams || !this.mnemonics) return this.currentAddress;\n    return getKeyPair(this.mnemonics, derivePathParams)\n      .getPublicKey()\n      .toSuiAddress();\n  }\n\n  /**\n   * Switch the current account with the given derivePathParams.\n   * This is only useful when the mnemonics is provided. For secretKey mode, it will always use the same account.\n   */\n  switchAccount(derivePathParams: DerivePathParams) {\n    if (this.mnemonics) {\n      this.currentKeyPair = getKeyPair(this.mnemonics, derivePathParams);\n      this.currentAddress = this.currentKeyPair.getPublicKey().toSuiAddress();\n    }\n  }\n}\n","import { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport type { DerivePathParams } from '../../types';\n\n/**\n * @description Get ed25519 derive path for SUI\n * @param derivePathParams\n */\nexport const getDerivePathForSUI = (\n  derivePathParams: DerivePathParams = {}\n) => {\n  const {\n    accountIndex = 0,\n    isExternal = false,\n    addressIndex = 0,\n  } = derivePathParams;\n  return `m/44'/784'/${accountIndex}'/${isExternal ? 1 : 0}'/${addressIndex}'`;\n};\n\n/**\n * the format is m/44'/784'/accountIndex'/${isExternal ? 1 : 0}'/addressIndex'\n *\n * accountIndex is the index of the account, default is 0.\n *\n * isExternal is the type of the address, default is false. Usually, the external address is used to receive coins. The internal address is used to change coins.\n *\n * addressIndex is the index of the address, default is 0. It's used to generate multiple addresses for one account.\n *\n * @description Get keypair from mnemonics and derive path\n * @param mnemonics\n * @param derivePathParams\n */\nexport const getKeyPair = (\n  mnemonics: string,\n  derivePathParams: DerivePathParams = {}\n) => {\n  const derivePath = getDerivePathForSUI(derivePathParams);\n  return Ed25519Keypair.deriveKeypair(mnemonics, derivePath);\n};\n","import { fromB64 } from '@mysten/sui/utils';\n\n/**\n * @description This regular expression matches any string that contains only hexadecimal digits (0-9, A-F, a-f).\n * @param str\n */\nexport const isHex = (str: string) =>\n  /^0x[0-9a-fA-F]+$|^[0-9a-fA-F]+$/.test(str);\n\n/**\n * @description This regular expression matches any string that contains only base64 digits (0-9, A-Z, a-z, +, /, =).\n * Note that the \"=\" signs at the end are optional padding characters that may be present in some base64 encoded strings.\n * @param str\n */\nexport const isBase64 = (str: string) => /^[a-zA-Z0-9+/]+={0,2}$/g.test(str);\n\n/**\n * Convert a hex string to Uint8Array\n * @param hexStr\n */\nexport const fromHEX = (hexStr: string): Uint8Array => {\n  if (!hexStr) {\n    throw new Error('cannot parse empty string to Uint8Array');\n  }\n  const intArr = hexStr\n    .replace('0x', '')\n    .match(/.{1,2}/g)\n    ?.map((byte) => parseInt(byte, 16));\n\n  if (!intArr || intArr.length === 0) {\n    throw new Error(`Unable to parse HEX: ${hexStr}`);\n  }\n  return Uint8Array.from(intArr);\n};\n\n/**\n * @description Convert a hex or base64 string to Uint8Array\n */\nexport const hexOrBase64ToUint8Array = (str: string): Uint8Array => {\n  if (isHex(str)) {\n    return fromHEX(str);\n  } else if (isBase64(str)) {\n    return fromB64(str);\n  } else {\n    throw new Error('The string is not a valid hex or base64 string.');\n  }\n};\n\nconst PRIVATE_KEY_SIZE = 32;\nconst LEGACY_PRIVATE_KEY_SIZE = 64;\n/**\n * normalize a private key\n * A private key is a 32-byte array.\n * But there are two different formats for private keys:\n * 1. A 32-byte array\n * 2. A 64-byte array with the first 32 bytes being the private key and the last 32 bytes being the public key\n * 3. A 33-byte array with the first byte being 0x00 (sui.keystore key is a Base64 string with scheme flag 0x00 at the beginning)\n */\nexport const normalizePrivateKey = (key: Uint8Array): Uint8Array => {\n  if (key.length === LEGACY_PRIVATE_KEY_SIZE) {\n    // This is a legacy secret key, we need to strip the public key bytes and only read the first 32 bytes\n    key = key.slice(0, PRIVATE_KEY_SIZE);\n  } else if (key.length === PRIVATE_KEY_SIZE + 1 && key[0] === 0) {\n    // sui.keystore key is a Base64 string with scheme flag 0x00 at the beginning\n    return key.slice(1);\n  } else if (key.length === PRIVATE_KEY_SIZE) {\n    return key;\n  }\n  throw new Error('invalid secret key');\n};\n","import { generateMnemonic as genMnemonic } from '@scure/bip39';\nimport { wordlist } from '@scure/bip39/wordlists/english';\n\nexport const generateMnemonic = (numberOfWords: 12 | 24 = 24) => {\n  const strength = numberOfWords === 12 ? 128 : 256;\n  return genMnemonic(wordlist, strength);\n};\n","import { Transaction } from '@mysten/sui/transactions';\nimport { SUI_SYSTEM_STATE_OBJECT_ID } from '@mysten/sui/utils';\nimport type { SuiClient, SuiObjectRef } from '@mysten/sui/client';\nimport type {\n  TransactionArgument,\n  TransactionObjectArgument,\n  TransactionObjectInput,\n} from '@mysten/sui/transactions';\nimport type { Keypair } from '@mysten/sui/cryptography';\nimport { SerializedBcs } from '@mysten/bcs';\n\nimport type {\n  ObjectCallArg,\n  TransactionType,\n  SuiTxArg,\n  SuiAddressArg,\n  SuiObjectArg,\n  SuiVecTxArg,\n  SuiAmountsArg,\n} from '../../types';\n\nimport type { bcs } from '@mysten/sui/bcs';\nimport {\n  convertArgs,\n  convertAddressArg,\n  convertObjArg,\n  convertAmounts,\n} from './util';\nexport class SuiTx {\n  public tx: Transaction;\n\n  constructor(transaction?: Transaction) {\n    if (transaction !== undefined) {\n      this.tx = Transaction.from(transaction);\n    } else {\n      this.tx = new Transaction();\n    }\n  }\n\n  /* Directly wrap methods and properties of TransactionBlock */\n  get gas() {\n    return this.tx.gas;\n  }\n  get blockData() {\n    return this.tx.blockData;\n  }\n  address(value: string) {\n    return this.tx.pure.address(value);\n  }\n  get pure(): {\n    <T extends TransactionArgument>(value: T): TransactionArgument;\n    address(value: string): TransactionArgument;\n    u8(value: number | bigint): TransactionArgument;\n    u16(value: number | bigint): TransactionArgument;\n    u32(value: number | bigint): TransactionArgument;\n    u64(value: number | bigint): TransactionArgument;\n    u128(value: number | bigint): TransactionArgument;\n    u256(value: number | bigint): TransactionArgument;\n    bool(value: boolean): TransactionArgument;\n  } {\n    return this.tx.pure;\n  }\n  object(value: string | TransactionObjectInput) {\n    return this.tx.object(value);\n  }\n  objectRef(ref: SuiObjectRef) {\n    return this.tx.objectRef(ref);\n  }\n  sharedObjectRef(ref: typeof bcs.SharedObjectRef.$inferType) {\n    return this.tx.sharedObjectRef(ref);\n  }\n  setSender(sender: string) {\n    return this.tx.setSender(sender);\n  }\n  setSenderIfNotSet(sender: string) {\n    return this.tx.setSenderIfNotSet(sender);\n  }\n  setExpiration(expiration?: Parameters<typeof this.tx.setExpiration>[0]) {\n    return this.tx.setExpiration(expiration);\n  }\n  setGasPrice(price: number | bigint) {\n    return this.tx.setGasPrice(price);\n  }\n  setGasBudget(budget: number | bigint) {\n    return this.tx.setGasBudget(budget);\n  }\n  setGasOwner(owner: string) {\n    return this.tx.setGasOwner(owner);\n  }\n  setGasPayment(payments: SuiObjectRef[]) {\n    return this.tx.setGasPayment(payments);\n  }\n  serialize() {\n    return this.tx.serialize();\n  }\n  toJSON() {\n    return this.tx.toJSON();\n  }\n  sign(params: {\n    signer: Keypair;\n    client?: SuiClient;\n    onlyTransactionKind?: boolean;\n  }) {\n    return this.tx.sign(params);\n  }\n  build(\n    params: {\n      client?: SuiClient;\n      onlyTransactionKind?: boolean;\n    } = {}\n  ) {\n    return this.tx.build(params);\n  }\n  getDigest(params: { client?: SuiClient } = {}) {\n    return this.tx.getDigest(params);\n  }\n  add(...args: Parameters<typeof this.tx.add>) {\n    return this.tx.add(...args);\n  }\n  publish({\n    modules,\n    dependencies,\n  }: {\n    modules: number[][] | string[];\n    dependencies: string[];\n  }) {\n    return this.tx.publish({ modules, dependencies });\n  }\n  upgrade(...args: Parameters<typeof this.tx.upgrade>) {\n    return this.tx.upgrade(...args);\n  }\n  makeMoveVec(...args: Parameters<typeof this.tx.makeMoveVec>) {\n    return this.tx.makeMoveVec(...args);\n  }\n\n  /* Override methods of TransactionBlock */\n\n  transferObjects(objects: SuiObjectArg[], address: SuiAddressArg) {\n    return this.tx.transferObjects(\n      objects.map((object) => convertObjArg(this.tx, object)),\n      convertAddressArg(this.tx, address)\n    );\n  }\n\n  splitCoins(coin: SuiObjectArg, amounts: SuiAmountsArg[]) {\n    const res = this.tx.splitCoins(\n      convertObjArg(this.tx, coin),\n      convertAmounts(this.tx, amounts)\n    );\n    return amounts.map((_, i) => res[i]);\n  }\n\n  mergeCoins(destination: SuiObjectArg, sources: SuiObjectArg[]) {\n    const destinationObject = convertObjArg(this.tx, destination);\n    const sourceObjects = sources.map((source) =>\n      convertObjArg(this.tx, source)\n    );\n    return this.tx.mergeCoins(destinationObject, sourceObjects);\n  }\n\n  /**\n   * @description Move call\n   * @param target `${string}::${string}::${string}`, e.g. `0x3::sui_system::request_add_stake`\n   * @param args the arguments of the move call, such as `['0x1', '0x2']`\n   * @param typeArgs the type arguments of the move call, such as `['0x2::sui::SUI']`\n   */\n  moveCall(\n    target: string,\n    args: (SuiTxArg | SuiVecTxArg)[] = [],\n    typeArgs: string[] = []\n  ) {\n    // a regex for pattern `${string}::${string}::${string}`\n    const regex =\n      /(?<package>[a-zA-Z0-9]+)::(?<module>[a-zA-Z0-9_]+)::(?<function>[a-zA-Z0-9_]+)/;\n    const match = target.match(regex);\n    if (match === null)\n      throw new Error(\n        'Invalid target format. Expected `${string}::${string}::${string}`'\n      );\n    const convertedArgs = convertArgs(this.tx, args);\n    return this.tx.moveCall({\n      target: target as `${string}::${string}::${string}`,\n      arguments: convertedArgs,\n      typeArguments: typeArgs,\n    });\n  }\n\n  /* Enhance methods of TransactionBlock */\n\n  transferSuiToMany(\n    recipients: SuiAddressArg[],\n    amounts: (SuiTxArg | number | bigint)[]\n  ) {\n    // require recipients.length === amounts.length\n    if (recipients.length !== amounts.length) {\n      throw new Error(\n        'transferSuiToMany: recipients.length !== amounts.length'\n      );\n    }\n    const coins = this.tx.splitCoins(\n      this.tx.gas,\n      amounts.map((amount) =>\n        typeof amount === 'number' || typeof amount === 'bigint'\n          ? amount\n          : convertArgs(this.tx, [amount])[0]\n      )\n    );\n    const recipientObjects = recipients.map((recipient) =>\n      convertAddressArg(this.tx, recipient)\n    );\n    recipientObjects.forEach((address, index) => {\n      this.tx.transferObjects([coins[index]], address);\n    });\n    return this;\n  }\n\n  transferSui(address: SuiAddressArg, amount: SuiTxArg | number | bigint) {\n    return this.transferSuiToMany([address], [amount]);\n  }\n\n  takeAmountFromCoins(\n    coins: SuiObjectArg[],\n    amount: SuiTxArg | number | bigint\n  ) {\n    const coinObjects = coins.map((coin) => convertObjArg(this.tx, coin));\n    const mergedCoin = coinObjects[0];\n    if (coins.length > 1) {\n      this.tx.mergeCoins(mergedCoin, coinObjects.slice(1));\n    }\n    const [sendCoin] = this.tx.splitCoins(\n      mergedCoin,\n      convertAmounts(this.tx, [amount])\n    );\n    return [sendCoin, mergedCoin];\n  }\n\n  splitSUIFromGas(amounts: SuiAmountsArg[]) {\n    return this.tx.splitCoins(this.tx.gas, convertAmounts(this.tx, amounts));\n  }\n\n  splitMultiCoins(coins: SuiObjectArg[], amounts: SuiAmountsArg[]) {\n    const coinObjects = coins.map((coin) => convertObjArg(this.tx, coin));\n    const mergedCoin = coinObjects[0];\n    if (coins.length > 1) {\n      this.tx.mergeCoins(mergedCoin, coinObjects.slice(1));\n    }\n    const splitedCoins = this.tx.splitCoins(\n      mergedCoin,\n      convertAmounts(this.tx, amounts)\n    );\n    return { splitedCoins, mergedCoin };\n  }\n\n  transferCoinToMany(\n    coins: SuiObjectArg[],\n    sender: SuiAddressArg,\n    recipients: SuiAddressArg[],\n    amounts: SuiAmountsArg[]\n  ) {\n    // require recipients.length === amounts.length\n    if (recipients.length !== amounts.length) {\n      throw new Error(\n        'transferSuiToMany: recipients.length !== amounts.length'\n      );\n    }\n    const coinObjects = coins.map((coin) => convertObjArg(this.tx, coin));\n    const { splitedCoins, mergedCoin } = this.splitMultiCoins(\n      coinObjects,\n      amounts\n    );\n    const recipientObjects = recipients.map((recipient) =>\n      convertAddressArg(this.tx, recipient)\n    );\n    recipientObjects.forEach((address, index) => {\n      this.tx.transferObjects([splitedCoins[index]], address);\n    });\n    this.tx.transferObjects([mergedCoin], convertAddressArg(this.tx, sender));\n    return this;\n  }\n\n  transferCoin(\n    coins: SuiObjectArg[],\n    sender: SuiAddressArg,\n    recipient: SuiAddressArg,\n    amount: SuiAmountsArg\n  ) {\n    return this.transferCoinToMany(coins, sender, [recipient], [amount]);\n  }\n\n  stakeSui(amount: SuiTxArg | number | bigint, validatorAddr: SuiAddressArg) {\n    const [stakeCoin] = this.tx.splitCoins(\n      this.tx.gas,\n      convertAmounts(this.tx, [amount])\n    );\n    return this.tx.moveCall({\n      target: '0x3::sui_system::request_add_stake',\n      arguments: convertArgs(this.tx, [\n        this.tx.object(SUI_SYSTEM_STATE_OBJECT_ID),\n        stakeCoin,\n        convertAddressArg(this.tx, validatorAddr),\n      ]),\n    });\n  }\n}\n","import {\n  normalizeSuiObjectId,\n  normalizeSuiAddress,\n  isValidSuiObjectId,\n  isValidSuiAddress,\n} from '@mysten/sui/utils';\nimport { Inputs, getPureBcsSchema } from '@mysten/sui/transactions';\nimport { SerializedBcs, bcs, isSerializedBcs } from '@mysten/bcs';\nimport type {\n  TransactionArgument,\n  Transaction,\n  TransactionObjectArgument,\n} from '@mysten/sui/transactions';\nimport type {\n  SuiObjectArg,\n  SuiAddressArg,\n  SuiTxArg,\n  SuiVecTxArg,\n  SuiInputTypes,\n  SuiAmountsArg,\n} from 'src/types';\n\nexport const getDefaultSuiInputType = (\n  value: SuiTxArg\n): 'u64' | 'bool' | 'object' | undefined => {\n  if (typeof value === 'string' && isValidSuiObjectId(value)) {\n    return 'object';\n  } else if (typeof value === 'number' || typeof value === 'bigint') {\n    return 'u64';\n  } else if (typeof value === 'boolean') {\n    return 'bool';\n  } else {\n    return undefined;\n  }\n};\n\n/**\n * Since we know the elements in the array are the same type\n * If type is not provided, we will try to infer the type from the first element\n * By default,\n *\n * string is hex and its length equal to 32 =====> object id\n * number, bigint ====> u64\n * boolean =====> bool\n *\n * If type is provided, we will use the type to convert the array\n * @param args\n * @param type 'address' | 'bool' | 'u8' | 'u16' | 'u32' | 'u64' | 'u128' | 'u256' | 'signer' | 'object' | string\n */\nexport function makeVecParam(\n  txBlock: Transaction,\n  args: SuiTxArg[],\n  type?: SuiInputTypes\n): TransactionArgument {\n  if (args.length === 0)\n    throw new Error('Transaction builder error: Empty array is not allowed');\n  // Using first element value as default type\n  const defaultSuiType = getDefaultSuiInputType(args[0]);\n  const VECTOR_REGEX = /^vector<(.+)>$/;\n  const STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\n\n  type = type || defaultSuiType;\n\n  if (type === 'object') {\n    const elements = args.map((arg) =>\n      typeof arg === 'string' && isValidSuiObjectId(arg)\n        ? txBlock.object(normalizeSuiObjectId(arg))\n        : convertObjArg(txBlock, arg as SuiObjectArg)\n    );\n    return txBlock.makeMoveVec({ elements });\n  } else if (\n    typeof type === 'string' &&\n    !VECTOR_REGEX.test(type) &&\n    !STRUCT_REGEX.test(type)\n  ) {\n    const bcsSchema = getPureBcsSchema(type)!;\n    return txBlock.pure(bcs.vector(bcsSchema).serialize(args));\n  } else {\n    const elements = args.map((arg) =>\n      convertObjArg(txBlock, arg as SuiObjectArg)\n    );\n    return txBlock.makeMoveVec({ elements, type });\n  }\n}\n\n/**\n * Check whether it is an valid move vec input.\n *\n * @param arg The argument to check.\n * @returns boolean.\n */\nexport function isMoveVecArg(arg: SuiTxArg | SuiVecTxArg): arg is SuiVecTxArg {\n  if (typeof arg === 'object' && 'vecType' in arg && 'value' in arg) {\n    return true;\n  } else if (Array.isArray(arg)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Convert any valid input into array of TransactionArgument.\n *\n * @param txb The Transaction Block\n * @param args The array of argument to convert.\n * @returns The converted array of TransactionArgument.\n */\nexport function convertArgs(\n  txBlock: Transaction,\n  args: (SuiTxArg | SuiVecTxArg)[]\n): TransactionArgument[] {\n  return args.map((arg) => {\n    if (arg instanceof SerializedBcs || isSerializedBcs(arg)) {\n      return txBlock.pure(arg);\n    }\n\n    if (isMoveVecArg(arg)) {\n      const vecType = 'vecType' in arg;\n      return vecType\n        ? makeVecParam(txBlock, arg.value, arg.vecType)\n        : makeVecParam(txBlock, arg);\n    }\n\n    return arg;\n  });\n}\n\n/**\n * Convert any valid address input into a TransactionArgument.\n *\n * @param txb The Transaction Block\n * @param arg The address argument to convert.\n * @returns The converted TransactionArgument.\n */\nexport function convertAddressArg(\n  txBlock: Transaction,\n  arg: SuiAddressArg\n): TransactionArgument {\n  if (typeof arg === 'string' && isValidSuiAddress(arg)) {\n    return txBlock.pure.address(normalizeSuiAddress(arg));\n  } else {\n    return convertArgs(txBlock, [arg])[0];\n  }\n}\n\n/**\n * Convert any valid object input into a TransactionArgument.\n *\n * @param txb The Transaction Block\n * @param arg The object argument to convert.\n * @returns The converted TransactionArgument.\n */\nexport function convertObjArg(\n  txb: Transaction,\n  arg: SuiObjectArg\n): TransactionObjectArgument {\n  if (typeof arg === 'string') {\n    return txb.object(arg);\n  }\n\n  if ('digest' in arg && 'version' in arg && 'objectId' in arg) {\n    return txb.objectRef(arg);\n  }\n\n  if ('objectId' in arg && 'initialSharedVersion' in arg && 'mutable' in arg) {\n    return txb.sharedObjectRef(arg);\n  }\n\n  if ('Object' in arg) {\n    if ('ImmOrOwnedObject' in arg.Object) {\n      return txb.object(Inputs.ObjectRef(arg.Object.ImmOrOwnedObject));\n    } else if ('SharedObject' in arg.Object) {\n      return txb.object(Inputs.SharedObjectRef(arg.Object.SharedObject));\n    } else {\n      throw new Error('Invalid argument type');\n    }\n  }\n\n  if (typeof arg === 'function') {\n    return arg;\n  }\n\n  if (\n    'GasCoin' in arg ||\n    'Input' in arg ||\n    'Result' in arg ||\n    'NestedResult' in arg\n  ) {\n    return arg;\n  }\n\n  throw new Error('Invalid argument type');\n}\n\nexport function convertAmounts(txBlock: Transaction, amounts: SuiAmountsArg[]) {\n  return amounts.map((amount) => {\n    if (typeof amount === 'number' || typeof amount === 'bigint') {\n      return amount;\n    } else {\n      return convertArgs(txBlock, [amount])[0];\n    }\n  });\n}\n","import { SuiClient } from '@mysten/sui/client';\nimport type {\n  SuiTransactionBlockResponseOptions,\n  SuiTransactionBlockResponse,\n  SuiObjectDataOptions,\n  SuiObjectData,\n} from '@mysten/sui/client';\nimport type * as RpcTypes from '@mysten/sui/dist/cjs/client/types/generated';\nimport { requestSuiFromFaucetV0, getFaucetHost } from '@mysten/sui/faucet';\nimport { FaucetNetworkType, NetworkType, ObjectData } from '../../types';\nimport { SuiOwnedObject, SuiSharedObject } from '../suiModel';\nimport { delay } from './util';\n\n/**\n * `SuiTransactionSender` is used to send transaction with a given gas coin.\n * It always uses the gas coin to pay for the gas,\n * and update the gas coin after the transaction.\n */\nexport class SuiInteractor {\n  public readonly clients: SuiClient[];\n  public currentClient: SuiClient;\n  public readonly fullNodes: string[];\n  public currentFullNode: string;\n\n  public network?: NetworkType;\n\n  constructor(fullNodeUrls: string[], network?: NetworkType) {\n    if (fullNodeUrls.length === 0)\n      throw new Error('fullNodeUrls must not be empty');\n    this.fullNodes = fullNodeUrls;\n    this.clients = fullNodeUrls.map((url) => new SuiClient({ url }));\n    this.currentFullNode = fullNodeUrls[0];\n    this.currentClient = this.clients[0];\n    this.network = network;\n  }\n\n  switchToNextClient() {\n    const currentClientIdx = this.clients.indexOf(this.currentClient);\n    this.currentClient =\n      this.clients[(currentClientIdx + 1) % this.clients.length];\n    this.currentFullNode =\n      this.fullNodes[(currentClientIdx + 1) % this.clients.length];\n  }\n\n  async sendTx(\n    transactionBlock: Uint8Array | string,\n    signature: string | string[]\n  ): Promise<SuiTransactionBlockResponse> {\n    const txResOptions: SuiTransactionBlockResponseOptions = {\n      showEvents: true,\n      showEffects: true,\n      showObjectChanges: true,\n      showBalanceChanges: true,\n    };\n\n    // const currentProviderIdx = this.providers.indexOf(this.currentProvider);\n    // const providers = [\n    //   ...this.providers.slice(currentProviderIdx, this.providers.length),\n    //   ...this.providers.slice(0, currentProviderIdx),\n    // ]\n\n    for (const clientIdx in this.clients) {\n      try {\n        return await this.clients[clientIdx].executeTransactionBlock({\n          transactionBlock,\n          signature,\n          options: txResOptions,\n        });\n      } catch (err) {\n        console.warn(\n          `Failed to send transaction with fullnode ${this.fullNodes[clientIdx]}: ${err}`\n        );\n        await delay(2000);\n      }\n    }\n    throw new Error('Failed to send transaction with all fullnodes');\n  }\n\n  async getObjects(\n    ids: string[],\n    options?: SuiObjectDataOptions\n  ): Promise<SuiObjectData[]> {\n    const opts: SuiObjectDataOptions = options ?? {\n      showContent: true,\n      showDisplay: true,\n      showType: true,\n      showOwner: true,\n    };\n\n    for (const clientIdx in this.clients) {\n      try {\n        const objects = await this.clients[clientIdx].multiGetObjects({\n          ids,\n          options: opts,\n        });\n        const parsedObjects = objects\n          .map((object) => {\n            return object.data;\n          })\n          .filter((object) => object !== null && object !== undefined);\n        return parsedObjects as SuiObjectData[];\n      } catch (err) {\n        await delay(2000);\n        console.warn(\n          `Failed to get objects with fullnode ${this.fullNodes[clientIdx]}: ${err}`\n        );\n      }\n    }\n    throw new Error('Failed to get objects with all fullnodes');\n  }\n\n  async getObject(id: string) {\n    const objects = await this.getObjects([id]);\n    return objects[0];\n  }\n\n  async getDynamicFieldObject(\n    parentId: string,\n    name: RpcTypes.DynamicFieldName\n  ) {\n    for (const clientIdx in this.clients) {\n      try {\n        return await this.clients[clientIdx].getDynamicFieldObject({\n          parentId,\n          name,\n        });\n      } catch (err) {\n        await delay(2000);\n        console.warn(\n          `Failed to get DynamicFieldObject with fullnode ${this.fullNodes[clientIdx]}: ${err}`\n        );\n      }\n    }\n    throw new Error('Failed to get DynamicFieldObject with all fullnodes');\n  }\n\n  async getDynamicFields(parentId: string, cursor?: string, limit?: number) {\n    for (const clientIdx in this.clients) {\n      try {\n        return await this.clients[clientIdx].getDynamicFields({\n          parentId,\n          cursor,\n          limit,\n        });\n      } catch (err) {\n        await delay(2000);\n        console.warn(\n          `Failed to get DynamicFields with fullnode ${this.fullNodes[clientIdx]}: ${err}`\n        );\n      }\n    }\n    throw new Error('Failed to get DynamicFields with all fullnodes');\n  }\n\n  async getTxDetails(digest: string) {\n    for (const clientIdx in this.clients) {\n      try {\n        const txResOptions: SuiTransactionBlockResponseOptions = {\n          showEvents: true,\n          showEffects: true,\n          showObjectChanges: true,\n          showBalanceChanges: true,\n        };\n\n        return await this.clients[clientIdx].getTransactionBlock({\n          digest,\n          options: txResOptions,\n        });\n      } catch (err) {\n        await delay(2000);\n        console.warn(\n          `Failed to get TransactionBlocks with fullnode ${this.fullNodes[clientIdx]}: ${err}`\n        );\n      }\n    }\n    throw new Error('Failed to get TransactionBlocks with all fullnodes');\n  }\n\n  async getOwnedObjects(owner: string, cursor?: string, limit?: number) {\n    for (const clientIdx in this.clients) {\n      try {\n        return await this.clients[clientIdx].getOwnedObjects({\n          owner,\n          cursor,\n          limit,\n        });\n      } catch (err) {\n        await delay(2000);\n        console.warn(\n          `Failed to get OwnedObjects with fullnode ${this.fullNodes[clientIdx]}: ${err}`\n        );\n      }\n    }\n    throw new Error('Failed to get OwnedObjects with all fullnodes');\n  }\n\n  async getNormalizedMoveModulesByPackage(packageId: string) {\n    for (const clientIdx in this.clients) {\n      try {\n        return await this.clients[clientIdx].getNormalizedMoveModulesByPackage({\n          package: packageId,\n        });\n      } catch (err) {\n        await delay(2000);\n        console.warn(\n          `Failed to get NormalizedMoveModules with fullnode ${this.fullNodes[clientIdx]}: ${err}`\n        );\n      }\n    }\n    throw new Error('Failed to get NormalizedMoveModules with all fullnodes');\n  }\n\n  /**\n   * @description Update objects in a batch\n   * @param suiObjects\n   */\n  async updateObjects(suiObjects: (SuiOwnedObject | SuiSharedObject)[]) {\n    const objectIds = suiObjects.map((obj) => obj.objectId);\n    const objects = await this.getObjects(objectIds);\n    for (const object of objects) {\n      const suiObject = suiObjects.find(\n        (obj) => obj.objectId === object?.objectId\n      );\n      if (suiObject instanceof SuiSharedObject) {\n        if (\n          object.owner &&\n          typeof object.owner === 'object' &&\n          'Shared' in object.owner\n        ) {\n          suiObject.initialSharedVersion =\n            object.owner.Shared.initial_shared_version;\n        } else {\n          suiObject.initialSharedVersion = undefined;\n        }\n      } else if (suiObject instanceof SuiOwnedObject) {\n        suiObject.version = object?.version;\n        suiObject.digest = object?.digest;\n      }\n    }\n  }\n\n  /**\n   * @description Select coins that add up to the given amount.\n   * @param addr the address of the owner\n   * @param amount the amount that is needed for the coin\n   * @param coinType the coin type, default is '0x2::SUI::SUI'\n   */\n  async selectCoins(\n    addr: string,\n    amount: number,\n    coinType: string = '0x2::SUI::SUI'\n  ) {\n    const selectedCoins: {\n      objectId: string;\n      digest: string;\n      version: string;\n      balance: string;\n    }[] = [];\n    let totalAmount = 0;\n    let hasNext = true,\n      nextCursor: string | null | undefined = null;\n    while (hasNext && totalAmount < amount) {\n      const coins = await this.currentClient.getCoins({\n        owner: addr,\n        coinType: coinType,\n        cursor: nextCursor,\n      });\n      // Sort the coins by balance in descending order\n      coins.data.sort((a, b) => parseInt(b.balance) - parseInt(a.balance));\n      for (const coinData of coins.data) {\n        selectedCoins.push({\n          objectId: coinData.coinObjectId,\n          digest: coinData.digest,\n          version: coinData.version,\n          balance: coinData.balance,\n        });\n        totalAmount = totalAmount + parseInt(coinData.balance);\n        if (totalAmount >= amount) {\n          break;\n        }\n      }\n\n      nextCursor = coins.nextCursor;\n      hasNext = coins.hasNextPage;\n    }\n\n    if (!selectedCoins.length) {\n      throw new Error('No valid coins found for the transaction.');\n    }\n    return selectedCoins;\n  }\n\n  /**\n   * @description Select owned objects with objectType.\n   * @param addr the address of the owner\n   * @param objectType the coin type, default is '0x2::SUI::SUI'\n   */\n  async selectObjects(addr: string, objectType: string) {\n    const selectedObjects = [];\n    let hasNext = true,\n      nextCursor: string | null | undefined = null;\n    while (hasNext) {\n      const ownedObjects = await this.currentClient.getOwnedObjects({\n        owner: addr,\n        cursor: nextCursor,\n      });\n\n      for (const objectData of ownedObjects.data) {\n        const objectDetail = await this.getObject(objectData.data!.objectId);\n        if (objectDetail.type === objectType) {\n          selectedObjects.push(objectDetail);\n        }\n      }\n\n      nextCursor = ownedObjects.nextCursor;\n      hasNext = ownedObjects.hasNextPage;\n    }\n\n    if (!selectedObjects.length) {\n      throw new Error('Not own this object found for the transaction.');\n    }\n    return selectedObjects;\n  }\n\n  async requestFaucet(address: string, network: FaucetNetworkType) {\n    await requestSuiFromFaucetV0({\n      host: getFaucetHost(network),\n      recipient: address,\n    });\n  }\n}\n","import type { SuiTransactionBlockResponse } from '@mysten/sui/client';\nimport type { CallArg } from '@mysten/sui/transactions';\n\nexport class SuiOwnedObject {\n  public readonly objectId: string;\n  public version?: string;\n  public digest?: string;\n\n  constructor(param: { objectId: string; version?: string; digest?: string }) {\n    this.objectId = param.objectId;\n    this.version = param.version;\n    this.digest = param.digest;\n  }\n\n  /**\n   * Check if the object is fully initialized.\n   * So that when it's used as an input, it won't be necessary to fetch from fullnode again.\n   * Which can save time when sending transactions.\n   */\n  isFullObject(): boolean {\n    return !!this.version && !!this.digest;\n  }\n\n  asCallArg(): CallArg | string {\n    if (!this.version || !this.digest) {\n      return this.objectId;\n    }\n    return {\n      $kind: 'Object',\n      Object: {\n        $kind: 'ImmOrOwnedObject',\n        ImmOrOwnedObject: {\n          objectId: this.objectId,\n          version: this.version,\n          digest: this.digest,\n        },\n      },\n    };\n  }\n\n  /**\n   * Update object version & digest based on the transaction response.\n   * @param txResponse\n   */\n  updateFromTxResponse(txResponse: SuiTransactionBlockResponse) {\n    const changes = txResponse.objectChanges;\n    if (!changes) {\n      throw new Error('Bad transaction response!');\n    }\n    for (const change of changes) {\n      if (change.type === 'mutated' && change.objectId === this.objectId) {\n        this.digest = change.digest;\n        this.version = change.version;\n        return;\n      }\n    }\n    throw new Error('Could not find object in transaction response!');\n  }\n}\n","import type { CallArg } from '@mysten/sui/transactions';\n\nexport class SuiSharedObject {\n  public readonly objectId: string;\n  public initialSharedVersion?: string;\n\n  constructor(param: {\n    objectId: string;\n    initialSharedVersion?: string;\n    mutable?: boolean;\n  }) {\n    this.objectId = param.objectId;\n    this.initialSharedVersion = param.initialSharedVersion;\n  }\n\n  asCallArg(mutable: boolean = false): CallArg | string {\n    if (!this.initialSharedVersion) {\n      return this.objectId;\n    }\n    return {\n      $kind: 'Object',\n      Object: {\n        $kind: 'SharedObject',\n        SharedObject: {\n          objectId: this.objectId,\n          initialSharedVersion: this.initialSharedVersion,\n          mutable,\n        },\n      },\n    };\n  }\n}\n","export const delay = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","import type { SuiMoveNormalizedModules } from '@mysten/sui/client';\nimport type { ContractFactoryParams, SuiMoveMoudleValueType } from './types';\nexport type ApiTypes = 'promise' | 'rxjs';\n\n// export interface ContractQuery {\n//   (origin: AccountId | string | Uint8Array, options: ContractOptions, ...params: unknown[]): SuiTransactionBlockResponse<ApiType, ContractCallOutcome>;\n// }\n\n// export type MapMessageQuery<ApiType extends ApiTypes> = Record<string, ContractQuery<ApiType>>;\n\n// // function createQuery <ApiType extends ApiTypes> (meta: AbiMessage, fn: (origin: string | AccountId | Uint8Array, options: ContractOptions, params: unknown[]) => ContractCallResult<ApiType, ContractCallOutcome>): ContractQuery<ApiType> {\n// //   return withMeta(meta, (origin: string | AccountId | Uint8Array, options: ContractOptions, ...params: unknown[]): ContractCallResult<ApiType, ContractCallOutcome> =>\n// //     fn(origin, options, params)\n// //   );\n// // }\n\n// export type MapMessageTx<ApiType extends ApiTypes> = Record<string, ContractTx<ApiType>>;\n\n// export interface ContractOptions {\n//   gasLimit?: bigint | string | number | BN | WeightV2;\n//   storageDepositLimit?: bigint | string | number | BN | null;\n//   value?: bigint | BN | string | number;\n// }\n\n// export interface ContractTx {\n//   (options: ContractOptions, ...params: unknown[]): SubmittableExtrinsic<ApiType>;\n// }\nexport class SuiContractFactory {\n  public packageId: string;\n  public metadata: SuiMoveNormalizedModules | undefined;\n  // readonly #query: MapMessageQuery<ApiTypes> = {};\n  // readonly #tx: MapMessageTx<ApiTypes> = {};\n  /**\n   * Support the following ways to init the SuiToolkit:\n   * 1. mnemonics\n   * 2. secretKey (base64 or hex)\n   * If none of them is provided, will generate a random mnemonics with 24 words.\n   *\n   * @param mnemonics, 12 or 24 mnemonics words, separated by space\n   * @param secretKey, base64 or hex string, when mnemonics is provided, secretKey will be ignored\n   */\n  constructor({ packageId, metadata }: ContractFactoryParams = {}) {\n    // If the mnemonics or secretKey is provided, use it\n    // Otherwise, generate a random mnemonics with 24 words\n    this.packageId = packageId || '';\n    this.metadata = metadata || undefined;\n  }\n\n  getFuncByModuleName(moduleName: string) {\n    Object.values(this.metadata as SuiMoveNormalizedModules).forEach(\n      (value) => {\n        const data = value as SuiMoveMoudleValueType;\n        console.log(`moudle name: ${data.name}`);\n        // console.log(data.exposedFunctions)\n        Object.entries(data.exposedFunctions).forEach(([key, value]) => {\n          console.log(`\\tfunc name: ${key}`);\n          Object.values(value.parameters).forEach((values) => {\n            // console.log(values)\n          });\n        });\n      }\n    );\n  }\n\n  getAllFunc() {\n    Object.values(this.metadata as SuiMoveNormalizedModules).forEach(\n      (value) => {\n        const data = value as SuiMoveMoudleValueType;\n        console.log(`moudle name: ${data.name}`);\n        // console.log(data.exposedFunctions)\n        Object.entries(data.exposedFunctions).forEach(([key, value]) => {\n          console.log(`\\tfunc name: ${key}`);\n          console.log(`\\t\\t${value.parameters.length}`);\n          Object.values(value.parameters).forEach((values) => {\n            // console.log(values)\n            console.log(`\\t\\targs: ${values}`);\n          });\n        });\n      }\n    );\n  }\n\n  getAllModule() {\n    Object.values(this.metadata as SuiMoveNormalizedModules).forEach(\n      (value, index) => {\n        const data = value as SuiMoveMoudleValueType;\n        console.log(`${index}. ${data.name}`);\n      }\n    );\n  }\n\n  //   async call(arguments: ({\n  //     kind: \"Input\";\n  //     index: number;\n  //     type?: \"object\" | \"pure\" | undefined;\n  //     value?: any;\n  // } | {\n  //     kind: \"GasCoin\";\n  // } | {\n  //     kind: \"Result\";\n  //     index: number;\n  // } | {\n  //     kind: \"NestedResult\";\n  //     index: number;\n  //     resultIndex: number;\n  // })[], derivePathParams?: DerivePathParams) {\n  //     const tx = new TransactionBlock();\n  //     tx.moveCall({\n  //       target: `${this.packageId}::${}::${}`,\n  //       arguments,\n  //     })\n  //     return ;\n  //   }\n}\n\n// function createTx <ApiType extends ApiTypes> (meta: AbiMessage, fn: (options: ContractOptions, params: unknown[]) => SubmittableExtrinsic<ApiType>): ContractTx<ApiType> {\n//   return withMeta(meta, (options: ContractOptions, ...params: unknown[]): SubmittableExtrinsic<ApiType> =>\n//     fn(options, params)\n//   );\n// }\n","export function capitalizeFirstLetter(input: string): string {\n  return input.charAt(0).toUpperCase() + input.slice(1);\n}\n\nexport function normalizeHexAddress(input: string): string | null {\n  const hexRegex = /^(0x)?[0-9a-fA-F]{64}$/;\n\n  if (hexRegex.test(input)) {\n    if (input.startsWith('0x')) {\n      return input;\n    } else {\n      return '0x' + input;\n    }\n  } else {\n    return null;\n  }\n}\n\nexport function numberToAddressHex(num: number): string {\n  const hex = num.toString(16);\n  const paddedHex = '0x' + hex.padStart(64, '0');\n  return paddedHex;\n}\n","export class ContractDataParsingError extends Error {\n  public readonly errorType: string;\n  public readonly functionName: string;\n  public readonly moduleAddress: string;\n  public readonly errorMessage: string;\n\n  constructor(dryResult: any) {\n    const error = dryResult?.effects?.status?.error || '';\n    const functionMatch = error\n      ? error.match(/function_name: Some\\(\"([^\"]+)\"\\)/)\n      : null;\n    const moduleMatch = error ? error.match(/address: ([a-fA-F0-9]+)/) : null;\n\n    const functionName = functionMatch ? functionMatch[1] : 'unknown';\n    const moduleAddress = moduleMatch ? '0x' + moduleMatch[1] : 'unknown';\n    const errorMessage = dryResult.error ? dryResult.error : 'UNKNOWN_ERROR';\n\n    const message = [\n      `\\n- Function: ${functionName}`,\n      `- Module Address: ${moduleAddress}`,\n      `- Error Message: ${errorMessage}`,\n    ].join('\\n');\n\n    super(message);\n\n    this.errorType = 'ContractDataParsingError';\n    this.functionName = functionName;\n    this.moduleAddress = moduleAddress;\n    this.errorMessage = errorMessage;\n  }\n}\n","import { MultiSigPublicKey } from '@mysten/sui/multisig';\nimport type { PublicKey } from '@mysten/sui/cryptography';\nimport { ed25519PublicKeyFromBase64 } from './publickey';\n\nexport type PublicKeyWeightPair = {\n  publicKey: PublicKey;\n  weight: number;\n};\n\nexport class MultiSigClient {\n  public readonly pksWeightPairs: PublicKeyWeightPair[];\n  public readonly threshold: number;\n  public readonly multiSigPublicKey: MultiSigPublicKey;\n  constructor(pks: PublicKeyWeightPair[], threshold: number) {\n    this.pksWeightPairs = pks;\n    this.threshold = threshold;\n    this.multiSigPublicKey = MultiSigPublicKey.fromPublicKeys({\n      threshold: this.threshold,\n      publicKeys: this.pksWeightPairs,\n    });\n  }\n\n  static fromRawEd25519PublicKeys(\n    rawPublicKeys: string[],\n    weights: number[],\n    threshold: number\n  ): MultiSigClient {\n    const pks = rawPublicKeys.map((rawPublicKey, i) => {\n      return {\n        publicKey: ed25519PublicKeyFromBase64(rawPublicKey),\n        weight: weights[i],\n      };\n    });\n    return new MultiSigClient(pks, threshold);\n  }\n\n  multiSigAddress(): string {\n    return this.multiSigPublicKey.toSuiAddress();\n  }\n\n  combinePartialSigs(sigs: string[]): string {\n    return this.multiSigPublicKey.combinePartialSignatures(sigs);\n  }\n}\n","import { PublicKey } from '@mysten/sui/cryptography';\nimport { Ed25519PublicKey } from '@mysten/sui/keypairs/ed25519';\nimport { fromB64 } from '@mysten/sui/utils';\n\nexport function ed25519PublicKeyFromBase64(rawPubkey: string): PublicKey {\n  let bytes = fromB64(rawPubkey);\n  // rawPubkeys should either be 32 bytes or 33 bytes (with the first byte being flag)\n  if (bytes.length !== 32 && bytes.length !== 33) throw 'invalid pubkey length';\n  bytes = bytes.length === 33 ? bytes.slice(1) : bytes;\n  return new Ed25519PublicKey(bytes);\n}\n","import { SuiMoveNormalizedModules } from '@mysten/sui/client';\nimport { getFullnodeUrl } from '@mysten/sui/client';\n\nimport { SuiInteractor } from '../libs/suiInteractor';\nimport { NetworkType } from '../types';\n\nexport async function loadMetadata(\n  networkType: NetworkType,\n  packageId: string,\n  fullnodeUrls?: string[]\n) {\n  // Init the rpc provider\n  fullnodeUrls = fullnodeUrls || [getFullnodeUrl(networkType)];\n  const suiInteractor = new SuiInteractor(fullnodeUrls);\n  if (packageId !== undefined) {\n    const jsonData = await suiInteractor.getNormalizedMoveModulesByPackage(\n      packageId\n    );\n\n    return jsonData as SuiMoveNormalizedModules;\n  } else {\n    console.error('please set your package id.');\n  }\n}\n"],"mappings":"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","names":["import_bcs","import_client","import_transactions","import_ed25519","genMnemonic","import_transactions","import_utils","import_utils","value","import_bcs","keccak256","import_ed25519","import_utils","import_client"]}