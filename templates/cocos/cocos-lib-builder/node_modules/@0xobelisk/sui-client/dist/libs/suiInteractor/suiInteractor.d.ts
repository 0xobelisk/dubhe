import { SuiClient } from '@mysten/sui/client';
import type { SuiTransactionBlockResponse, SuiObjectDataOptions, SuiObjectData } from '@mysten/sui/client';
import type * as RpcTypes from '@mysten/sui/dist/cjs/client/types/generated';
import { FaucetNetworkType, NetworkType } from '../../types';
import { SuiOwnedObject, SuiSharedObject } from '../suiModel';
/**
 * `SuiTransactionSender` is used to send transaction with a given gas coin.
 * It always uses the gas coin to pay for the gas,
 * and update the gas coin after the transaction.
 */
export declare class SuiInteractor {
    readonly clients: SuiClient[];
    currentClient: SuiClient;
    readonly fullNodes: string[];
    currentFullNode: string;
    network?: NetworkType;
    constructor(fullNodeUrls: string[], network?: NetworkType);
    switchToNextClient(): void;
    sendTx(transactionBlock: Uint8Array | string, signature: string | string[]): Promise<SuiTransactionBlockResponse>;
    getObjects(ids: string[], options?: SuiObjectDataOptions): Promise<SuiObjectData[]>;
    getObject(id: string): Promise<SuiObjectData>;
    getDynamicFieldObject(parentId: string, name: RpcTypes.DynamicFieldName): Promise<RpcTypes.SuiObjectResponse>;
    getDynamicFields(parentId: string, cursor?: string, limit?: number): Promise<import("@mysten/sui/client").DynamicFieldPage>;
    getTxDetails(digest: string): Promise<SuiTransactionBlockResponse>;
    getOwnedObjects(owner: string, cursor?: string, limit?: number): Promise<RpcTypes.PaginatedObjectsResponse>;
    getNormalizedMoveModulesByPackage(packageId: string): Promise<import("@mysten/sui/client").SuiMoveNormalizedModules>;
    /**
     * @description Update objects in a batch
     * @param suiObjects
     */
    updateObjects(suiObjects: (SuiOwnedObject | SuiSharedObject)[]): Promise<void>;
    /**
     * @description Select coins that add up to the given amount.
     * @param addr the address of the owner
     * @param amount the amount that is needed for the coin
     * @param coinType the coin type, default is '0x2::SUI::SUI'
     */
    selectCoins(addr: string, amount: number, coinType?: string): Promise<{
        objectId: string;
        digest: string;
        version: string;
        balance: string;
    }[]>;
    /**
     * @description Select owned objects with objectType.
     * @param addr the address of the owner
     * @param objectType the coin type, default is '0x2::SUI::SUI'
     */
    selectObjects(addr: string, objectType: string): Promise<SuiObjectData[]>;
    requestFaucet(address: string, network: FaucetNetworkType): Promise<void>;
}
