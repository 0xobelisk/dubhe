import { Provider, TxnBuilderTypes, AptosAccount, AptosClient, IndexerClient, Types, HexString } from 'aptos';
import { NetworkType } from 'src/types';
type RawTransaction = TxnBuilderTypes.RawTransaction;
/**
 * `SuiTransactionSender` is used to send transaction with a given gas coin.
 * It always uses the gas coin to pay for the gas,
 * and update the gas coin after the transaction.
 */
export declare class AptosInteractor {
    readonly providers: Provider[];
    currentProvider: Provider;
    currentClient: AptosClient;
    network?: NetworkType;
    indexerClient?: IndexerClient;
    constructor(fullNodeUrls: string[], network?: NetworkType);
    switchToNextProvider(): void;
    signTransaction(sender: AptosAccount, rawTxn: RawTransaction): Promise<Uint8Array | undefined>;
    submitTransaction(signedTxn: Uint8Array): Promise<{
        hash: string;
        sender: string;
        sequence_number: string;
        max_gas_amount: string;
        gas_unit_price: string;
        expiration_timestamp_secs: string;
        payload: Types.TransactionPayload;
        signature?: (({
            type: string;
        } & Types.Ed25519Signature) | ({
            type: string;
        } & Types.MultiEd25519Signature) | ({
            type: string;
        } & {
            sender: ({
                type: string;
            } & Types.Ed25519Signature) | ({
                type: string;
            } & Types.MultiEd25519Signature);
            secondary_signer_addresses: string[];
            secondary_signers: (({
                type: string;
            } & Types.Ed25519Signature) | ({
                type: string;
            } & Types.MultiEd25519Signature))[];
        }) | ({
            type: string;
        } & {
            sender: ({
                type: string;
            } & Types.Ed25519Signature) | ({
                type: string;
            } & Types.MultiEd25519Signature);
            secondary_signer_addresses: string[];
            secondary_signers: (({
                type: string;
            } & Types.Ed25519Signature) | ({
                type: string;
            } & Types.MultiEd25519Signature))[];
            fee_payer_address: string;
            fee_payer_signer: ({
                type: string;
            } & Types.Ed25519Signature) | ({
                type: string;
            } & Types.MultiEd25519Signature);
        })) | undefined;
    } | undefined>;
    waitForTransaction(txnHash: string): Promise<string | undefined>;
    sendTxWithPayload(signer: AptosAccount, sender: HexString, payload: Types.EntryFunctionPayload): Promise<Types.PendingTransaction>;
    signAndSubmitTransaction(sender: AptosAccount, rawTransaction: RawTransaction): Promise<any>;
    getAccountResources(accountAddress: string): Promise<{
        type: string;
        data: {};
    }[]>;
    getAccountResource(accountAddress: string, resourceType: Types.MoveStructTag, ledgerVersion?: number): Promise<{
        type: string;
        data: {};
    }>;
    getAccountModule(accountAddress: string, moduleName: string, ledgerVersion?: number): Promise<Types.MoveModuleBytecode>;
    getAccountModules(accountAddress: string): Promise<Types.MoveModuleBytecode[]>;
    view(contractAddress: string, moduleName: string, funcName: string, typeArguments?: Types.MoveType[], args?: any[]): Promise<Types.MoveValue[]>;
    requestFaucet(network: NetworkType, accountAddress: string, amount: number): Promise<boolean>;
}
export {};
