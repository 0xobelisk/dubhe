// @generated by protobuf-ts 2.11.1 with parameter force_server_none,optimize_code_size,ts_nocheck
// @generated from protobuf file "dubhe_grpc.proto" (package "dubhe_grpc", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { DubheGrpc } from './dubhe_grpc';
import type { TableChange } from './dubhe_grpc';
import type { SubscribeRequest } from './dubhe_grpc';
import type { ServerStreamingCall } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { QueryResponse } from './dubhe_grpc';
import type { QueryRequest } from './dubhe_grpc';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * GRPC service definition
 *
 * @generated from protobuf service dubhe_grpc.DubheGrpc
 */
export interface IDubheGrpcClient {
  /**
   * Query data from a specific table with filters, sorting, and pagination
   *
   * @generated from protobuf rpc: QueryTable
   */
  queryTable(input: QueryRequest, options?: RpcOptions): UnaryCall<QueryRequest, QueryResponse>;
  /**
   * Subscribe to table updates
   *
   * @generated from protobuf rpc: SubscribeTable
   */
  subscribeTable(
    input: SubscribeRequest,
    options?: RpcOptions
  ): ServerStreamingCall<SubscribeRequest, TableChange>;
}
/**
 * GRPC service definition
 *
 * @generated from protobuf service dubhe_grpc.DubheGrpc
 */
export class DubheGrpcClient implements IDubheGrpcClient, ServiceInfo {
  typeName = DubheGrpc.typeName;
  methods = DubheGrpc.methods;
  options = DubheGrpc.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * Query data from a specific table with filters, sorting, and pagination
   *
   * @generated from protobuf rpc: QueryTable
   */
  queryTable(input: QueryRequest, options?: RpcOptions): UnaryCall<QueryRequest, QueryResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<QueryRequest, QueryResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * Subscribe to table updates
   *
   * @generated from protobuf rpc: SubscribeTable
   */
  subscribeTable(
    input: SubscribeRequest,
    options?: RpcOptions
  ): ServerStreamingCall<SubscribeRequest, TableChange> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<SubscribeRequest, TableChange>(
      'serverStreaming',
      this._transport,
      method,
      opt,
      input
    );
  }
}
