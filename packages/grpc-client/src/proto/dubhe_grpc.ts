// @generated by protobuf-ts 2.11.1 with parameter server_none
// @generated from protobuf file "dubhe_grpc.proto" (package "dubhe_grpc", syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
import { Struct } from './google/protobuf/struct';
/**
 * Universal query request with comprehensive options
 *
 * @generated from protobuf message dubhe_grpc.QueryRequest
 */
export interface QueryRequest {
  /**
   * Required: table name to query
   *
   * @generated from protobuf field: string table_name = 1
   */
  tableName: string;
  /**
   * Optional: specific fields to select (empty means SELECT *)
   *
   * @generated from protobuf field: repeated string select_fields = 2
   */
  selectFields: string[];
  /**
   * Optional: filter conditions
   *
   * @generated from protobuf field: repeated dubhe_grpc.FilterCondition filters = 3
   */
  filters: FilterCondition[];
  /**
   * Optional: sorting specifications
   *
   * @generated from protobuf field: repeated dubhe_grpc.SortSpecification sorts = 4
   */
  sorts: SortSpecification[];
  /**
   * Optional: pagination parameters
   *
   * @generated from protobuf field: optional dubhe_grpc.PaginationRequest pagination = 5
   */
  pagination?: PaginationRequest;
  /**
   * Optional: whether to include total count for pagination
   *
   * @generated from protobuf field: bool include_total_count = 6
   */
  includeTotalCount: boolean;
}
/**
 * Filter condition for WHERE clauses
 *
 * @generated from protobuf message dubhe_grpc.FilterCondition
 */
export interface FilterCondition {
  /**
   * Field name to filter on
   *
   * @generated from protobuf field: string field_name = 1
   */
  fieldName: string;
  /**
   * Filter operator
   *
   * @generated from protobuf field: dubhe_grpc.FilterOperator operator = 2
   */
  operator: FilterOperator;
  /**
   * Filter value(s)
   *
   * @generated from protobuf field: dubhe_grpc.FilterValue value = 3
   */
  value?: FilterValue;
}
/**
 * Filter value that can be various types
 *
 * @generated from protobuf message dubhe_grpc.FilterValue
 */
export interface FilterValue {
  /**
   * @generated from protobuf oneof: value
   */
  value:
    | {
        oneofKind: 'stringValue';
        /**
         * @generated from protobuf field: string string_value = 1
         */
        stringValue: string;
      }
    | {
        oneofKind: 'intValue';
        /**
         * @generated from protobuf field: int64 int_value = 2
         */
        intValue: bigint;
      }
    | {
        oneofKind: 'floatValue';
        /**
         * @generated from protobuf field: double float_value = 3
         */
        floatValue: number;
      }
    | {
        oneofKind: 'boolValue';
        /**
         * @generated from protobuf field: bool bool_value = 4
         */
        boolValue: boolean;
      }
    | {
        oneofKind: 'stringList';
        /**
         * @generated from protobuf field: dubhe_grpc.StringList string_list = 5
         */
        stringList: StringList; // For IN/NOT_IN operations
      }
    | {
        oneofKind: 'intList';
        /**
         * @generated from protobuf field: dubhe_grpc.IntList int_list = 6
         */
        intList: IntList; // For IN/NOT_IN operations
      }
    | {
        oneofKind: 'range';
        /**
         * @generated from protobuf field: dubhe_grpc.ValueRange range = 7
         */
        range: ValueRange; // For BETWEEN operations
      }
    | {
        oneofKind: 'nullValue';
        /**
         * @generated from protobuf field: bool null_value = 8
         */
        nullValue: boolean; // For NULL checks
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * List of string values
 *
 * @generated from protobuf message dubhe_grpc.StringList
 */
export interface StringList {
  /**
   * @generated from protobuf field: repeated string values = 1
   */
  values: string[];
}
/**
 * List of integer values
 *
 * @generated from protobuf message dubhe_grpc.IntList
 */
export interface IntList {
  /**
   * @generated from protobuf field: repeated int64 values = 1
   */
  values: bigint[];
}
/**
 * Value range for BETWEEN operations
 *
 * @generated from protobuf message dubhe_grpc.ValueRange
 */
export interface ValueRange {
  /**
   * @generated from protobuf oneof: start
   */
  start:
    | {
        oneofKind: 'stringStart';
        /**
         * @generated from protobuf field: string string_start = 1
         */
        stringStart: string;
      }
    | {
        oneofKind: 'intStart';
        /**
         * @generated from protobuf field: int64 int_start = 2
         */
        intStart: bigint;
      }
    | {
        oneofKind: 'floatStart';
        /**
         * @generated from protobuf field: double float_start = 3
         */
        floatStart: number;
      }
    | {
        oneofKind: undefined;
      };
  /**
   * @generated from protobuf oneof: end
   */
  end:
    | {
        oneofKind: 'stringEnd';
        /**
         * @generated from protobuf field: string string_end = 4
         */
        stringEnd: string;
      }
    | {
        oneofKind: 'intEnd';
        /**
         * @generated from protobuf field: int64 int_end = 5
         */
        intEnd: bigint;
      }
    | {
        oneofKind: 'floatEnd';
        /**
         * @generated from protobuf field: double float_end = 6
         */
        floatEnd: number;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * Sort specification
 *
 * @generated from protobuf message dubhe_grpc.SortSpecification
 */
export interface SortSpecification {
  /**
   * Field name to sort by
   *
   * @generated from protobuf field: string field_name = 1
   */
  fieldName: string;
  /**
   * Sort direction
   *
   * @generated from protobuf field: dubhe_grpc.SortDirection direction = 2
   */
  direction: SortDirection;
  /**
   * Optional: sort priority (lower number = higher priority)
   *
   * @generated from protobuf field: optional int32 priority = 3
   */
  priority?: number;
}
/**
 * Pagination request
 *
 * @generated from protobuf message dubhe_grpc.PaginationRequest
 */
export interface PaginationRequest {
  /**
   * Page number (1-based)
   *
   * @generated from protobuf field: int32 page = 1
   */
  page: number;
  /**
   * Number of items per page
   *
   * @generated from protobuf field: int32 page_size = 2
   */
  pageSize: number;
  /**
   * Optional: offset-based pagination (alternative to page-based)
   *
   * @generated from protobuf field: optional int32 offset = 3
   */
  offset?: number;
}
/**
 * Query response
 *
 * @generated from protobuf message dubhe_grpc.QueryResponse
 */
export interface QueryResponse {
  /**
   * Query results
   *
   * @generated from protobuf field: repeated google.protobuf.Struct rows = 1
   */
  rows: Struct[];
  /**
   * Pagination info
   *
   * @generated from protobuf field: optional dubhe_grpc.PaginationResponse pagination = 2
   */
  pagination?: PaginationResponse;
}
/**
 * Pagination response
 *
 * @generated from protobuf message dubhe_grpc.PaginationResponse
 */
export interface PaginationResponse {
  /**
   * @generated from protobuf field: int32 current_page = 1
   */
  currentPage: number; // Current page number
  /**
   * @generated from protobuf field: int32 page_size = 2
   */
  pageSize: number; // Items per page
  /**
   * @generated from protobuf field: int64 total_items = 3
   */
  totalItems: bigint; // Total number of items
  /**
   * @generated from protobuf field: int32 total_pages = 4
   */
  totalPages: number; // Total number of pages
  /**
   * @generated from protobuf field: bool has_next_page = 5
   */
  hasNextPage: boolean; // Whether there's a next page
  /**
   * @generated from protobuf field: bool has_previous_page = 6
   */
  hasPreviousPage: boolean; // Whether there's a previous page
}
/**
 * Subscribe request
 *
 * @generated from protobuf message dubhe_grpc.SubscribeRequest
 */
export interface SubscribeRequest {
  /**
   * @generated from protobuf field: repeated string table_ids = 1
   */
  tableIds: string[]; // Multiple table IDs to subscribe to. Empty array means subscribe to all tables.
}
/**
 * Table update stream
 *
 * @generated from protobuf message dubhe_grpc.TableChange
 */
export interface TableChange {
  /**
   * @generated from protobuf field: string table_id = 1
   */
  tableId: string;
  /**
   * @generated from protobuf field: google.protobuf.Struct data = 2
   */
  data?: Struct;
}
/**
 * Filter operators
 *
 * @generated from protobuf enum dubhe_grpc.FilterOperator
 */
export enum FilterOperator {
  /**
   * =
   *
   * @generated from protobuf enum value: EQUALS = 0;
   */
  EQUALS = 0,
  /**
   * !=
   *
   * @generated from protobuf enum value: NOT_EQUALS = 1;
   */
  NOT_EQUALS = 1,
  /**
   * >
   *
   * @generated from protobuf enum value: GREATER_THAN = 2;
   */
  GREATER_THAN = 2,
  /**
   * >=
   *
   * @generated from protobuf enum value: GREATER_THAN_EQUAL = 3;
   */
  GREATER_THAN_EQUAL = 3,
  /**
   * <
   *
   * @generated from protobuf enum value: LESS_THAN = 4;
   */
  LESS_THAN = 4,
  /**
   * <=
   *
   * @generated from protobuf enum value: LESS_THAN_EQUAL = 5;
   */
  LESS_THAN_EQUAL = 5,
  /**
   * LIKE (pattern matching)
   *
   * @generated from protobuf enum value: LIKE = 6;
   */
  LIKE = 6,
  /**
   * NOT LIKE
   *
   * @generated from protobuf enum value: NOT_LIKE = 7;
   */
  NOT_LIKE = 7,
  /**
   * IN (value1, value2, ...)
   *
   * @generated from protobuf enum value: IN = 8;
   */
  IN = 8,
  /**
   * NOT IN (value1, value2, ...)
   *
   * @generated from protobuf enum value: NOT_IN = 9;
   */
  NOT_IN = 9,
  /**
   * IS NULL
   *
   * @generated from protobuf enum value: IS_NULL = 10;
   */
  IS_NULL = 10,
  /**
   * IS NOT NULL
   *
   * @generated from protobuf enum value: IS_NOT_NULL = 11;
   */
  IS_NOT_NULL = 11,
  /**
   * BETWEEN value1 AND value2
   *
   * @generated from protobuf enum value: BETWEEN = 12;
   */
  BETWEEN = 12,
  /**
   * NOT BETWEEN value1 AND value2
   *
   * @generated from protobuf enum value: NOT_BETWEEN = 13;
   */
  NOT_BETWEEN = 13
}
/**
 * Sort direction
 *
 * @generated from protobuf enum dubhe_grpc.SortDirection
 */
export enum SortDirection {
  /**
   * ASC
   *
   * @generated from protobuf enum value: ASCENDING = 0;
   */
  ASCENDING = 0,
  /**
   * DESC
   *
   * @generated from protobuf enum value: DESCENDING = 1;
   */
  DESCENDING = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryRequest$Type extends MessageType<QueryRequest> {
  constructor() {
    super('dubhe_grpc.QueryRequest', [
      { no: 1, name: 'table_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'select_fields',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: 'filters',
        kind: 'message',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => FilterCondition
      },
      {
        no: 4,
        name: 'sorts',
        kind: 'message',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => SortSpecification
      },
      { no: 5, name: 'pagination', kind: 'message', T: () => PaginationRequest },
      { no: 6, name: 'include_total_count', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ }
    ]);
  }
  create(value?: PartialMessage<QueryRequest>): QueryRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.tableName = '';
    message.selectFields = [];
    message.filters = [];
    message.sorts = [];
    message.includeTotalCount = false;
    if (value !== undefined) reflectionMergePartial<QueryRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: QueryRequest
  ): QueryRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string table_name */ 1:
          message.tableName = reader.string();
          break;
        case /* repeated string select_fields */ 2:
          message.selectFields.push(reader.string());
          break;
        case /* repeated dubhe_grpc.FilterCondition filters */ 3:
          message.filters.push(
            FilterCondition.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* repeated dubhe_grpc.SortSpecification sorts */ 4:
          message.sorts.push(
            SortSpecification.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* optional dubhe_grpc.PaginationRequest pagination */ 5:
          message.pagination = PaginationRequest.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.pagination
          );
          break;
        case /* bool include_total_count */ 6:
          message.includeTotalCount = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: QueryRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string table_name = 1; */
    if (message.tableName !== '') writer.tag(1, WireType.LengthDelimited).string(message.tableName);
    /* repeated string select_fields = 2; */
    for (let i = 0; i < message.selectFields.length; i++)
      writer.tag(2, WireType.LengthDelimited).string(message.selectFields[i]);
    /* repeated dubhe_grpc.FilterCondition filters = 3; */
    for (let i = 0; i < message.filters.length; i++)
      FilterCondition.internalBinaryWrite(
        message.filters[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* repeated dubhe_grpc.SortSpecification sorts = 4; */
    for (let i = 0; i < message.sorts.length; i++)
      SortSpecification.internalBinaryWrite(
        message.sorts[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* optional dubhe_grpc.PaginationRequest pagination = 5; */
    if (message.pagination)
      PaginationRequest.internalBinaryWrite(
        message.pagination,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* bool include_total_count = 6; */
    if (message.includeTotalCount !== false)
      writer.tag(6, WireType.Varint).bool(message.includeTotalCount);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.QueryRequest
 */
export const QueryRequest = new QueryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterCondition$Type extends MessageType<FilterCondition> {
  constructor() {
    super('dubhe_grpc.FilterCondition', [
      { no: 1, name: 'field_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'operator',
        kind: 'enum',
        T: () => ['dubhe_grpc.FilterOperator', FilterOperator]
      },
      { no: 3, name: 'value', kind: 'message', T: () => FilterValue }
    ]);
  }
  create(value?: PartialMessage<FilterCondition>): FilterCondition {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.fieldName = '';
    message.operator = 0;
    if (value !== undefined) reflectionMergePartial<FilterCondition>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: FilterCondition
  ): FilterCondition {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string field_name */ 1:
          message.fieldName = reader.string();
          break;
        case /* dubhe_grpc.FilterOperator operator */ 2:
          message.operator = reader.int32();
          break;
        case /* dubhe_grpc.FilterValue value */ 3:
          message.value = FilterValue.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.value
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: FilterCondition,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string field_name = 1; */
    if (message.fieldName !== '') writer.tag(1, WireType.LengthDelimited).string(message.fieldName);
    /* dubhe_grpc.FilterOperator operator = 2; */
    if (message.operator !== 0) writer.tag(2, WireType.Varint).int32(message.operator);
    /* dubhe_grpc.FilterValue value = 3; */
    if (message.value)
      FilterValue.internalBinaryWrite(
        message.value,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.FilterCondition
 */
export const FilterCondition = new FilterCondition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterValue$Type extends MessageType<FilterValue> {
  constructor() {
    super('dubhe_grpc.FilterValue', [
      { no: 1, name: 'string_value', kind: 'scalar', oneof: 'value', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'int_value',
        kind: 'scalar',
        oneof: 'value',
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/
      },
      { no: 3, name: 'float_value', kind: 'scalar', oneof: 'value', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 4, name: 'bool_value', kind: 'scalar', oneof: 'value', T: 8 /*ScalarType.BOOL*/ },
      { no: 5, name: 'string_list', kind: 'message', oneof: 'value', T: () => StringList },
      { no: 6, name: 'int_list', kind: 'message', oneof: 'value', T: () => IntList },
      { no: 7, name: 'range', kind: 'message', oneof: 'value', T: () => ValueRange },
      { no: 8, name: 'null_value', kind: 'scalar', oneof: 'value', T: 8 /*ScalarType.BOOL*/ }
    ]);
  }
  create(value?: PartialMessage<FilterValue>): FilterValue {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.value = { oneofKind: undefined };
    if (value !== undefined) reflectionMergePartial<FilterValue>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: FilterValue
  ): FilterValue {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string string_value */ 1:
          message.value = {
            oneofKind: 'stringValue',
            stringValue: reader.string()
          };
          break;
        case /* int64 int_value */ 2:
          message.value = {
            oneofKind: 'intValue',
            intValue: reader.int64().toBigInt()
          };
          break;
        case /* double float_value */ 3:
          message.value = {
            oneofKind: 'floatValue',
            floatValue: reader.double()
          };
          break;
        case /* bool bool_value */ 4:
          message.value = {
            oneofKind: 'boolValue',
            boolValue: reader.bool()
          };
          break;
        case /* dubhe_grpc.StringList string_list */ 5:
          message.value = {
            oneofKind: 'stringList',
            stringList: StringList.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.value as any).stringList
            )
          };
          break;
        case /* dubhe_grpc.IntList int_list */ 6:
          message.value = {
            oneofKind: 'intList',
            intList: IntList.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.value as any).intList
            )
          };
          break;
        case /* dubhe_grpc.ValueRange range */ 7:
          message.value = {
            oneofKind: 'range',
            range: ValueRange.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.value as any).range
            )
          };
          break;
        case /* bool null_value */ 8:
          message.value = {
            oneofKind: 'nullValue',
            nullValue: reader.bool()
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: FilterValue,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string string_value = 1; */
    if (message.value.oneofKind === 'stringValue')
      writer.tag(1, WireType.LengthDelimited).string(message.value.stringValue);
    /* int64 int_value = 2; */
    if (message.value.oneofKind === 'intValue')
      writer.tag(2, WireType.Varint).int64(message.value.intValue);
    /* double float_value = 3; */
    if (message.value.oneofKind === 'floatValue')
      writer.tag(3, WireType.Bit64).double(message.value.floatValue);
    /* bool bool_value = 4; */
    if (message.value.oneofKind === 'boolValue')
      writer.tag(4, WireType.Varint).bool(message.value.boolValue);
    /* dubhe_grpc.StringList string_list = 5; */
    if (message.value.oneofKind === 'stringList')
      StringList.internalBinaryWrite(
        message.value.stringList,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* dubhe_grpc.IntList int_list = 6; */
    if (message.value.oneofKind === 'intList')
      IntList.internalBinaryWrite(
        message.value.intList,
        writer.tag(6, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* dubhe_grpc.ValueRange range = 7; */
    if (message.value.oneofKind === 'range')
      ValueRange.internalBinaryWrite(
        message.value.range,
        writer.tag(7, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* bool null_value = 8; */
    if (message.value.oneofKind === 'nullValue')
      writer.tag(8, WireType.Varint).bool(message.value.nullValue);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.FilterValue
 */
export const FilterValue = new FilterValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringList$Type extends MessageType<StringList> {
  constructor() {
    super('dubhe_grpc.StringList', [
      {
        no: 1,
        name: 'values',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/
      }
    ]);
  }
  create(value?: PartialMessage<StringList>): StringList {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.values = [];
    if (value !== undefined) reflectionMergePartial<StringList>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: StringList
  ): StringList {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated string values */ 1:
          message.values.push(reader.string());
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: StringList,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated string values = 1; */
    for (let i = 0; i < message.values.length; i++)
      writer.tag(1, WireType.LengthDelimited).string(message.values[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.StringList
 */
export const StringList = new StringList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntList$Type extends MessageType<IntList> {
  constructor() {
    super('dubhe_grpc.IntList', [
      {
        no: 1,
        name: 'values',
        kind: 'scalar',
        repeat: 1 /*RepeatType.PACKED*/,
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/
      }
    ]);
  }
  create(value?: PartialMessage<IntList>): IntList {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.values = [];
    if (value !== undefined) reflectionMergePartial<IntList>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: IntList
  ): IntList {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated int64 values */ 1:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.values.push(reader.int64().toBigInt());
          else message.values.push(reader.int64().toBigInt());
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: IntList,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated int64 values = 1; */
    if (message.values.length) {
      writer.tag(1, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.values.length; i++) writer.int64(message.values[i]);
      writer.join();
    }
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.IntList
 */
export const IntList = new IntList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValueRange$Type extends MessageType<ValueRange> {
  constructor() {
    super('dubhe_grpc.ValueRange', [
      { no: 1, name: 'string_start', kind: 'scalar', oneof: 'start', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'int_start',
        kind: 'scalar',
        oneof: 'start',
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/
      },
      { no: 3, name: 'float_start', kind: 'scalar', oneof: 'start', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 4, name: 'string_end', kind: 'scalar', oneof: 'end', T: 9 /*ScalarType.STRING*/ },
      {
        no: 5,
        name: 'int_end',
        kind: 'scalar',
        oneof: 'end',
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/
      },
      { no: 6, name: 'float_end', kind: 'scalar', oneof: 'end', T: 1 /*ScalarType.DOUBLE*/ }
    ]);
  }
  create(value?: PartialMessage<ValueRange>): ValueRange {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.start = { oneofKind: undefined };
    message.end = { oneofKind: undefined };
    if (value !== undefined) reflectionMergePartial<ValueRange>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ValueRange
  ): ValueRange {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string string_start */ 1:
          message.start = {
            oneofKind: 'stringStart',
            stringStart: reader.string()
          };
          break;
        case /* int64 int_start */ 2:
          message.start = {
            oneofKind: 'intStart',
            intStart: reader.int64().toBigInt()
          };
          break;
        case /* double float_start */ 3:
          message.start = {
            oneofKind: 'floatStart',
            floatStart: reader.double()
          };
          break;
        case /* string string_end */ 4:
          message.end = {
            oneofKind: 'stringEnd',
            stringEnd: reader.string()
          };
          break;
        case /* int64 int_end */ 5:
          message.end = {
            oneofKind: 'intEnd',
            intEnd: reader.int64().toBigInt()
          };
          break;
        case /* double float_end */ 6:
          message.end = {
            oneofKind: 'floatEnd',
            floatEnd: reader.double()
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ValueRange,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string string_start = 1; */
    if (message.start.oneofKind === 'stringStart')
      writer.tag(1, WireType.LengthDelimited).string(message.start.stringStart);
    /* int64 int_start = 2; */
    if (message.start.oneofKind === 'intStart')
      writer.tag(2, WireType.Varint).int64(message.start.intStart);
    /* double float_start = 3; */
    if (message.start.oneofKind === 'floatStart')
      writer.tag(3, WireType.Bit64).double(message.start.floatStart);
    /* string string_end = 4; */
    if (message.end.oneofKind === 'stringEnd')
      writer.tag(4, WireType.LengthDelimited).string(message.end.stringEnd);
    /* int64 int_end = 5; */
    if (message.end.oneofKind === 'intEnd')
      writer.tag(5, WireType.Varint).int64(message.end.intEnd);
    /* double float_end = 6; */
    if (message.end.oneofKind === 'floatEnd')
      writer.tag(6, WireType.Bit64).double(message.end.floatEnd);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.ValueRange
 */
export const ValueRange = new ValueRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SortSpecification$Type extends MessageType<SortSpecification> {
  constructor() {
    super('dubhe_grpc.SortSpecification', [
      { no: 1, name: 'field_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'direction',
        kind: 'enum',
        T: () => ['dubhe_grpc.SortDirection', SortDirection]
      },
      { no: 3, name: 'priority', kind: 'scalar', opt: true, T: 5 /*ScalarType.INT32*/ }
    ]);
  }
  create(value?: PartialMessage<SortSpecification>): SortSpecification {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.fieldName = '';
    message.direction = 0;
    if (value !== undefined) reflectionMergePartial<SortSpecification>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SortSpecification
  ): SortSpecification {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string field_name */ 1:
          message.fieldName = reader.string();
          break;
        case /* dubhe_grpc.SortDirection direction */ 2:
          message.direction = reader.int32();
          break;
        case /* optional int32 priority */ 3:
          message.priority = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SortSpecification,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string field_name = 1; */
    if (message.fieldName !== '') writer.tag(1, WireType.LengthDelimited).string(message.fieldName);
    /* dubhe_grpc.SortDirection direction = 2; */
    if (message.direction !== 0) writer.tag(2, WireType.Varint).int32(message.direction);
    /* optional int32 priority = 3; */
    if (message.priority !== undefined) writer.tag(3, WireType.Varint).int32(message.priority);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.SortSpecification
 */
export const SortSpecification = new SortSpecification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaginationRequest$Type extends MessageType<PaginationRequest> {
  constructor() {
    super('dubhe_grpc.PaginationRequest', [
      { no: 1, name: 'page', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 2, name: 'page_size', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 3, name: 'offset', kind: 'scalar', opt: true, T: 5 /*ScalarType.INT32*/ }
    ]);
  }
  create(value?: PartialMessage<PaginationRequest>): PaginationRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.page = 0;
    message.pageSize = 0;
    if (value !== undefined) reflectionMergePartial<PaginationRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PaginationRequest
  ): PaginationRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 page */ 1:
          message.page = reader.int32();
          break;
        case /* int32 page_size */ 2:
          message.pageSize = reader.int32();
          break;
        case /* optional int32 offset */ 3:
          message.offset = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PaginationRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int32 page = 1; */
    if (message.page !== 0) writer.tag(1, WireType.Varint).int32(message.page);
    /* int32 page_size = 2; */
    if (message.pageSize !== 0) writer.tag(2, WireType.Varint).int32(message.pageSize);
    /* optional int32 offset = 3; */
    if (message.offset !== undefined) writer.tag(3, WireType.Varint).int32(message.offset);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.PaginationRequest
 */
export const PaginationRequest = new PaginationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryResponse$Type extends MessageType<QueryResponse> {
  constructor() {
    super('dubhe_grpc.QueryResponse', [
      { no: 1, name: 'rows', kind: 'message', repeat: 2 /*RepeatType.UNPACKED*/, T: () => Struct },
      { no: 2, name: 'pagination', kind: 'message', T: () => PaginationResponse }
    ]);
  }
  create(value?: PartialMessage<QueryResponse>): QueryResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.rows = [];
    if (value !== undefined) reflectionMergePartial<QueryResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: QueryResponse
  ): QueryResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated google.protobuf.Struct rows */ 1:
          message.rows.push(Struct.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* optional dubhe_grpc.PaginationResponse pagination */ 2:
          message.pagination = PaginationResponse.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.pagination
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: QueryResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated google.protobuf.Struct rows = 1; */
    for (let i = 0; i < message.rows.length; i++)
      Struct.internalBinaryWrite(
        message.rows[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* optional dubhe_grpc.PaginationResponse pagination = 2; */
    if (message.pagination)
      PaginationResponse.internalBinaryWrite(
        message.pagination,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.QueryResponse
 */
export const QueryResponse = new QueryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaginationResponse$Type extends MessageType<PaginationResponse> {
  constructor() {
    super('dubhe_grpc.PaginationResponse', [
      { no: 1, name: 'current_page', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 2, name: 'page_size', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      {
        no: 3,
        name: 'total_items',
        kind: 'scalar',
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/
      },
      { no: 4, name: 'total_pages', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 5, name: 'has_next_page', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 6, name: 'has_previous_page', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ }
    ]);
  }
  create(value?: PartialMessage<PaginationResponse>): PaginationResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.currentPage = 0;
    message.pageSize = 0;
    message.totalItems = 0n;
    message.totalPages = 0;
    message.hasNextPage = false;
    message.hasPreviousPage = false;
    if (value !== undefined) reflectionMergePartial<PaginationResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PaginationResponse
  ): PaginationResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 current_page */ 1:
          message.currentPage = reader.int32();
          break;
        case /* int32 page_size */ 2:
          message.pageSize = reader.int32();
          break;
        case /* int64 total_items */ 3:
          message.totalItems = reader.int64().toBigInt();
          break;
        case /* int32 total_pages */ 4:
          message.totalPages = reader.int32();
          break;
        case /* bool has_next_page */ 5:
          message.hasNextPage = reader.bool();
          break;
        case /* bool has_previous_page */ 6:
          message.hasPreviousPage = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PaginationResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int32 current_page = 1; */
    if (message.currentPage !== 0) writer.tag(1, WireType.Varint).int32(message.currentPage);
    /* int32 page_size = 2; */
    if (message.pageSize !== 0) writer.tag(2, WireType.Varint).int32(message.pageSize);
    /* int64 total_items = 3; */
    if (message.totalItems !== 0n) writer.tag(3, WireType.Varint).int64(message.totalItems);
    /* int32 total_pages = 4; */
    if (message.totalPages !== 0) writer.tag(4, WireType.Varint).int32(message.totalPages);
    /* bool has_next_page = 5; */
    if (message.hasNextPage !== false) writer.tag(5, WireType.Varint).bool(message.hasNextPage);
    /* bool has_previous_page = 6; */
    if (message.hasPreviousPage !== false)
      writer.tag(6, WireType.Varint).bool(message.hasPreviousPage);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.PaginationResponse
 */
export const PaginationResponse = new PaginationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeRequest$Type extends MessageType<SubscribeRequest> {
  constructor() {
    super('dubhe_grpc.SubscribeRequest', [
      {
        no: 1,
        name: 'table_ids',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/
      }
    ]);
  }
  create(value?: PartialMessage<SubscribeRequest>): SubscribeRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.tableIds = [];
    if (value !== undefined) reflectionMergePartial<SubscribeRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SubscribeRequest
  ): SubscribeRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated string table_ids */ 1:
          message.tableIds.push(reader.string());
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SubscribeRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated string table_ids = 1; */
    for (let i = 0; i < message.tableIds.length; i++)
      writer.tag(1, WireType.LengthDelimited).string(message.tableIds[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.SubscribeRequest
 */
export const SubscribeRequest = new SubscribeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TableChange$Type extends MessageType<TableChange> {
  constructor() {
    super('dubhe_grpc.TableChange', [
      { no: 1, name: 'table_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'data', kind: 'message', T: () => Struct }
    ]);
  }
  create(value?: PartialMessage<TableChange>): TableChange {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.tableId = '';
    if (value !== undefined) reflectionMergePartial<TableChange>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: TableChange
  ): TableChange {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string table_id */ 1:
          message.tableId = reader.string();
          break;
        case /* google.protobuf.Struct data */ 2:
          message.data = Struct.internalBinaryRead(reader, reader.uint32(), options, message.data);
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: TableChange,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string table_id = 1; */
    if (message.tableId !== '') writer.tag(1, WireType.LengthDelimited).string(message.tableId);
    /* google.protobuf.Struct data = 2; */
    if (message.data)
      Struct.internalBinaryWrite(
        message.data,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dubhe_grpc.TableChange
 */
export const TableChange = new TableChange$Type();
/**
 * @generated ServiceType for protobuf service dubhe_grpc.DubheGrpc
 */
export const DubheGrpc = new ServiceType('dubhe_grpc.DubheGrpc', [
  { name: 'QueryTable', options: {}, I: QueryRequest, O: QueryResponse },
  {
    name: 'SubscribeTable',
    serverStreaming: true,
    options: {},
    I: SubscribeRequest,
    O: TableChange
  }
]);
