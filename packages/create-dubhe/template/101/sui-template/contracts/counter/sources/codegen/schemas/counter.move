  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: MIT
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module counter::counter_schema {

  use std::ascii::String;

  use std::type_name;

  use dubhe::dapps_system;

  use dubhe::dapps_schema::Dapps;

  use dubhe::storage_value::{Self, StorageValue};

  use dubhe::storage_map::{Self, StorageMap};

  use dubhe::storage_double_map::{Self, StorageDoubleMap};

  use counter::dapp_key::DappKey;

  public struct Counter has key, store {
    id: UID,
    value: StorageValue<u32>,
  }

  public fun borrow_value(self: &Counter): &StorageValue<u32> {
    &self.value
  }

  public(package) fun borrow_mut_value(self: &mut Counter): &mut StorageValue<u32> {
    &mut self.value
  }

  public fun register(dapps: &mut Dapps, ctx: &mut TxContext): Counter {
    let package_id = dapps_system::current_package_id<DappKey>();
    assert!(dapps.borrow_metadata().contains_key(package_id), 0);
    assert!(dapps.borrow_admin().get(package_id) == ctx.sender(), 0);
    let schema = type_name::get<Counter>().into_string();
    assert!(!dapps.borrow_schemas().get(package_id).contains(&schema), 0);
    dapps_system::add_schema<Counter>(dapps, package_id, ctx);
    Counter {
                          id: object::new(ctx),
                          value: storage_value::new(),
                        }
  }
}
