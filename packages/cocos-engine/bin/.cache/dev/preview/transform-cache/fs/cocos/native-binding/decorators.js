System.register("q-bundled:///fs/cocos/native-binding/decorators.js", ["../core/data/decorators/index.js", "../core/index.js"], function (_export, _context) {
  "use strict";

  var $$, $, defaultExec;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /* This file is generated by script, do not modify it manually. */ /* eslint-disable @typescript-eslint/no-unsafe-return */ /* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */ /* eslint-disable brace-style */ /* eslint-disable @typescript-eslint/indent */ /* eslint-disable max-len */ /* eslint-disable arrow-body-style */ /* eslint-disable comma-dangle */ /* eslint-disable func-names */ /* eslint-disable space-before-function-paren */
  function patch_BloomStage(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx = _extends({}, ctx),
      BloomStage = _ctx.BloomStage,
      Material = _ctx.Material;
    apply(function () {
      $.displayOrder(3)(BloomStage.prototype, '_bloomMaterial', function () {
        return null;
      });
    }, 'displayOrder', '_bloomMaterial');
    apply(function () {
      $.serializable(BloomStage.prototype, '_bloomMaterial', function () {
        return null;
      });
    }, 'serializable', '_bloomMaterial');
    apply(function () {
      $.type(Material)(BloomStage.prototype, '_bloomMaterial', function () {
        return null;
      });
    }, 'type', '_bloomMaterial');
    apply(function () {
      $.ccclass('BloomStage')(BloomStage);
    }, 'ccclass', null);
  } // end of patch_BloomStage

  //---- class cc_AmbientInfo

  function patch_cc_AmbientInfo(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx2 = _extends({}, ctx),
      AmbientInfo = _ctx2.AmbientInfo,
      legacyCC = _ctx2.legacyCC,
      CCFloat = _ctx2.CCFloat,
      Vec4 = _ctx2.Vec4,
      Ambient = _ctx2.Ambient;
    var skyLightingColorDescriptor = Object.getOwnPropertyDescriptor(AmbientInfo.prototype, 'skyLightingColor');
    var skyIllumDescriptor = Object.getOwnPropertyDescriptor(AmbientInfo.prototype, 'skyIllum');
    var groundLightingColorDescriptor = Object.getOwnPropertyDescriptor(AmbientInfo.prototype, 'groundLightingColor');
    apply(function () {
      $.tooltip('i18n:ambient.skyLightingColor')(AmbientInfo.prototype, 'skyLightingColor', skyLightingColorDescriptor);
    }, 'tooltip', 'skyLightingColor');
    apply(function () {
      $.editable(AmbientInfo.prototype, 'skyLightingColor', skyLightingColorDescriptor);
    }, 'editable', 'skyLightingColor');
    apply(function () {
      $.visible(function () {
        var scene = legacyCC.director.getScene();
        var skybox = scene.globals.skybox;
        if (skybox.useIBL && skybox.applyDiffuseMap) {
          return false;
        } else {
          return true;
        }
      })(AmbientInfo.prototype, 'skyLightingColor', skyLightingColorDescriptor);
    }, 'visible', 'skyLightingColor');
    apply(function () {
      $.range([0, Number.POSITIVE_INFINITY, 100])(AmbientInfo.prototype, 'skyIllum', skyIllumDescriptor);
    }, 'range', 'skyIllum');
    apply(function () {
      $.tooltip('i18n:ambient.skyIllum')(AmbientInfo.prototype, 'skyIllum', skyIllumDescriptor);
    }, 'tooltip', 'skyIllum');
    apply(function () {
      $.type(CCFloat)(AmbientInfo.prototype, 'skyIllum', skyIllumDescriptor);
    }, 'type', 'skyIllum');
    apply(function () {
      $.editable(AmbientInfo.prototype, 'skyIllum', skyIllumDescriptor);
    }, 'editable', 'skyIllum');
    apply(function () {
      $.tooltip('i18n:ambient.groundLightingColor')(AmbientInfo.prototype, 'groundLightingColor', groundLightingColorDescriptor);
    }, 'tooltip', 'groundLightingColor');
    apply(function () {
      $.editable(AmbientInfo.prototype, 'groundLightingColor', groundLightingColorDescriptor);
    }, 'editable', 'groundLightingColor');
    apply(function () {
      $.visible(function () {
        var scene = legacyCC.director.getScene();
        var skybox = scene.globals.skybox;
        if (skybox.useIBL && skybox.applyDiffuseMap) {
          return false;
        } else {
          return true;
        }
      })(AmbientInfo.prototype, 'groundLightingColor', groundLightingColorDescriptor);
    }, 'visible', 'groundLightingColor');
    apply(function () {
      $.formerlySerializedAs('_skyColor')(AmbientInfo.prototype, '_skyColorHDR', function () {
        return new Vec4(0.2, 0.5, 0.8, 1.0);
      });
    }, 'formerlySerializedAs', '_skyColorHDR');
    apply(function () {
      $.serializable(AmbientInfo.prototype, '_skyColorHDR', function () {
        return new Vec4(0.2, 0.5, 0.8, 1.0);
      });
    }, 'serializable', '_skyColorHDR');
    apply(function () {
      $.formerlySerializedAs('_skyIllum')(AmbientInfo.prototype, '_skyIllumHDR', function () {
        return Ambient.SKY_ILLUM;
      });
    }, 'formerlySerializedAs', '_skyIllumHDR');
    apply(function () {
      $.serializable(AmbientInfo.prototype, '_skyIllumHDR', function () {
        return Ambient.SKY_ILLUM;
      });
    }, 'serializable', '_skyIllumHDR');
    apply(function () {
      $.formerlySerializedAs('_groundAlbedo')(AmbientInfo.prototype, '_groundAlbedoHDR', function () {
        return new Vec4(0.2, 0.2, 0.2, 1.0);
      });
    }, 'formerlySerializedAs', '_groundAlbedoHDR');
    apply(function () {
      $.serializable(AmbientInfo.prototype, '_groundAlbedoHDR', function () {
        return new Vec4(0.2, 0.2, 0.2, 1.0);
      });
    }, 'serializable', '_groundAlbedoHDR');
    apply(function () {
      $.serializable(AmbientInfo.prototype, '_skyColorLDR', function () {
        return new Vec4(0.2, 0.5, 0.8, 1.0);
      });
    }, 'serializable', '_skyColorLDR');
    apply(function () {
      $.serializable(AmbientInfo.prototype, '_skyIllumLDR', function () {
        return Ambient.SKY_ILLUM;
      });
    }, 'serializable', '_skyIllumLDR');
    apply(function () {
      $.serializable(AmbientInfo.prototype, '_groundAlbedoLDR', function () {
        return new Vec4(0.2, 0.2, 0.2, 1.0);
      });
    }, 'serializable', '_groundAlbedoLDR');
    apply(function () {
      $.ccclass('cc.AmbientInfo')(AmbientInfo);
    }, 'ccclass', null);
  } // end of patch_cc_AmbientInfo

  //---- class cc_Asset

  function patch_cc_Asset(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx3 = _extends({}, ctx),
      Asset = _ctx3.Asset;
    var _nativeAssetDescriptor = Object.getOwnPropertyDescriptor(Asset.prototype, '_nativeAsset');
    apply(function () {
      $.serializable(Asset.prototype, '_native', function () {
        return '';
      });
    }, 'serializable', '_native');
    apply(function () {
      $.property(Asset.prototype, '_nativeAsset', _nativeAssetDescriptor);
    }, 'property', '_nativeAsset');
    apply(function () {
      $.ccclass('cc.Asset')(Asset);
    }, 'ccclass', null);
  } // end of patch_cc_Asset

  //---- class cc_BufferAsset

  function patch_cc_BufferAsset(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx4 = _extends({}, ctx),
      BufferAsset = _ctx4.BufferAsset;
    var _nativeAssetDescriptor = Object.getOwnPropertyDescriptor(BufferAsset.prototype, '_nativeAsset');
    apply(function () {
      $.override(BufferAsset.prototype, '_nativeAsset', _nativeAssetDescriptor);
    }, 'override', '_nativeAsset');
    apply(function () {
      $.ccclass('cc.BufferAsset')(BufferAsset);
    }, 'ccclass', null);
  } // end of patch_cc_BufferAsset

  //---- class cc_CircumSphere

  function patch_cc_CircumSphere(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx5 = _extends({}, ctx),
      CircumSphere = _ctx5.CircumSphere,
      Vec3 = _ctx5.Vec3;
    apply(function () {
      $.serializable(CircumSphere.prototype, 'center', function () {
        return new Vec3(0, 0, 0);
      });
    }, 'serializable', 'center');
    apply(function () {
      $.serializable(CircumSphere.prototype, 'radiusSquared', function () {
        return 0.0;
      });
    }, 'serializable', 'radiusSquared');
    apply(function () {
      $.ccclass('cc.CircumSphere')(CircumSphere);
    }, 'ccclass', null);
  } // end of patch_cc_CircumSphere

  //---- class cc_DirectionalLight

  function patch_cc_DirectionalLight(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx6 = _extends({}, ctx),
      DirectionalLight = _ctx6.DirectionalLight,
      Camera = _ctx6.Camera,
      PCFType = _ctx6.PCFType,
      CSMLevel = _ctx6.CSMLevel,
      CSMOptimizationMode = _ctx6.CSMOptimizationMode,
      CCInteger = _ctx6.CCInteger,
      cclegacy = _ctx6.cclegacy,
      ShadowType = _ctx6.ShadowType,
      CCBoolean = _ctx6.CCBoolean,
      CCFloat = _ctx6.CCFloat;
    var illuminanceDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'illuminance');
    var shadowEnabledDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowEnabled');
    var shadowPcfDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowPcf');
    var shadowBiasDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowBias');
    var shadowNormalBiasDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowNormalBias');
    var shadowSaturationDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowSaturation');
    var shadowDistanceDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowDistance');
    var shadowInvisibleOcclusionRangeDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowInvisibleOcclusionRange');
    var csmLevelDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'csmLevel');
    var enableCSMDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'enableCSM');
    var csmLayerLambdaDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'csmLayerLambda');
    var csmOptimizationModeDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'csmOptimizationMode');
    var shadowFixedAreaDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowFixedArea');
    var shadowNearDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowNear');
    var shadowFarDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowFar');
    var shadowOrthoSizeDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'shadowOrthoSize');
    var csmAdvancedOptionsDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'csmAdvancedOptions');
    var csmLayersTransitionDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'csmLayersTransition');
    var csmTransitionRangeDescriptor = Object.getOwnPropertyDescriptor(DirectionalLight.prototype, 'csmTransitionRange');
    apply(function () {
      $.formerlySerializedAs('_illuminance')(DirectionalLight.prototype, '_illuminanceHDR', function () {
        return 65000;
      });
    }, 'formerlySerializedAs', '_illuminanceHDR');
    apply(function () {
      $.property(DirectionalLight.prototype, '_illuminanceHDR', function () {
        return 65000;
      });
    }, 'property', '_illuminanceHDR');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_illuminanceLDR', function () {
        return 65000 * Camera.standardExposureValue;
      });
    }, 'serializable', '_illuminanceLDR');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowEnabled', function () {
        return false;
      });
    }, 'serializable', '_shadowEnabled');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowPcf', function () {
        return PCFType.HARD;
      });
    }, 'serializable', '_shadowPcf');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowBias', function () {
        return 0.00001;
      });
    }, 'serializable', '_shadowBias');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowNormalBias', function () {
        return 0.0;
      });
    }, 'serializable', '_shadowNormalBias');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowSaturation', function () {
        return 1.0;
      });
    }, 'serializable', '_shadowSaturation');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowDistance', function () {
        return 50;
      });
    }, 'serializable', '_shadowDistance');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowInvisibleOcclusionRange', function () {
        return 200;
      });
    }, 'serializable', '_shadowInvisibleOcclusionRange');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_csmLevel', function () {
        return CSMLevel.LEVEL_4;
      });
    }, 'serializable', '_csmLevel');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_csmLayerLambda', function () {
        return 0.75;
      });
    }, 'serializable', '_csmLayerLambda');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_csmOptimizationMode', function () {
        return CSMOptimizationMode.RemoveDuplicates;
      });
    }, 'serializable', '_csmOptimizationMode');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_csmAdvancedOptions', function () {
        return false;
      });
    }, 'serializable', '_csmAdvancedOptions');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_csmLayersTransition', function () {
        return false;
      });
    }, 'serializable', '_csmLayersTransition');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_csmTransitionRange', function () {
        return 0.05;
      });
    }, 'serializable', '_csmTransitionRange');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowFixedArea', function () {
        return false;
      });
    }, 'serializable', '_shadowFixedArea');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowNear', function () {
        return 0.1;
      });
    }, 'serializable', '_shadowNear');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowFar', function () {
        return 10.0;
      });
    }, 'serializable', '_shadowFar');
    apply(function () {
      $.serializable(DirectionalLight.prototype, '_shadowOrthoSize', function () {
        return 5;
      });
    }, 'serializable', '_shadowOrthoSize');
    apply(function () {
      $.type(CCInteger)(DirectionalLight.prototype, 'illuminance', illuminanceDescriptor);
    }, 'type', 'illuminance');
    apply(function () {
      $.range([0, Number.POSITIVE_INFINITY, 10])(DirectionalLight.prototype, 'illuminance', illuminanceDescriptor);
    }, 'range', 'illuminance');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'illuminance', illuminanceDescriptor);
    }, 'editable', 'illuminance');
    apply(function () {
      $.tooltip('i18n:lights.illuminance')(DirectionalLight.prototype, 'illuminance', illuminanceDescriptor);
    }, 'tooltip', 'illuminance');
    apply(function () {
      $.type(CCBoolean)(DirectionalLight.prototype, 'shadowEnabled', shadowEnabledDescriptor);
    }, 'type', 'shadowEnabled');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'shadowEnabled', shadowEnabledDescriptor);
    }, 'editable', 'shadowEnabled');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 1
        }
      })(DirectionalLight.prototype, 'shadowEnabled', shadowEnabledDescriptor);
    }, 'property', 'shadowEnabled');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap;
      })(DirectionalLight.prototype, 'shadowEnabled', shadowEnabledDescriptor);
    }, 'visible', 'shadowEnabled');
    apply(function () {
      $.tooltip('i18n:lights.shadowEnabled')(DirectionalLight.prototype, 'shadowEnabled', shadowEnabledDescriptor);
    }, 'tooltip', 'shadowEnabled');
    apply(function () {
      $.type(PCFType)(DirectionalLight.prototype, 'shadowPcf', shadowPcfDescriptor);
    }, 'type', 'shadowPcf');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'shadowPcf', shadowPcfDescriptor);
    }, 'editable', 'shadowPcf');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 5
        }
      })(DirectionalLight.prototype, 'shadowPcf', shadowPcfDescriptor);
    }, 'property', 'shadowPcf');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap;
      })(DirectionalLight.prototype, 'shadowPcf', shadowPcfDescriptor);
    }, 'visible', 'shadowPcf');
    apply(function () {
      $.tooltip('i18n:lights.shadowPcf')(DirectionalLight.prototype, 'shadowPcf', shadowPcfDescriptor);
    }, 'tooltip', 'shadowPcf');
    apply(function () {
      $.type(CCFloat)(DirectionalLight.prototype, 'shadowBias', shadowBiasDescriptor);
    }, 'type', 'shadowBias');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'shadowBias', shadowBiasDescriptor);
    }, 'editable', 'shadowBias');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 6
        }
      })(DirectionalLight.prototype, 'shadowBias', shadowBiasDescriptor);
    }, 'property', 'shadowBias');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap;
      })(DirectionalLight.prototype, 'shadowBias', shadowBiasDescriptor);
    }, 'visible', 'shadowBias');
    apply(function () {
      $.tooltip('i18n:lights.shadowBias')(DirectionalLight.prototype, 'shadowBias', shadowBiasDescriptor);
    }, 'tooltip', 'shadowBias');
    apply(function () {
      $.type(CCFloat)(DirectionalLight.prototype, 'shadowNormalBias', shadowNormalBiasDescriptor);
    }, 'type', 'shadowNormalBias');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'shadowNormalBias', shadowNormalBiasDescriptor);
    }, 'editable', 'shadowNormalBias');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 7
        }
      })(DirectionalLight.prototype, 'shadowNormalBias', shadowNormalBiasDescriptor);
    }, 'property', 'shadowNormalBias');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap;
      })(DirectionalLight.prototype, 'shadowNormalBias', shadowNormalBiasDescriptor);
    }, 'visible', 'shadowNormalBias');
    apply(function () {
      $.tooltip('i18n:lights.shadowNormalBias')(DirectionalLight.prototype, 'shadowNormalBias', shadowNormalBiasDescriptor);
    }, 'tooltip', 'shadowNormalBias');
    apply(function () {
      $.type(CCFloat)(DirectionalLight.prototype, 'shadowSaturation', shadowSaturationDescriptor);
    }, 'type', 'shadowSaturation');
    apply(function () {
      $.slide(DirectionalLight.prototype, 'shadowSaturation', shadowSaturationDescriptor);
    }, 'slide', 'shadowSaturation');
    apply(function () {
      $.range([0.0, 1.0, 0.01])(DirectionalLight.prototype, 'shadowSaturation', shadowSaturationDescriptor);
    }, 'range', 'shadowSaturation');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'shadowSaturation', shadowSaturationDescriptor);
    }, 'editable', 'shadowSaturation');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 8
        }
      })(DirectionalLight.prototype, 'shadowSaturation', shadowSaturationDescriptor);
    }, 'property', 'shadowSaturation');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap;
      })(DirectionalLight.prototype, 'shadowSaturation', shadowSaturationDescriptor);
    }, 'visible', 'shadowSaturation');
    apply(function () {
      $.tooltip('i18n:lights.shadowSaturation')(DirectionalLight.prototype, 'shadowSaturation', shadowSaturationDescriptor);
    }, 'tooltip', 'shadowSaturation');
    apply(function () {
      $.type(CCFloat)(DirectionalLight.prototype, 'shadowDistance', shadowDistanceDescriptor);
    }, 'type', 'shadowDistance');
    apply(function () {
      $.slide(DirectionalLight.prototype, 'shadowDistance', shadowDistanceDescriptor);
    }, 'slide', 'shadowDistance');
    apply(function () {
      $.range([0.0, 2000.0, 0.1])(DirectionalLight.prototype, 'shadowDistance', shadowDistanceDescriptor);
    }, 'range', 'shadowDistance');
    apply(function () {
      $.tooltip('shadow visible distance: shadow quality is inversely proportional of the magnitude of this value')(DirectionalLight.prototype, 'shadowDistance', shadowDistanceDescriptor);
    }, 'tooltip', 'shadowDistance');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'shadowDistance', shadowDistanceDescriptor);
    }, 'editable', 'shadowDistance');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 9
        }
      })(DirectionalLight.prototype, 'shadowDistance', shadowDistanceDescriptor);
    }, 'property', 'shadowDistance');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap && this._shadowFixedArea === false;
      })(DirectionalLight.prototype, 'shadowDistance', shadowDistanceDescriptor);
    }, 'visible', 'shadowDistance');
    apply(function () {
      $.tooltip('i18n:lights.shadowDistance')(DirectionalLight.prototype, 'shadowDistance', shadowDistanceDescriptor);
    }, 'tooltip', 'shadowDistance');
    apply(function () {
      $.type(CCFloat)(DirectionalLight.prototype, 'shadowInvisibleOcclusionRange', shadowInvisibleOcclusionRangeDescriptor);
    }, 'type', 'shadowInvisibleOcclusionRange');
    apply(function () {
      $.slide(DirectionalLight.prototype, 'shadowInvisibleOcclusionRange', shadowInvisibleOcclusionRangeDescriptor);
    }, 'slide', 'shadowInvisibleOcclusionRange');
    apply(function () {
      $.range([0.0, 2000.0, 1.0])(DirectionalLight.prototype, 'shadowInvisibleOcclusionRange', shadowInvisibleOcclusionRangeDescriptor);
    }, 'range', 'shadowInvisibleOcclusionRange');
    apply(function () {
      $.tooltip('if shadow has been culled, increase this value to fix it')(DirectionalLight.prototype, 'shadowInvisibleOcclusionRange', shadowInvisibleOcclusionRangeDescriptor);
    }, 'tooltip', 'shadowInvisibleOcclusionRange');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'shadowInvisibleOcclusionRange', shadowInvisibleOcclusionRangeDescriptor);
    }, 'editable', 'shadowInvisibleOcclusionRange');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 22
        }
      })(DirectionalLight.prototype, 'shadowInvisibleOcclusionRange', shadowInvisibleOcclusionRangeDescriptor);
    }, 'property', 'shadowInvisibleOcclusionRange');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap && this._shadowFixedArea === false && this._csmAdvancedOptions;
      })(DirectionalLight.prototype, 'shadowInvisibleOcclusionRange', shadowInvisibleOcclusionRangeDescriptor);
    }, 'visible', 'shadowInvisibleOcclusionRange');
    apply(function () {
      $.tooltip('i18n:lights.shadowInvisibleOcclusionRange')(DirectionalLight.prototype, 'shadowInvisibleOcclusionRange', shadowInvisibleOcclusionRangeDescriptor);
    }, 'tooltip', 'shadowInvisibleOcclusionRange');
    apply(function () {
      $.type(CSMLevel)(DirectionalLight.prototype, 'csmLevel', csmLevelDescriptor);
    }, 'type', 'csmLevel');
    apply(function () {
      $.tooltip('CSM Level')(DirectionalLight.prototype, 'csmLevel', csmLevelDescriptor);
    }, 'tooltip', 'csmLevel');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'csmLevel', csmLevelDescriptor);
    }, 'editable', 'csmLevel');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 10
        }
      })(DirectionalLight.prototype, 'csmLevel', csmLevelDescriptor);
    }, 'property', 'csmLevel');
    apply(function () {
      $.visible(false)(DirectionalLight.prototype, 'csmLevel', csmLevelDescriptor);
    }, 'visible', 'csmLevel');
    apply(function () {
      $.type(CCBoolean)(DirectionalLight.prototype, 'enableCSM', enableCSMDescriptor);
    }, 'type', 'enableCSM');
    apply(function () {
      $.tooltip('enable CSM')(DirectionalLight.prototype, 'enableCSM', enableCSMDescriptor);
    }, 'tooltip', 'enableCSM');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'enableCSM', enableCSMDescriptor);
    }, 'editable', 'enableCSM');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 11
        }
      })(DirectionalLight.prototype, 'enableCSM', enableCSMDescriptor);
    }, 'property', 'enableCSM');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap && this._shadowFixedArea === false;
      })(DirectionalLight.prototype, 'enableCSM', enableCSMDescriptor);
    }, 'visible', 'enableCSM');
    apply(function () {
      $.tooltip('i18n:lights.enableCSM')(DirectionalLight.prototype, 'enableCSM', enableCSMDescriptor);
    }, 'tooltip', 'enableCSM');
    apply(function () {
      $.type(CCFloat)(DirectionalLight.prototype, 'csmLayerLambda', csmLayerLambdaDescriptor);
    }, 'type', 'csmLayerLambda');
    apply(function () {
      $.slide(DirectionalLight.prototype, 'csmLayerLambda', csmLayerLambdaDescriptor);
    }, 'slide', 'csmLayerLambda');
    apply(function () {
      $.range([0.0, 1.0, 0.01])(DirectionalLight.prototype, 'csmLayerLambda', csmLayerLambdaDescriptor);
    }, 'range', 'csmLayerLambda');
    apply(function () {
      $.tooltip('CSM Level ratio')(DirectionalLight.prototype, 'csmLayerLambda', csmLayerLambdaDescriptor);
    }, 'tooltip', 'csmLayerLambda');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'csmLayerLambda', csmLayerLambdaDescriptor);
    }, 'editable', 'csmLayerLambda');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 12
        }
      })(DirectionalLight.prototype, 'csmLayerLambda', csmLayerLambdaDescriptor);
    }, 'property', 'csmLayerLambda');
    apply(function () {
      $.visible(false)(DirectionalLight.prototype, 'csmLayerLambda', csmLayerLambdaDescriptor);
    }, 'visible', 'csmLayerLambda');
    apply(function () {
      $.type(CSMOptimizationMode)(DirectionalLight.prototype, 'csmOptimizationMode', csmOptimizationModeDescriptor);
    }, 'type', 'csmOptimizationMode');
    apply(function () {
      $.tooltip('CSM Performance Optimization Mode')(DirectionalLight.prototype, 'csmOptimizationMode', csmOptimizationModeDescriptor);
    }, 'tooltip', 'csmOptimizationMode');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'csmOptimizationMode', csmOptimizationModeDescriptor);
    }, 'editable', 'csmOptimizationMode');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 13
        }
      })(DirectionalLight.prototype, 'csmOptimizationMode', csmOptimizationModeDescriptor);
    }, 'property', 'csmOptimizationMode');
    apply(function () {
      $.visible(false)(DirectionalLight.prototype, 'csmOptimizationMode', csmOptimizationModeDescriptor);
    }, 'visible', 'csmOptimizationMode');
    apply(function () {
      $.type(CCBoolean)(DirectionalLight.prototype, 'shadowFixedArea', shadowFixedAreaDescriptor);
    }, 'type', 'shadowFixedArea');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'shadowFixedArea', shadowFixedAreaDescriptor);
    }, 'editable', 'shadowFixedArea');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 14
        }
      })(DirectionalLight.prototype, 'shadowFixedArea', shadowFixedAreaDescriptor);
    }, 'property', 'shadowFixedArea');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap;
      })(DirectionalLight.prototype, 'shadowFixedArea', shadowFixedAreaDescriptor);
    }, 'visible', 'shadowFixedArea');
    apply(function () {
      $.tooltip('i18n:lights.shadowFixedArea')(DirectionalLight.prototype, 'shadowFixedArea', shadowFixedAreaDescriptor);
    }, 'tooltip', 'shadowFixedArea');
    apply(function () {
      $.type(CCFloat)(DirectionalLight.prototype, 'shadowNear', shadowNearDescriptor);
    }, 'type', 'shadowNear');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'shadowNear', shadowNearDescriptor);
    }, 'editable', 'shadowNear');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 15
        }
      })(DirectionalLight.prototype, 'shadowNear', shadowNearDescriptor);
    }, 'property', 'shadowNear');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap && this._shadowFixedArea === true;
      })(DirectionalLight.prototype, 'shadowNear', shadowNearDescriptor);
    }, 'visible', 'shadowNear');
    apply(function () {
      $.tooltip('i18n:lights.shadowNear')(DirectionalLight.prototype, 'shadowNear', shadowNearDescriptor);
    }, 'tooltip', 'shadowNear');
    apply(function () {
      $.type(CCFloat)(DirectionalLight.prototype, 'shadowFar', shadowFarDescriptor);
    }, 'type', 'shadowFar');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'shadowFar', shadowFarDescriptor);
    }, 'editable', 'shadowFar');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 16
        }
      })(DirectionalLight.prototype, 'shadowFar', shadowFarDescriptor);
    }, 'property', 'shadowFar');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap && this._shadowFixedArea === true;
      })(DirectionalLight.prototype, 'shadowFar', shadowFarDescriptor);
    }, 'visible', 'shadowFar');
    apply(function () {
      $.tooltip('i18n:lights.shadowFar')(DirectionalLight.prototype, 'shadowFar', shadowFarDescriptor);
    }, 'tooltip', 'shadowFar');
    apply(function () {
      $.type(CCFloat)(DirectionalLight.prototype, 'shadowOrthoSize', shadowOrthoSizeDescriptor);
    }, 'type', 'shadowOrthoSize');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 17
        }
      })(DirectionalLight.prototype, 'shadowOrthoSize', shadowOrthoSizeDescriptor);
    }, 'property', 'shadowOrthoSize');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap && this._shadowFixedArea === true;
      })(DirectionalLight.prototype, 'shadowOrthoSize', shadowOrthoSizeDescriptor);
    }, 'visible', 'shadowOrthoSize');
    apply(function () {
      $.tooltip('i18n:lights.shadowOrthoSize')(DirectionalLight.prototype, 'shadowOrthoSize', shadowOrthoSizeDescriptor);
    }, 'tooltip', 'shadowOrthoSize');
    apply(function () {
      $.type(CCBoolean)(DirectionalLight.prototype, 'csmAdvancedOptions', csmAdvancedOptionsDescriptor);
    }, 'type', 'csmAdvancedOptions');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'csmAdvancedOptions', csmAdvancedOptionsDescriptor);
    }, 'editable', 'csmAdvancedOptions');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 19
        }
      })(DirectionalLight.prototype, 'csmAdvancedOptions', csmAdvancedOptionsDescriptor);
    }, 'property', 'csmAdvancedOptions');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap && this._csmLevel > CSMLevel.LEVEL_1;
      })(DirectionalLight.prototype, 'csmAdvancedOptions', csmAdvancedOptionsDescriptor);
    }, 'visible', 'csmAdvancedOptions');
    apply(function () {
      $.tooltip('i18n:lights.shadowAdvancedOptions')(DirectionalLight.prototype, 'csmAdvancedOptions', csmAdvancedOptionsDescriptor);
    }, 'tooltip', 'csmAdvancedOptions');
    apply(function () {
      $.type(CCBoolean)(DirectionalLight.prototype, 'csmLayersTransition', csmLayersTransitionDescriptor);
    }, 'type', 'csmLayersTransition');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'csmLayersTransition', csmLayersTransitionDescriptor);
    }, 'editable', 'csmLayersTransition');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 20
        }
      })(DirectionalLight.prototype, 'csmLayersTransition', csmLayersTransitionDescriptor);
    }, 'property', 'csmLayersTransition');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap && this._csmLevel > CSMLevel.LEVEL_1 && this._csmAdvancedOptions;
      })(DirectionalLight.prototype, 'csmLayersTransition', csmLayersTransitionDescriptor);
    }, 'visible', 'csmLayersTransition');
    apply(function () {
      $.tooltip('i18n:lights.csmLayersTransition')(DirectionalLight.prototype, 'csmLayersTransition', csmLayersTransitionDescriptor);
    }, 'tooltip', 'csmLayersTransition');
    apply(function () {
      $.type(CCFloat)(DirectionalLight.prototype, 'csmTransitionRange', csmTransitionRangeDescriptor);
    }, 'type', 'csmTransitionRange');
    apply(function () {
      $.slide(DirectionalLight.prototype, 'csmTransitionRange', csmTransitionRangeDescriptor);
    }, 'slide', 'csmTransitionRange');
    apply(function () {
      $.range([0.0, 0.1, 0.01])(DirectionalLight.prototype, 'csmTransitionRange', csmTransitionRangeDescriptor);
    }, 'range', 'csmTransitionRange');
    apply(function () {
      $.editable(DirectionalLight.prototype, 'csmTransitionRange', csmTransitionRangeDescriptor);
    }, 'editable', 'csmTransitionRange');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 21
        }
      })(DirectionalLight.prototype, 'csmTransitionRange', csmTransitionRangeDescriptor);
    }, 'property', 'csmTransitionRange');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.enabled && cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap && this._csmLevel > CSMLevel.LEVEL_1 && this._csmAdvancedOptions;
      })(DirectionalLight.prototype, 'csmTransitionRange', csmTransitionRangeDescriptor);
    }, 'visible', 'csmTransitionRange');
    apply(function () {
      $.tooltip('i18n:lights.csmTransitionRange')(DirectionalLight.prototype, 'csmTransitionRange', csmTransitionRangeDescriptor);
    }, 'tooltip', 'csmTransitionRange');
    apply(function () {
      $.executeInEditMode(DirectionalLight);
    }, 'executeInEditMode', null);
    apply(function () {
      $.menu('Light/DirectionalLight')(DirectionalLight);
    }, 'menu', null);
    apply(function () {
      $.help('i18n:cc.DirectionalLight')(DirectionalLight);
    }, 'help', null);
    apply(function () {
      $.ccclass('cc.DirectionalLight')(DirectionalLight);
    }, 'ccclass', null);
  } // end of patch_cc_DirectionalLight

  //---- class cc_EffectAsset

  function patch_cc_EffectAsset(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx7 = _extends({}, ctx),
      EffectAsset = _ctx7.EffectAsset;
    apply(function () {
      $.editable(EffectAsset.prototype, 'techniques', function () {
        return [];
      });
    }, 'editable', 'techniques');
    apply(function () {
      $.serializable(EffectAsset.prototype, 'techniques', function () {
        return [];
      });
    }, 'serializable', 'techniques');
    apply(function () {
      $.editable(EffectAsset.prototype, 'shaders', function () {
        return [];
      });
    }, 'editable', 'shaders');
    apply(function () {
      $.serializable(EffectAsset.prototype, 'shaders', function () {
        return [];
      });
    }, 'serializable', 'shaders');
    apply(function () {
      $.editable(EffectAsset.prototype, 'combinations', function () {
        return [];
      });
    }, 'editable', 'combinations');
    apply(function () {
      $.serializable(EffectAsset.prototype, 'combinations', function () {
        return [];
      });
    }, 'serializable', 'combinations');
    apply(function () {
      $$.editorOnly(EffectAsset.prototype, 'hideInEditor', function () {
        return false;
      });
    }, 'editorOnly', 'hideInEditor');
    apply(function () {
      $.serializable(EffectAsset.prototype, 'hideInEditor', function () {
        return false;
      });
    }, 'serializable', 'hideInEditor');
    apply(function () {
      $.ccclass('cc.EffectAsset')(EffectAsset);
    }, 'ccclass', null);
  } // end of patch_cc_EffectAsset

  //---- class cc_FogInfo

  function patch_cc_FogInfo(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx8 = _extends({}, ctx),
      FogInfo = _ctx8.FogInfo,
      FogType = _ctx8.FogType,
      CCFloat = _ctx8.CCFloat,
      Color = _ctx8.Color;
    var enabledDescriptor = Object.getOwnPropertyDescriptor(FogInfo.prototype, 'enabled');
    var accurateDescriptor = Object.getOwnPropertyDescriptor(FogInfo.prototype, 'accurate');
    var fogColorDescriptor = Object.getOwnPropertyDescriptor(FogInfo.prototype, 'fogColor');
    var typeDescriptor = Object.getOwnPropertyDescriptor(FogInfo.prototype, 'type');
    var fogDensityDescriptor = Object.getOwnPropertyDescriptor(FogInfo.prototype, 'fogDensity');
    var fogStartDescriptor = Object.getOwnPropertyDescriptor(FogInfo.prototype, 'fogStart');
    var fogEndDescriptor = Object.getOwnPropertyDescriptor(FogInfo.prototype, 'fogEnd');
    var fogAttenDescriptor = Object.getOwnPropertyDescriptor(FogInfo.prototype, 'fogAtten');
    var fogTopDescriptor = Object.getOwnPropertyDescriptor(FogInfo.prototype, 'fogTop');
    var fogRangeDescriptor = Object.getOwnPropertyDescriptor(FogInfo.prototype, 'fogRange');
    apply(function () {
      $.displayOrder(0)(FogInfo.prototype, 'enabled', enabledDescriptor);
    }, 'displayOrder', 'enabled');
    apply(function () {
      $.tooltip('i18n:fog.enabled')(FogInfo.prototype, 'enabled', enabledDescriptor);
    }, 'tooltip', 'enabled');
    apply(function () {
      $.editable(FogInfo.prototype, 'enabled', enabledDescriptor);
    }, 'editable', 'enabled');
    apply(function () {
      $.displayOrder(0)(FogInfo.prototype, 'accurate', accurateDescriptor);
    }, 'displayOrder', 'accurate');
    apply(function () {
      $.tooltip('i18n:fog.accurate')(FogInfo.prototype, 'accurate', accurateDescriptor);
    }, 'tooltip', 'accurate');
    apply(function () {
      $.editable(FogInfo.prototype, 'accurate', accurateDescriptor);
    }, 'editable', 'accurate');
    apply(function () {
      $.tooltip('i18n:fog.fogColor')(FogInfo.prototype, 'fogColor', fogColorDescriptor);
    }, 'tooltip', 'fogColor');
    apply(function () {
      $.editable(FogInfo.prototype, 'fogColor', fogColorDescriptor);
    }, 'editable', 'fogColor');
    apply(function () {
      $.tooltip('i18n:fog.type')(FogInfo.prototype, 'type', typeDescriptor);
    }, 'tooltip', 'type');
    apply(function () {
      $.displayOrder(1)(FogInfo.prototype, 'type', typeDescriptor);
    }, 'displayOrder', 'type');
    apply(function () {
      $.type(FogType)(FogInfo.prototype, 'type', typeDescriptor);
    }, 'type', 'type');
    apply(function () {
      $.editable(FogInfo.prototype, 'type', typeDescriptor);
    }, 'editable', 'type');
    apply(function () {
      $.tooltip('i18n:fog.fogDensity')(FogInfo.prototype, 'fogDensity', fogDensityDescriptor);
    }, 'tooltip', 'fogDensity');
    apply(function () {
      $.slide(FogInfo.prototype, 'fogDensity', fogDensityDescriptor);
    }, 'slide', 'fogDensity');
    apply(function () {
      $.range([0, 1, 0.01])(FogInfo.prototype, 'fogDensity', fogDensityDescriptor);
    }, 'range', 'fogDensity');
    apply(function () {
      $.type(CCFloat)(FogInfo.prototype, 'fogDensity', fogDensityDescriptor);
    }, 'type', 'fogDensity');
    apply(function () {
      $.visible(function () {
        return this._type !== FogType.LAYERED && this._type !== FogType.LINEAR;
      })(FogInfo.prototype, 'fogDensity', fogDensityDescriptor);
    }, 'visible', 'fogDensity');
    apply(function () {
      $.tooltip('i18n:fog.fogStart')(FogInfo.prototype, 'fogStart', fogStartDescriptor);
    }, 'tooltip', 'fogStart');
    apply(function () {
      $.rangeStep(0.01)(FogInfo.prototype, 'fogStart', fogStartDescriptor);
    }, 'rangeStep', 'fogStart');
    apply(function () {
      $.type(CCFloat)(FogInfo.prototype, 'fogStart', fogStartDescriptor);
    }, 'type', 'fogStart');
    apply(function () {
      $.visible(function () {
        return this._type !== FogType.LAYERED;
      })(FogInfo.prototype, 'fogStart', fogStartDescriptor);
    }, 'visible', 'fogStart');
    apply(function () {
      $.tooltip('i18n:fog.fogEnd')(FogInfo.prototype, 'fogEnd', fogEndDescriptor);
    }, 'tooltip', 'fogEnd');
    apply(function () {
      $.rangeStep(0.01)(FogInfo.prototype, 'fogEnd', fogEndDescriptor);
    }, 'rangeStep', 'fogEnd');
    apply(function () {
      $.type(CCFloat)(FogInfo.prototype, 'fogEnd', fogEndDescriptor);
    }, 'type', 'fogEnd');
    apply(function () {
      $.visible(function () {
        return this._type === FogType.LINEAR;
      })(FogInfo.prototype, 'fogEnd', fogEndDescriptor);
    }, 'visible', 'fogEnd');
    apply(function () {
      $.tooltip('i18n:fog.fogAtten')(FogInfo.prototype, 'fogAtten', fogAttenDescriptor);
    }, 'tooltip', 'fogAtten');
    apply(function () {
      $.rangeStep(0.01)(FogInfo.prototype, 'fogAtten', fogAttenDescriptor);
    }, 'rangeStep', 'fogAtten');
    apply(function () {
      $$.rangeMin(0.01)(FogInfo.prototype, 'fogAtten', fogAttenDescriptor);
    }, 'rangeMin', 'fogAtten');
    apply(function () {
      $.type(CCFloat)(FogInfo.prototype, 'fogAtten', fogAttenDescriptor);
    }, 'type', 'fogAtten');
    apply(function () {
      $.visible(function () {
        return this._type !== FogType.LINEAR;
      })(FogInfo.prototype, 'fogAtten', fogAttenDescriptor);
    }, 'visible', 'fogAtten');
    apply(function () {
      $.tooltip('i18n:fog.fogTop')(FogInfo.prototype, 'fogTop', fogTopDescriptor);
    }, 'tooltip', 'fogTop');
    apply(function () {
      $.rangeStep(0.01)(FogInfo.prototype, 'fogTop', fogTopDescriptor);
    }, 'rangeStep', 'fogTop');
    apply(function () {
      $.type(CCFloat)(FogInfo.prototype, 'fogTop', fogTopDescriptor);
    }, 'type', 'fogTop');
    apply(function () {
      $.visible(function () {
        return this._type === FogType.LAYERED;
      })(FogInfo.prototype, 'fogTop', fogTopDescriptor);
    }, 'visible', 'fogTop');
    apply(function () {
      $.tooltip('i18n:fog.fogRange')(FogInfo.prototype, 'fogRange', fogRangeDescriptor);
    }, 'tooltip', 'fogRange');
    apply(function () {
      $.rangeStep(0.01)(FogInfo.prototype, 'fogRange', fogRangeDescriptor);
    }, 'rangeStep', 'fogRange');
    apply(function () {
      $.type(CCFloat)(FogInfo.prototype, 'fogRange', fogRangeDescriptor);
    }, 'type', 'fogRange');
    apply(function () {
      $.visible(function () {
        return this._type === FogType.LAYERED;
      })(FogInfo.prototype, 'fogRange', fogRangeDescriptor);
    }, 'visible', 'fogRange');
    apply(function () {
      $.serializable(FogInfo.prototype, '_type', function () {
        return FogType.LINEAR;
      });
    }, 'serializable', '_type');
    apply(function () {
      $.serializable(FogInfo.prototype, '_fogColor', function () {
        return new Color('#C8C8C8');
      });
    }, 'serializable', '_fogColor');
    apply(function () {
      $.serializable(FogInfo.prototype, '_enabled', function () {
        return false;
      });
    }, 'serializable', '_enabled');
    apply(function () {
      $.serializable(FogInfo.prototype, '_fogDensity', function () {
        return 0.3;
      });
    }, 'serializable', '_fogDensity');
    apply(function () {
      $.serializable(FogInfo.prototype, '_fogStart', function () {
        return 0.5;
      });
    }, 'serializable', '_fogStart');
    apply(function () {
      $.serializable(FogInfo.prototype, '_fogEnd', function () {
        return 300;
      });
    }, 'serializable', '_fogEnd');
    apply(function () {
      $.serializable(FogInfo.prototype, '_fogAtten', function () {
        return 5;
      });
    }, 'serializable', '_fogAtten');
    apply(function () {
      $.serializable(FogInfo.prototype, '_fogTop', function () {
        return 1.5;
      });
    }, 'serializable', '_fogTop');
    apply(function () {
      $.serializable(FogInfo.prototype, '_fogRange', function () {
        return 1.2;
      });
    }, 'serializable', '_fogRange');
    apply(function () {
      $.serializable(FogInfo.prototype, '_accurate', function () {
        return false;
      });
    }, 'serializable', '_accurate');
    apply(function () {
      $.ccclass('cc.FogInfo')(FogInfo);
    }, 'ccclass', null);
  } // end of patch_cc_FogInfo

  //---- class cc_ImageAsset

  function patch_cc_ImageAsset(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx9 = _extends({}, ctx),
      ImageAsset = _ctx9.ImageAsset;
    var _nativeAssetDescriptor = Object.getOwnPropertyDescriptor(ImageAsset.prototype, '_nativeAsset');
    apply(function () {
      $.override(ImageAsset.prototype, '_nativeAsset', _nativeAssetDescriptor);
    }, 'override', '_nativeAsset');
    apply(function () {
      $.ccclass('cc.ImageAsset')(ImageAsset);
    }, 'ccclass', null);
  } // end of patch_cc_ImageAsset

  //---- class cc_LightProbeInfo

  function patch_cc_LightProbeInfo(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx10 = _extends({}, ctx),
      LightProbeInfo = _ctx10.LightProbeInfo,
      CCFloat = _ctx10.CCFloat,
      CCInteger = _ctx10.CCInteger;
    var giScaleDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfo.prototype, 'giScale');
    var giSamplesDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfo.prototype, 'giSamples');
    var bouncesDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfo.prototype, 'bounces');
    var reduceRingingDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfo.prototype, 'reduceRinging');
    var showWireframeDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfo.prototype, 'showWireframe');
    var showConvexDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfo.prototype, 'showConvex');
    var lightProbeSphereVolumeDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfo.prototype, 'lightProbeSphereVolume');
    apply(function () {
      $.displayName('GIScale')(LightProbeInfo.prototype, 'giScale', giScaleDescriptor);
    }, 'displayName', 'giScale');
    apply(function () {
      $.tooltip('i18n:light_probe.giScale')(LightProbeInfo.prototype, 'giScale', giScaleDescriptor);
    }, 'tooltip', 'giScale');
    apply(function () {
      $.type(CCFloat)(LightProbeInfo.prototype, 'giScale', giScaleDescriptor);
    }, 'type', 'giScale');
    apply(function () {
      $.range([0, 100, 1])(LightProbeInfo.prototype, 'giScale', giScaleDescriptor);
    }, 'range', 'giScale');
    apply(function () {
      $.editable(LightProbeInfo.prototype, 'giScale', giScaleDescriptor);
    }, 'editable', 'giScale');
    apply(function () {
      $.displayName('GISamples')(LightProbeInfo.prototype, 'giSamples', giSamplesDescriptor);
    }, 'displayName', 'giSamples');
    apply(function () {
      $.tooltip('i18n:light_probe.giSamples')(LightProbeInfo.prototype, 'giSamples', giSamplesDescriptor);
    }, 'tooltip', 'giSamples');
    apply(function () {
      $.type(CCInteger)(LightProbeInfo.prototype, 'giSamples', giSamplesDescriptor);
    }, 'type', 'giSamples');
    apply(function () {
      $.range([64, 65535, 1])(LightProbeInfo.prototype, 'giSamples', giSamplesDescriptor);
    }, 'range', 'giSamples');
    apply(function () {
      $.editable(LightProbeInfo.prototype, 'giSamples', giSamplesDescriptor);
    }, 'editable', 'giSamples');
    apply(function () {
      $.tooltip('i18n:light_probe.bounces')(LightProbeInfo.prototype, 'bounces', bouncesDescriptor);
    }, 'tooltip', 'bounces');
    apply(function () {
      $.type(CCInteger)(LightProbeInfo.prototype, 'bounces', bouncesDescriptor);
    }, 'type', 'bounces');
    apply(function () {
      $.range([1, 4, 1])(LightProbeInfo.prototype, 'bounces', bouncesDescriptor);
    }, 'range', 'bounces');
    apply(function () {
      $.editable(LightProbeInfo.prototype, 'bounces', bouncesDescriptor);
    }, 'editable', 'bounces');
    apply(function () {
      $.tooltip('i18n:light_probe.reduceRinging')(LightProbeInfo.prototype, 'reduceRinging', reduceRingingDescriptor);
    }, 'tooltip', 'reduceRinging');
    apply(function () {
      $.type(CCFloat)(LightProbeInfo.prototype, 'reduceRinging', reduceRingingDescriptor);
    }, 'type', 'reduceRinging');
    apply(function () {
      $.slide(LightProbeInfo.prototype, 'reduceRinging', reduceRingingDescriptor);
    }, 'slide', 'reduceRinging');
    apply(function () {
      $.range([0.0, 0.05, 0.001])(LightProbeInfo.prototype, 'reduceRinging', reduceRingingDescriptor);
    }, 'range', 'reduceRinging');
    apply(function () {
      $.editable(LightProbeInfo.prototype, 'reduceRinging', reduceRingingDescriptor);
    }, 'editable', 'reduceRinging');
    apply(function () {
      $.tooltip('i18n:light_probe.showWireframe')(LightProbeInfo.prototype, 'showWireframe', showWireframeDescriptor);
    }, 'tooltip', 'showWireframe');
    apply(function () {
      $.editable(LightProbeInfo.prototype, 'showWireframe', showWireframeDescriptor);
    }, 'editable', 'showWireframe');
    apply(function () {
      $.tooltip('i18n:light_probe.showConvex')(LightProbeInfo.prototype, 'showConvex', showConvexDescriptor);
    }, 'tooltip', 'showConvex');
    apply(function () {
      $.editable(LightProbeInfo.prototype, 'showConvex', showConvexDescriptor);
    }, 'editable', 'showConvex');
    apply(function () {
      $.tooltip('i18n:light_probe.lightProbeSphereVolume')(LightProbeInfo.prototype, 'lightProbeSphereVolume', lightProbeSphereVolumeDescriptor);
    }, 'tooltip', 'lightProbeSphereVolume');
    apply(function () {
      $.type(CCFloat)(LightProbeInfo.prototype, 'lightProbeSphereVolume', lightProbeSphereVolumeDescriptor);
    }, 'type', 'lightProbeSphereVolume');
    apply(function () {
      $.range([0, 100, 1])(LightProbeInfo.prototype, 'lightProbeSphereVolume', lightProbeSphereVolumeDescriptor);
    }, 'range', 'lightProbeSphereVolume');
    apply(function () {
      $.editable(LightProbeInfo.prototype, 'lightProbeSphereVolume', lightProbeSphereVolumeDescriptor);
    }, 'editable', 'lightProbeSphereVolume');
    apply(function () {
      $.serializable(LightProbeInfo.prototype, '_giScale', function () {
        return 1.0;
      });
    }, 'serializable', '_giScale');
    apply(function () {
      $.serializable(LightProbeInfo.prototype, '_giSamples', function () {
        return 1024;
      });
    }, 'serializable', '_giSamples');
    apply(function () {
      $.serializable(LightProbeInfo.prototype, '_bounces', function () {
        return 2;
      });
    }, 'serializable', '_bounces');
    apply(function () {
      $.serializable(LightProbeInfo.prototype, '_reduceRinging', function () {
        return 0.0;
      });
    }, 'serializable', '_reduceRinging');
    apply(function () {
      $.serializable(LightProbeInfo.prototype, '_showProbe', function () {
        return true;
      });
    }, 'serializable', '_showProbe');
    apply(function () {
      $.serializable(LightProbeInfo.prototype, '_showWireframe', function () {
        return true;
      });
    }, 'serializable', '_showWireframe');
    apply(function () {
      $.serializable(LightProbeInfo.prototype, '_showConvex', function () {
        return false;
      });
    }, 'serializable', '_showConvex');
    apply(function () {
      $.serializable(LightProbeInfo.prototype, '_data', function () {
        return null;
      });
    }, 'serializable', '_data');
    apply(function () {
      $.serializable(LightProbeInfo.prototype, '_lightProbeSphereVolume', function () {
        return 1.0;
      });
    }, 'serializable', '_lightProbeSphereVolume');
    apply(function () {
      $.ccclass('cc.LightProbeInfo')(LightProbeInfo);
    }, 'ccclass', null);
  } // end of patch_cc_LightProbeInfo

  //---- class cc_LightProbesData

  function patch_cc_LightProbesData(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx11 = _extends({}, ctx),
      LightProbesData = _ctx11.LightProbesData,
      Vertex = _ctx11.Vertex,
      Tetrahedron = _ctx11.Tetrahedron;
    apply(function () {
      $.type([Vertex])(LightProbesData.prototype, '_probes', function () {
        return [];
      });
    }, 'type', '_probes');
    apply(function () {
      $.serializable(LightProbesData.prototype, '_probes', function () {
        return [];
      });
    }, 'serializable', '_probes');
    apply(function () {
      $.type([Tetrahedron])(LightProbesData.prototype, '_tetrahedrons', function () {
        return [];
      });
    }, 'type', '_tetrahedrons');
    apply(function () {
      $.serializable(LightProbesData.prototype, '_tetrahedrons', function () {
        return [];
      });
    }, 'serializable', '_tetrahedrons');
    apply(function () {
      $.ccclass('cc.LightProbesData')(LightProbesData);
    }, 'ccclass', null);
  } // end of patch_cc_LightProbesData

  //---- class cc_Line

  function patch_cc_Line(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx12 = _extends({}, ctx),
      Line = _ctx12.Line,
      Texture2D = _ctx12.Texture2D,
      Material = _ctx12.Material,
      Vec3 = _ctx12.Vec3,
      CurveRange = _ctx12.CurveRange,
      GradientRange = _ctx12.GradientRange,
      Vec2 = _ctx12.Vec2;
    var textureDescriptor = Object.getOwnPropertyDescriptor(Line.prototype, 'texture');
    var lineMaterialDescriptor = Object.getOwnPropertyDescriptor(Line.prototype, 'lineMaterial');
    var sharedMaterialsDescriptor = Object.getOwnPropertyDescriptor(Line.prototype, 'sharedMaterials');
    var worldSpaceDescriptor = Object.getOwnPropertyDescriptor(Line.prototype, 'worldSpace');
    var positionsDescriptor = Object.getOwnPropertyDescriptor(Line.prototype, 'positions');
    var widthDescriptor = Object.getOwnPropertyDescriptor(Line.prototype, 'width');
    var colorDescriptor = Object.getOwnPropertyDescriptor(Line.prototype, 'color');
    var tileDescriptor = Object.getOwnPropertyDescriptor(Line.prototype, 'tile');
    var offsetDescriptor = Object.getOwnPropertyDescriptor(Line.prototype, 'offset');
    apply(function () {
      $.type(Texture2D)(Line.prototype, '_texture', function () {
        return null;
      });
    }, 'type', '_texture');
    apply(function () {
      $.tooltip('i18n:line.texture')(Line.prototype, 'texture', textureDescriptor);
    }, 'tooltip', 'texture');
    apply(function () {
      $.displayOrder(0)(Line.prototype, 'texture', textureDescriptor);
    }, 'displayOrder', 'texture');
    apply(function () {
      $.type(Texture2D)(Line.prototype, 'texture', textureDescriptor);
    }, 'type', 'texture');
    apply(function () {
      $.serializable(Line.prototype, '_material', function () {
        return null;
      });
    }, 'serializable', '_material');
    apply(function () {
      $.displayName('Material')(Line.prototype, 'lineMaterial', lineMaterialDescriptor);
    }, 'displayName', 'lineMaterial');
    apply(function () {
      $.tooltip('i18n:line.material')(Line.prototype, 'lineMaterial', lineMaterialDescriptor);
    }, 'tooltip', 'lineMaterial');
    apply(function () {
      $.displayOrder(1)(Line.prototype, 'lineMaterial', lineMaterialDescriptor);
    }, 'displayOrder', 'lineMaterial');
    apply(function () {
      $.type(Material)(Line.prototype, 'lineMaterial', lineMaterialDescriptor);
    }, 'type', 'lineMaterial');
    apply(function () {
      $.serializable(Line.prototype, 'sharedMaterials', sharedMaterialsDescriptor);
    }, 'serializable', 'sharedMaterials');
    apply(function () {
      $.visible(false)(Line.prototype, 'sharedMaterials', sharedMaterialsDescriptor);
    }, 'visible', 'sharedMaterials');
    apply(function () {
      $.override(Line.prototype, 'sharedMaterials', sharedMaterialsDescriptor);
    }, 'override', 'sharedMaterials');
    apply(function () {
      $.serializable(Line.prototype, '_worldSpace', function () {
        return false;
      });
    }, 'serializable', '_worldSpace');
    apply(function () {
      $.tooltip('i18n:line.worldSpace')(Line.prototype, 'worldSpace', worldSpaceDescriptor);
    }, 'tooltip', 'worldSpace');
    apply(function () {
      $.displayOrder(1)(Line.prototype, 'worldSpace', worldSpaceDescriptor);
    }, 'displayOrder', 'worldSpace');
    apply(function () {
      $.type([Vec3])(Line.prototype, '_positions', function () {
        return [];
      });
    }, 'type', '_positions');
    apply(function () {
      $.tooltip('i18n:line.positions')(Line.prototype, 'positions', positionsDescriptor);
    }, 'tooltip', 'positions');
    apply(function () {
      $.displayOrder(2)(Line.prototype, 'positions', positionsDescriptor);
    }, 'displayOrder', 'positions');
    apply(function () {
      $.type([Vec3])(Line.prototype, 'positions', positionsDescriptor);
    }, 'type', 'positions');
    apply(function () {
      $.tooltip('i18n:line.width')(Line.prototype, 'width', widthDescriptor);
    }, 'tooltip', 'width');
    apply(function () {
      $.displayOrder(3)(Line.prototype, 'width', widthDescriptor);
    }, 'displayOrder', 'width');
    apply(function () {
      $.range([0, 1])(Line.prototype, 'width', widthDescriptor);
    }, 'range', 'width');
    apply(function () {
      $.type(CurveRange)(Line.prototype, 'width', widthDescriptor);
    }, 'type', 'width');
    apply(function () {
      $.serializable(Line.prototype, '_width', function () {
        return new CurveRange();
      });
    }, 'serializable', '_width');
    apply(function () {
      $.tooltip('i18n:line.color')(Line.prototype, 'color', colorDescriptor);
    }, 'tooltip', 'color');
    apply(function () {
      $.displayOrder(6)(Line.prototype, 'color', colorDescriptor);
    }, 'displayOrder', 'color');
    apply(function () {
      $.type(GradientRange)(Line.prototype, 'color', colorDescriptor);
    }, 'type', 'color');
    apply(function () {
      $.serializable(Line.prototype, '_color', function () {
        return new GradientRange();
      });
    }, 'serializable', '_color');
    apply(function () {
      $.serializable(Line.prototype, '_tile', function () {
        return new Vec2(1, 1);
      });
    }, 'serializable', '_tile');
    apply(function () {
      $.tooltip('i18n:line.tile')(Line.prototype, 'tile', tileDescriptor);
    }, 'tooltip', 'tile');
    apply(function () {
      $.displayOrder(4)(Line.prototype, 'tile', tileDescriptor);
    }, 'displayOrder', 'tile');
    apply(function () {
      $.type(Vec2)(Line.prototype, 'tile', tileDescriptor);
    }, 'type', 'tile');
    apply(function () {
      $.serializable(Line.prototype, '_offset', function () {
        return new Vec2(0, 0);
      });
    }, 'serializable', '_offset');
    apply(function () {
      $.tooltip('i18n:line.offset')(Line.prototype, 'offset', offsetDescriptor);
    }, 'tooltip', 'offset');
    apply(function () {
      $.displayOrder(5)(Line.prototype, 'offset', offsetDescriptor);
    }, 'displayOrder', 'offset');
    apply(function () {
      $.type(Vec2)(Line.prototype, 'offset', offsetDescriptor);
    }, 'type', 'offset');
    apply(function () {
      $.executeInEditMode(Line);
    }, 'executeInEditMode', null);
    apply(function () {
      $.menu('Effects/Line')(Line);
    }, 'menu', null);
    apply(function () {
      $.help('i18n:cc.Line')(Line);
    }, 'help', null);
    apply(function () {
      $.ccclass('cc.Line')(Line);
    }, 'ccclass', null);
  } // end of patch_cc_Line

  //---- class cc_Material

  function patch_cc_Material(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx13 = _extends({}, ctx),
      Material = _ctx13.Material,
      EffectAsset = _ctx13.EffectAsset;
    apply(function () {
      $.type(EffectAsset)(Material.prototype, '_effectAsset', function () {
        return null;
      });
    }, 'type', '_effectAsset');
    apply(function () {
      $.serializable(Material.prototype, '_techIdx', function () {
        return 0;
      });
    }, 'serializable', '_techIdx');
    apply(function () {
      $.serializable(Material.prototype, '_defines', function () {
        return [];
      });
    }, 'serializable', '_defines');
    apply(function () {
      $.serializable(Material.prototype, '_states', function () {
        return [];
      });
    }, 'serializable', '_states');
    apply(function () {
      $.serializable(Material.prototype, '_props', function () {
        return [];
      });
    }, 'serializable', '_props');
    apply(function () {
      $.ccclass('cc.Material')(Material);
    }, 'ccclass', null);
  } // end of patch_cc_Material

  //---- class cc_Mesh

  function patch_cc_Mesh(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx14 = _extends({}, ctx),
      Mesh = _ctx14.Mesh;
    apply(function () {
      $.serializable(Mesh.prototype, '_struct', function () {
        return {
          vertexBundles: [],
          primitives: []
        };
      });
    }, 'serializable', '_struct');
    apply(function () {
      $.serializable(Mesh.prototype, '_hash', function () {
        return 0;
      });
    }, 'serializable', '_hash');
    apply(function () {
      $.serializable(Mesh.prototype, '_allowDataAccess', function () {
        return true;
      });
    }, 'serializable', '_allowDataAccess');
    apply(function () {
      $.ccclass('cc.Mesh')(Mesh);
    }, 'ccclass', null);
  } // end of patch_cc_Mesh

  //---- class cc_Node

  function patch_cc_Node(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx15 = _extends({}, ctx),
      Node = _ctx15.Node,
      Vec3 = _ctx15.Vec3,
      Quat = _ctx15.Quat,
      MobilityMode = _ctx15.MobilityMode,
      Layers = _ctx15.Layers;
    var _persistNodeDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, '_persistNode');
    var nameDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'name');
    var childrenDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'children');
    var activeDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'active');
    var activeInHierarchyDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'activeInHierarchy');
    var parentDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'parent');
    var eulerAnglesDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'eulerAngles');
    var angleDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'angle');
    var mobilityDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'mobility');
    var layerDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'layer');
    apply(function () {
      $.property(Node.prototype, '_persistNode', _persistNodeDescriptor);
    }, 'property', '_persistNode');
    apply(function () {
      $.editable(Node.prototype, 'name', nameDescriptor);
    }, 'editable', 'name');
    apply(function () {
      $.editable(Node.prototype, 'children', childrenDescriptor);
    }, 'editable', 'children');
    apply(function () {
      $.editable(Node.prototype, 'active', activeDescriptor);
    }, 'editable', 'active');
    apply(function () {
      $.editable(Node.prototype, 'activeInHierarchy', activeInHierarchyDescriptor);
    }, 'editable', 'activeInHierarchy');
    apply(function () {
      $.editable(Node.prototype, 'parent', parentDescriptor);
    }, 'editable', 'parent');
    apply(function () {
      $.serializable(Node.prototype, '_parent', function () {
        return null;
      });
    }, 'serializable', '_parent');
    apply(function () {
      $.serializable(Node.prototype, '_children', function () {
        return [];
      });
    }, 'serializable', '_children');
    apply(function () {
      $.serializable(Node.prototype, '_active', function () {
        return true;
      });
    }, 'serializable', '_active');
    apply(function () {
      $.serializable(Node.prototype, '_components', function () {
        return [];
      });
    }, 'serializable', '_components');
    apply(function () {
      $.serializable(Node.prototype, '_prefab', function () {
        return null;
      });
    }, 'serializable', '_prefab');
    apply(function () {
      $.serializable(Node.prototype, '_lpos', function () {
        return new Vec3();
      });
    }, 'serializable', '_lpos');
    apply(function () {
      $.serializable(Node.prototype, '_lrot', function () {
        return new Quat();
      });
    }, 'serializable', '_lrot');
    apply(function () {
      $.serializable(Node.prototype, '_lscale', function () {
        return new Vec3(1, 1, 1);
      });
    }, 'serializable', '_lscale');
    apply(function () {
      $.serializable(Node.prototype, '_mobility', function () {
        return MobilityMode.Static;
      });
    }, 'serializable', '_mobility');
    apply(function () {
      $.serializable(Node.prototype, '_layer', function () {
        return Layers.Enum.DEFAULT;
      });
    }, 'serializable', '_layer');
    apply(function () {
      $.serializable(Node.prototype, '_euler', function () {
        return new Vec3();
      });
    }, 'serializable', '_euler');
    apply(function () {
      $.type(Vec3)(Node.prototype, 'eulerAngles', eulerAnglesDescriptor);
    }, 'type', 'eulerAngles');
    apply(function () {
      $.editable(Node.prototype, 'angle', angleDescriptor);
    }, 'editable', 'angle');
    apply(function () {
      $.type(MobilityMode)(Node.prototype, 'mobility', mobilityDescriptor);
    }, 'type', 'mobility');
    apply(function () {
      $.editable(Node.prototype, 'mobility', mobilityDescriptor);
    }, 'editable', 'mobility');
    apply(function () {
      $.editable(Node.prototype, 'layer', layerDescriptor);
    }, 'editable', 'layer');
    apply(function () {
      $.ccclass('cc.Node')(Node);
    }, 'ccclass', null);
  } // end of patch_cc_Node

  //---- class cc_OctreeInfo

  function patch_cc_OctreeInfo(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx16 = _extends({}, ctx),
      OctreeInfo = _ctx16.OctreeInfo,
      CCInteger = _ctx16.CCInteger,
      Vec3 = _ctx16.Vec3,
      DEFAULT_WORLD_MIN_POS = _ctx16.DEFAULT_WORLD_MIN_POS,
      DEFAULT_WORLD_MAX_POS = _ctx16.DEFAULT_WORLD_MAX_POS,
      DEFAULT_OCTREE_DEPTH = _ctx16.DEFAULT_OCTREE_DEPTH;
    var enabledDescriptor = Object.getOwnPropertyDescriptor(OctreeInfo.prototype, 'enabled');
    var minPosDescriptor = Object.getOwnPropertyDescriptor(OctreeInfo.prototype, 'minPos');
    var maxPosDescriptor = Object.getOwnPropertyDescriptor(OctreeInfo.prototype, 'maxPos');
    var depthDescriptor = Object.getOwnPropertyDescriptor(OctreeInfo.prototype, 'depth');
    apply(function () {
      $.tooltip('i18n:octree_culling.enabled')(OctreeInfo.prototype, 'enabled', enabledDescriptor);
    }, 'tooltip', 'enabled');
    apply(function () {
      $.editable(OctreeInfo.prototype, 'enabled', enabledDescriptor);
    }, 'editable', 'enabled');
    apply(function () {
      $.displayName('World MinPos')(OctreeInfo.prototype, 'minPos', minPosDescriptor);
    }, 'displayName', 'minPos');
    apply(function () {
      $.tooltip('i18n:octree_culling.minPos')(OctreeInfo.prototype, 'minPos', minPosDescriptor);
    }, 'tooltip', 'minPos');
    apply(function () {
      $.editable(OctreeInfo.prototype, 'minPos', minPosDescriptor);
    }, 'editable', 'minPos');
    apply(function () {
      $.displayName('World MaxPos')(OctreeInfo.prototype, 'maxPos', maxPosDescriptor);
    }, 'displayName', 'maxPos');
    apply(function () {
      $.tooltip('i18n:octree_culling.maxPos')(OctreeInfo.prototype, 'maxPos', maxPosDescriptor);
    }, 'tooltip', 'maxPos');
    apply(function () {
      $.editable(OctreeInfo.prototype, 'maxPos', maxPosDescriptor);
    }, 'editable', 'maxPos');
    apply(function () {
      $.tooltip('i18n:octree_culling.depth')(OctreeInfo.prototype, 'depth', depthDescriptor);
    }, 'tooltip', 'depth');
    apply(function () {
      $.type(CCInteger)(OctreeInfo.prototype, 'depth', depthDescriptor);
    }, 'type', 'depth');
    apply(function () {
      $.slide(OctreeInfo.prototype, 'depth', depthDescriptor);
    }, 'slide', 'depth');
    apply(function () {
      $.range([4, 12, 1])(OctreeInfo.prototype, 'depth', depthDescriptor);
    }, 'range', 'depth');
    apply(function () {
      $.editable(OctreeInfo.prototype, 'depth', depthDescriptor);
    }, 'editable', 'depth');
    apply(function () {
      $.serializable(OctreeInfo.prototype, '_enabled', function () {
        return false;
      });
    }, 'serializable', '_enabled');
    apply(function () {
      $.serializable(OctreeInfo.prototype, '_minPos', function () {
        return new Vec3(DEFAULT_WORLD_MIN_POS);
      });
    }, 'serializable', '_minPos');
    apply(function () {
      $.serializable(OctreeInfo.prototype, '_maxPos', function () {
        return new Vec3(DEFAULT_WORLD_MAX_POS);
      });
    }, 'serializable', '_maxPos');
    apply(function () {
      $.serializable(OctreeInfo.prototype, '_depth', function () {
        return DEFAULT_OCTREE_DEPTH;
      });
    }, 'serializable', '_depth');
    apply(function () {
      $.ccclass('cc.OctreeInfo')(OctreeInfo);
    }, 'ccclass', null);
  } // end of patch_cc_OctreeInfo

  //---- class cc_PointLight

  function patch_cc_PointLight(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx17 = _extends({}, ctx),
      PointLight = _ctx17.PointLight,
      scene = _ctx17.scene,
      Camera = _ctx17.Camera,
      PhotometricTerm = _ctx17.PhotometricTerm,
      CCInteger = _ctx17.CCInteger,
      CCFloat = _ctx17.CCFloat;
    var luminousFluxDescriptor = Object.getOwnPropertyDescriptor(PointLight.prototype, 'luminousFlux');
    var luminanceDescriptor = Object.getOwnPropertyDescriptor(PointLight.prototype, 'luminance');
    var termDescriptor = Object.getOwnPropertyDescriptor(PointLight.prototype, 'term');
    var rangeDescriptor = Object.getOwnPropertyDescriptor(PointLight.prototype, 'range');
    apply(function () {
      $.formerlySerializedAs('_luminance')(PointLight.prototype, '_luminanceHDR', function () {
        return 1700 / scene.nt2lm(0.15);
      });
    }, 'formerlySerializedAs', '_luminanceHDR');
    apply(function () {
      $.serializable(PointLight.prototype, '_luminanceHDR', function () {
        return 1700 / scene.nt2lm(0.15);
      });
    }, 'serializable', '_luminanceHDR');
    apply(function () {
      $.serializable(PointLight.prototype, '_luminanceLDR', function () {
        return 1700 / scene.nt2lm(0.15) * Camera.standardExposureValue * Camera.standardLightMeterScale;
      });
    }, 'serializable', '_luminanceLDR');
    apply(function () {
      $.serializable(PointLight.prototype, '_term', function () {
        return PhotometricTerm.LUMINOUS_FLUX;
      });
    }, 'serializable', '_term');
    apply(function () {
      $.serializable(PointLight.prototype, '_range', function () {
        return 1;
      });
    }, 'serializable', '_range');
    apply(function () {
      $.type(CCInteger)(PointLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'type', 'luminousFlux');
    apply(function () {
      $.range([0, Number.POSITIVE_INFINITY, 100])(PointLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'range', 'luminousFlux');
    apply(function () {
      $.editable(PointLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'editable', 'luminousFlux');
    apply(function () {
      $.tooltip('i18n:lights.luminous_flux')(PointLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'tooltip', 'luminousFlux');
    apply(function () {
      $.displayOrder(-1)(PointLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'displayOrder', 'luminousFlux');
    apply(function () {
      $.type(CCInteger)(PointLight.prototype, 'luminance', luminanceDescriptor);
    }, 'type', 'luminance');
    apply(function () {
      $.range([0, Number.POSITIVE_INFINITY, 10])(PointLight.prototype, 'luminance', luminanceDescriptor);
    }, 'range', 'luminance');
    apply(function () {
      $.editable(PointLight.prototype, 'luminance', luminanceDescriptor);
    }, 'editable', 'luminance');
    apply(function () {
      $.tooltip('i18n:lights.luminance')(PointLight.prototype, 'luminance', luminanceDescriptor);
    }, 'tooltip', 'luminance');
    apply(function () {
      $.displayOrder(-1)(PointLight.prototype, 'luminance', luminanceDescriptor);
    }, 'displayOrder', 'luminance');
    apply(function () {
      $.editable(PointLight.prototype, 'term', termDescriptor);
    }, 'editable', 'term');
    apply(function () {
      $.tooltip('i18n:lights.term')(PointLight.prototype, 'term', termDescriptor);
    }, 'tooltip', 'term');
    apply(function () {
      $.displayOrder(-2)(PointLight.prototype, 'term', termDescriptor);
    }, 'displayOrder', 'term');
    apply(function () {
      $.type(PhotometricTerm)(PointLight.prototype, 'term', termDescriptor);
    }, 'type', 'term');
    apply(function () {
      $.type(CCFloat)(PointLight.prototype, 'range', rangeDescriptor);
    }, 'type', 'range');
    apply(function () {
      $$.rangeMin(0)(PointLight.prototype, 'range', rangeDescriptor);
    }, 'rangeMin', 'range');
    apply(function () {
      $.editable(PointLight.prototype, 'range', rangeDescriptor);
    }, 'editable', 'range');
    apply(function () {
      $.tooltip('i18n:lights.range')(PointLight.prototype, 'range', rangeDescriptor);
    }, 'tooltip', 'range');
    apply(function () {
      $.executeInEditMode(PointLight);
    }, 'executeInEditMode', null);
    apply(function () {
      $.menu('Light/PointLight')(PointLight);
    }, 'menu', null);
    apply(function () {
      $.help('i18n:cc.PointLight')(PointLight);
    }, 'help', null);
    apply(function () {
      $.ccclass('cc.PointLight')(PointLight);
    }, 'ccclass', null);
  } // end of patch_cc_PointLight

  //---- class cc_PostSettingsInfo

  function patch_cc_PostSettingsInfo(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx18 = _extends({}, ctx),
      PostSettingsInfo = _ctx18.PostSettingsInfo,
      ToneMappingType = _ctx18.ToneMappingType;
    var toneMappingTypeDescriptor = Object.getOwnPropertyDescriptor(PostSettingsInfo.prototype, 'toneMappingType');
    apply(function () {
      $.tooltip('i18n:tone_mapping.toneMappingType')(PostSettingsInfo.prototype, 'toneMappingType', toneMappingTypeDescriptor);
    }, 'tooltip', 'toneMappingType');
    apply(function () {
      $.type(ToneMappingType)(PostSettingsInfo.prototype, 'toneMappingType', toneMappingTypeDescriptor);
    }, 'type', 'toneMappingType');
    apply(function () {
      $.editable(PostSettingsInfo.prototype, 'toneMappingType', toneMappingTypeDescriptor);
    }, 'editable', 'toneMappingType');
    apply(function () {
      $.serializable(PostSettingsInfo.prototype, '_toneMappingType', function () {
        return ToneMappingType.DEFAULT;
      });
    }, 'serializable', '_toneMappingType');
    apply(function () {
      $.ccclass('cc.PostSettingsInfo')(PostSettingsInfo);
    }, 'ccclass', null);
  } // end of patch_cc_PostSettingsInfo

  //---- class cc_RangedDirectionalLight

  function patch_cc_RangedDirectionalLight(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx19 = _extends({}, ctx),
      RangedDirectionalLight = _ctx19.RangedDirectionalLight,
      Camera = _ctx19.Camera,
      CCInteger = _ctx19.CCInteger;
    var illuminanceDescriptor = Object.getOwnPropertyDescriptor(RangedDirectionalLight.prototype, 'illuminance');
    apply(function () {
      $.formerlySerializedAs('_illuminance')(RangedDirectionalLight.prototype, '_illuminanceHDR', function () {
        return 65000;
      });
    }, 'formerlySerializedAs', '_illuminanceHDR');
    apply(function () {
      $.property(RangedDirectionalLight.prototype, '_illuminanceHDR', function () {
        return 65000;
      });
    }, 'property', '_illuminanceHDR');
    apply(function () {
      $.serializable(RangedDirectionalLight.prototype, '_illuminanceLDR', function () {
        return 65000 * Camera.standardExposureValue;
      });
    }, 'serializable', '_illuminanceLDR');
    apply(function () {
      $.type(CCInteger)(RangedDirectionalLight.prototype, 'illuminance', illuminanceDescriptor);
    }, 'type', 'illuminance');
    apply(function () {
      $.range([0, Number.POSITIVE_INFINITY, 10])(RangedDirectionalLight.prototype, 'illuminance', illuminanceDescriptor);
    }, 'range', 'illuminance');
    apply(function () {
      $.editable(RangedDirectionalLight.prototype, 'illuminance', illuminanceDescriptor);
    }, 'editable', 'illuminance');
    apply(function () {
      $.tooltip('i18n:lights.illuminance')(RangedDirectionalLight.prototype, 'illuminance', illuminanceDescriptor);
    }, 'tooltip', 'illuminance');
    apply(function () {
      $.executeInEditMode(RangedDirectionalLight);
    }, 'executeInEditMode', null);
    apply(function () {
      $.menu('Light/RangedDirectionalLight')(RangedDirectionalLight);
    }, 'menu', null);
    apply(function () {
      $.help('i18n:cc.RangedDirectionalLight')(RangedDirectionalLight);
    }, 'help', null);
    apply(function () {
      $.ccclass('cc.RangedDirectionalLight')(RangedDirectionalLight);
    }, 'ccclass', null);
  } // end of patch_cc_RangedDirectionalLight

  //---- class cc_RenderPipeline

  function patch_cc_RenderPipeline(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx20 = _extends({}, ctx),
      RenderPipeline = _ctx20.RenderPipeline,
      RenderFlow = _ctx20.RenderFlow;
    apply(function () {
      $.serializable(RenderPipeline.prototype, '_tag', function () {
        return 0;
      });
    }, 'serializable', '_tag');
    apply(function () {
      $.displayOrder(0)(RenderPipeline.prototype, '_tag', function () {
        return 0;
      });
    }, 'displayOrder', '_tag');
    apply(function () {
      $.serializable(RenderPipeline.prototype, '_flows', function () {
        return [];
      });
    }, 'serializable', '_flows');
    apply(function () {
      $.type([RenderFlow])(RenderPipeline.prototype, '_flows', function () {
        return [];
      });
    }, 'type', '_flows');
    apply(function () {
      $.displayOrder(1)(RenderPipeline.prototype, '_flows', function () {
        return [];
      });
    }, 'displayOrder', '_flows');
    apply(function () {
      $.ccclass('cc.RenderPipeline')(RenderPipeline);
    }, 'ccclass', null);
  } // end of patch_cc_RenderPipeline

  //---- class cc_RenderTexture

  function patch_cc_RenderTexture(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx21 = _extends({}, ctx),
      RenderTexture = _ctx21.RenderTexture;
    apply(function () {
      $.ccclass('cc.RenderTexture')(RenderTexture);
    }, 'ccclass', null);
  } // end of patch_cc_RenderTexture

  //---- class cc_Scene

  function patch_cc_Scene(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx22 = _extends({}, ctx),
      Scene = _ctx22.Scene,
      SceneGlobals = _ctx22.SceneGlobals;
    var globalsDescriptor = Object.getOwnPropertyDescriptor(Scene.prototype, 'globals');
    apply(function () {
      $.editable(Scene.prototype, 'globals', globalsDescriptor);
    }, 'editable', 'globals');
    apply(function () {
      $.editable(Scene.prototype, 'autoReleaseAssets', function () {
        return false;
      });
    }, 'editable', 'autoReleaseAssets');
    apply(function () {
      $.serializable(Scene.prototype, 'autoReleaseAssets', function () {
        return false;
      });
    }, 'serializable', 'autoReleaseAssets');
    apply(function () {
      $.serializable(Scene.prototype, '_globals', function () {
        return new SceneGlobals();
      });
    }, 'serializable', '_globals');
    apply(function () {
      $.ccclass('cc.Scene')(Scene);
    }, 'ccclass', null);
  } // end of patch_cc_Scene

  //---- class cc_SceneAsset

  function patch_cc_SceneAsset(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx23 = _extends({}, ctx),
      SceneAsset = _ctx23.SceneAsset;
    apply(function () {
      $.serializable(SceneAsset.prototype, 'scene', function () {
        return null;
      });
    }, 'serializable', 'scene');
    apply(function () {
      $.editable(SceneAsset.prototype, 'scene', function () {
        return null;
      });
    }, 'editable', 'scene');
    apply(function () {
      $.ccclass('cc.SceneAsset')(SceneAsset);
    }, 'ccclass', null);
  } // end of patch_cc_SceneAsset

  //---- class cc_SceneGlobals

  function patch_cc_SceneGlobals(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx24 = _extends({}, ctx),
      SceneGlobals = _ctx24.SceneGlobals,
      AmbientInfo = _ctx24.AmbientInfo,
      ShadowsInfo = _ctx24.ShadowsInfo,
      SkyboxInfo = _ctx24.SkyboxInfo,
      FogInfo = _ctx24.FogInfo,
      OctreeInfo = _ctx24.OctreeInfo,
      SkinInfo = _ctx24.SkinInfo,
      LightProbeInfo = _ctx24.LightProbeInfo,
      PostSettingsInfo = _ctx24.PostSettingsInfo;
    var skyboxDescriptor = Object.getOwnPropertyDescriptor(SceneGlobals.prototype, 'skybox');
    apply(function () {
      $.editable(SceneGlobals.prototype, 'ambient', function () {
        return new AmbientInfo();
      });
    }, 'editable', 'ambient');
    apply(function () {
      $.serializable(SceneGlobals.prototype, 'ambient', function () {
        return new AmbientInfo();
      });
    }, 'serializable', 'ambient');
    apply(function () {
      $.editable(SceneGlobals.prototype, 'shadows', function () {
        return new ShadowsInfo();
      });
    }, 'editable', 'shadows');
    apply(function () {
      $.serializable(SceneGlobals.prototype, 'shadows', function () {
        return new ShadowsInfo();
      });
    }, 'serializable', 'shadows');
    apply(function () {
      $.serializable(SceneGlobals.prototype, '_skybox', function () {
        return new SkyboxInfo();
      });
    }, 'serializable', '_skybox');
    apply(function () {
      $.serializable(SceneGlobals.prototype, 'fog', function () {
        return new FogInfo();
      });
    }, 'serializable', 'fog');
    apply(function () {
      $.editable(SceneGlobals.prototype, 'fog', function () {
        return new FogInfo();
      });
    }, 'editable', 'fog');
    apply(function () {
      $.type(SkyboxInfo)(SceneGlobals.prototype, 'skybox', skyboxDescriptor);
    }, 'type', 'skybox');
    apply(function () {
      $.editable(SceneGlobals.prototype, 'skybox', skyboxDescriptor);
    }, 'editable', 'skybox');
    apply(function () {
      $.serializable(SceneGlobals.prototype, 'octree', function () {
        return new OctreeInfo();
      });
    }, 'serializable', 'octree');
    apply(function () {
      $.editable(SceneGlobals.prototype, 'octree', function () {
        return new OctreeInfo();
      });
    }, 'editable', 'octree');
    apply(function () {
      $.serializable(SceneGlobals.prototype, 'skin', function () {
        return new SkinInfo();
      });
    }, 'serializable', 'skin');
    apply(function () {
      $.editable(SceneGlobals.prototype, 'skin', function () {
        return new SkinInfo();
      });
    }, 'editable', 'skin');
    apply(function () {
      $.serializable(SceneGlobals.prototype, 'lightProbeInfo', function () {
        return new LightProbeInfo();
      });
    }, 'serializable', 'lightProbeInfo');
    apply(function () {
      $.editable(SceneGlobals.prototype, 'lightProbeInfo', function () {
        return new LightProbeInfo();
      });
    }, 'editable', 'lightProbeInfo');
    apply(function () {
      $.serializable(SceneGlobals.prototype, 'postSettings', function () {
        return new PostSettingsInfo();
      });
    }, 'serializable', 'postSettings');
    apply(function () {
      $.editable(SceneGlobals.prototype, 'postSettings', function () {
        return new PostSettingsInfo();
      });
    }, 'editable', 'postSettings');
    apply(function () {
      $.serializable(SceneGlobals.prototype, 'bakedWithStationaryMainLight', function () {
        return false;
      });
    }, 'serializable', 'bakedWithStationaryMainLight');
    apply(function () {
      $.editable(SceneGlobals.prototype, 'bakedWithStationaryMainLight', function () {
        return false;
      });
    }, 'editable', 'bakedWithStationaryMainLight');
    apply(function () {
      $.serializable(SceneGlobals.prototype, 'bakedWithHighpLightmap', function () {
        return false;
      });
    }, 'serializable', 'bakedWithHighpLightmap');
    apply(function () {
      $.editable(SceneGlobals.prototype, 'bakedWithHighpLightmap', function () {
        return false;
      });
    }, 'editable', 'bakedWithHighpLightmap');
    apply(function () {
      $.ccclass('cc.SceneGlobals')(SceneGlobals);
    }, 'ccclass', null);
  } // end of patch_cc_SceneGlobals

  //---- class cc_ShadowsInfo

  function patch_cc_ShadowsInfo(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx25 = _extends({}, ctx),
      ShadowsInfo = _ctx25.ShadowsInfo,
      ShadowType = _ctx25.ShadowType,
      CCFloat = _ctx25.CCFloat,
      CCInteger = _ctx25.CCInteger,
      ShadowSize = _ctx25.ShadowSize,
      Vec3 = _ctx25.Vec3,
      Color = _ctx25.Color,
      Vec2 = _ctx25.Vec2;
    var enabledDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfo.prototype, 'enabled');
    var typeDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfo.prototype, 'type');
    var shadowColorDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfo.prototype, 'shadowColor');
    var planeDirectionDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfo.prototype, 'planeDirection');
    var planeHeightDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfo.prototype, 'planeHeight');
    var planeBiasDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfo.prototype, 'planeBias');
    var maxReceivedDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfo.prototype, 'maxReceived');
    var shadowMapSizeDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfo.prototype, 'shadowMapSize');
    apply(function () {
      $.tooltip('i18n:shadow.enabled')(ShadowsInfo.prototype, 'enabled', enabledDescriptor);
    }, 'tooltip', 'enabled');
    apply(function () {
      $.editable(ShadowsInfo.prototype, 'enabled', enabledDescriptor);
    }, 'editable', 'enabled');
    apply(function () {
      $.type(ShadowType)(ShadowsInfo.prototype, 'type', typeDescriptor);
    }, 'type', 'type');
    apply(function () {
      $.editable(ShadowsInfo.prototype, 'type', typeDescriptor);
    }, 'editable', 'type');
    apply(function () {
      $.tooltip('i18n:shadow.type')(ShadowsInfo.prototype, 'type', typeDescriptor);
    }, 'tooltip', 'type');
    apply(function () {
      $.visible(function () {
        return this._type === ShadowType.Planar;
      })(ShadowsInfo.prototype, 'shadowColor', shadowColorDescriptor);
    }, 'visible', 'shadowColor');
    apply(function () {
      $.tooltip('i18n:shadow.shadowColor')(ShadowsInfo.prototype, 'shadowColor', shadowColorDescriptor);
    }, 'tooltip', 'shadowColor');
    apply(function () {
      $.visible(function () {
        return this._type === ShadowType.Planar;
      })(ShadowsInfo.prototype, 'planeDirection', planeDirectionDescriptor);
    }, 'visible', 'planeDirection');
    apply(function () {
      $.tooltip('i18n:shadow.planeDirection')(ShadowsInfo.prototype, 'planeDirection', planeDirectionDescriptor);
    }, 'tooltip', 'planeDirection');
    apply(function () {
      $.visible(function () {
        return this._type === ShadowType.Planar;
      })(ShadowsInfo.prototype, 'planeHeight', planeHeightDescriptor);
    }, 'visible', 'planeHeight');
    apply(function () {
      $.type(CCFloat)(ShadowsInfo.prototype, 'planeHeight', planeHeightDescriptor);
    }, 'type', 'planeHeight');
    apply(function () {
      $.editable(ShadowsInfo.prototype, 'planeHeight', planeHeightDescriptor);
    }, 'editable', 'planeHeight');
    apply(function () {
      $.tooltip('i18n:shadow.planeHeight')(ShadowsInfo.prototype, 'planeHeight', planeHeightDescriptor);
    }, 'tooltip', 'planeHeight');
    apply(function () {
      $.visible(function () {
        return this._type === ShadowType.Planar;
      })(ShadowsInfo.prototype, 'planeBias', planeBiasDescriptor);
    }, 'visible', 'planeBias');
    apply(function () {
      $.type(CCFloat)(ShadowsInfo.prototype, 'planeBias', planeBiasDescriptor);
    }, 'type', 'planeBias');
    apply(function () {
      $.editable(ShadowsInfo.prototype, 'planeBias', planeBiasDescriptor);
    }, 'editable', 'planeBias');
    apply(function () {
      $.tooltip('i18n:shadow.planeBias')(ShadowsInfo.prototype, 'planeBias', planeBiasDescriptor);
    }, 'tooltip', 'planeBias');
    apply(function () {
      $.visible(function () {
        return this._type === ShadowType.ShadowMap;
      })(ShadowsInfo.prototype, 'maxReceived', maxReceivedDescriptor);
    }, 'visible', 'maxReceived');
    apply(function () {
      $.type(CCInteger)(ShadowsInfo.prototype, 'maxReceived', maxReceivedDescriptor);
    }, 'type', 'maxReceived');
    apply(function () {
      $.tooltip('i18n:shadow.maxReceived')(ShadowsInfo.prototype, 'maxReceived', maxReceivedDescriptor);
    }, 'tooltip', 'maxReceived');
    apply(function () {
      $.visible(function () {
        return this._type === ShadowType.ShadowMap;
      })(ShadowsInfo.prototype, 'shadowMapSize', shadowMapSizeDescriptor);
    }, 'visible', 'shadowMapSize');
    apply(function () {
      $.type(ShadowSize)(ShadowsInfo.prototype, 'shadowMapSize', shadowMapSizeDescriptor);
    }, 'type', 'shadowMapSize');
    apply(function () {
      $.tooltip('i18n:shadow.shadowMapSize')(ShadowsInfo.prototype, 'shadowMapSize', shadowMapSizeDescriptor);
    }, 'tooltip', 'shadowMapSize');
    apply(function () {
      $.serializable(ShadowsInfo.prototype, '_enabled', function () {
        return false;
      });
    }, 'serializable', '_enabled');
    apply(function () {
      $.serializable(ShadowsInfo.prototype, '_type', function () {
        return ShadowType.Planar;
      });
    }, 'serializable', '_type');
    apply(function () {
      $.serializable(ShadowsInfo.prototype, '_normal', function () {
        return new Vec3(0, 1, 0);
      });
    }, 'serializable', '_normal');
    apply(function () {
      $.serializable(ShadowsInfo.prototype, '_distance', function () {
        return 0;
      });
    }, 'serializable', '_distance');
    apply(function () {
      $.serializable(ShadowsInfo.prototype, '_planeBias', function () {
        return 1.0;
      });
    }, 'serializable', '_planeBias');
    apply(function () {
      $.serializable(ShadowsInfo.prototype, '_shadowColor', function () {
        return new Color(0, 0, 0, 76);
      });
    }, 'serializable', '_shadowColor');
    apply(function () {
      $.serializable(ShadowsInfo.prototype, '_maxReceived', function () {
        return 4;
      });
    }, 'serializable', '_maxReceived');
    apply(function () {
      $.serializable(ShadowsInfo.prototype, '_size', function () {
        return new Vec2(1024, 1024);
      });
    }, 'serializable', '_size');
    apply(function () {
      $.ccclass('cc.ShadowsInfo')(ShadowsInfo);
    }, 'ccclass', null);
  } // end of patch_cc_ShadowsInfo

  //---- class cc_SimpleTexture

  function patch_cc_SimpleTexture(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx26 = _extends({}, ctx),
      SimpleTexture = _ctx26.SimpleTexture;
    apply(function () {
      $.ccclass('cc.SimpleTexture')(SimpleTexture);
    }, 'ccclass', null);
  } // end of patch_cc_SimpleTexture

  //---- class cc_Skeleton

  function patch_cc_Skeleton(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx27 = _extends({}, ctx),
      Skeleton = _ctx27.Skeleton,
      CCString = _ctx27.CCString,
      Mat4 = _ctx27.Mat4;
    apply(function () {
      $.type([CCString])(Skeleton.prototype, '_joints', function () {
        return [];
      });
    }, 'type', '_joints');
    apply(function () {
      $.type([Mat4])(Skeleton.prototype, '_bindposes', function () {
        return [];
      });
    }, 'type', '_bindposes');
    apply(function () {
      $.serializable(Skeleton.prototype, '_hash', function () {
        return 0;
      });
    }, 'serializable', '_hash');
    apply(function () {
      $.ccclass('cc.Skeleton')(Skeleton);
    }, 'ccclass', null);
  } // end of patch_cc_Skeleton

  //---- class cc_SkinInfo

  function patch_cc_SkinInfo(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx28 = _extends({}, ctx),
      SkinInfo = _ctx28.SkinInfo,
      CCFloat = _ctx28.CCFloat;
    var enabledDescriptor = Object.getOwnPropertyDescriptor(SkinInfo.prototype, 'enabled');
    var blurRadiusDescriptor = Object.getOwnPropertyDescriptor(SkinInfo.prototype, 'blurRadius');
    var sssIntensityDescriptor = Object.getOwnPropertyDescriptor(SkinInfo.prototype, 'sssIntensity');
    apply(function () {
      $.tooltip('i18n:skin.enabled')(SkinInfo.prototype, 'enabled', enabledDescriptor);
    }, 'tooltip', 'enabled');
    apply(function () {
      $$.readOnly(SkinInfo.prototype, 'enabled', enabledDescriptor);
    }, 'readOnly', 'enabled');
    apply(function () {
      $.editable(SkinInfo.prototype, 'enabled', enabledDescriptor);
    }, 'editable', 'enabled');
    apply(function () {
      $.tooltip('i18n:skin.blurRadius')(SkinInfo.prototype, 'blurRadius', blurRadiusDescriptor);
    }, 'tooltip', 'blurRadius');
    apply(function () {
      $.type(CCFloat)(SkinInfo.prototype, 'blurRadius', blurRadiusDescriptor);
    }, 'type', 'blurRadius');
    apply(function () {
      $.slide(SkinInfo.prototype, 'blurRadius', blurRadiusDescriptor);
    }, 'slide', 'blurRadius');
    apply(function () {
      $.range([0.0, 0.1, 0.001])(SkinInfo.prototype, 'blurRadius', blurRadiusDescriptor);
    }, 'range', 'blurRadius');
    apply(function () {
      $.editable(SkinInfo.prototype, 'blurRadius', blurRadiusDescriptor);
    }, 'editable', 'blurRadius');
    apply(function () {
      $.visible(false)(SkinInfo.prototype, 'blurRadius', blurRadiusDescriptor);
    }, 'visible', 'blurRadius');
    apply(function () {
      $.tooltip('i18n:skin.sssIntensity')(SkinInfo.prototype, 'sssIntensity', sssIntensityDescriptor);
    }, 'tooltip', 'sssIntensity');
    apply(function () {
      $.type(CCFloat)(SkinInfo.prototype, 'sssIntensity', sssIntensityDescriptor);
    }, 'type', 'sssIntensity');
    apply(function () {
      $.slide(SkinInfo.prototype, 'sssIntensity', sssIntensityDescriptor);
    }, 'slide', 'sssIntensity');
    apply(function () {
      $.range([0.0, 10.0, 0.1])(SkinInfo.prototype, 'sssIntensity', sssIntensityDescriptor);
    }, 'range', 'sssIntensity');
    apply(function () {
      $.editable(SkinInfo.prototype, 'sssIntensity', sssIntensityDescriptor);
    }, 'editable', 'sssIntensity');
    apply(function () {
      $.serializable(SkinInfo.prototype, '_enabled', function () {
        return true;
      });
    }, 'serializable', '_enabled');
    apply(function () {
      $.serializable(SkinInfo.prototype, '_blurRadius', function () {
        return 0.01;
      });
    }, 'serializable', '_blurRadius');
    apply(function () {
      $.serializable(SkinInfo.prototype, '_sssIntensity', function () {
        return 3.0;
      });
    }, 'serializable', '_sssIntensity');
    apply(function () {
      $.ccclass('cc.SkinInfo')(SkinInfo);
    }, 'ccclass', null);
  } // end of patch_cc_SkinInfo

  //---- class cc_SkyboxInfo

  function patch_cc_SkyboxInfo(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx29 = _extends({}, ctx),
      SkyboxInfo = _ctx29.SkyboxInfo,
      EnvironmentLightingType = _ctx29.EnvironmentLightingType,
      TextureCube = _ctx29.TextureCube,
      CCFloat = _ctx29.CCFloat,
      Material = _ctx29.Material;
    var enabledDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfo.prototype, 'enabled');
    var envLightingTypeDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfo.prototype, 'envLightingType');
    var useHDRDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfo.prototype, 'useHDR');
    var envmapDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfo.prototype, 'envmap');
    var rotationAngleDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfo.prototype, 'rotationAngle');
    var diffuseMapDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfo.prototype, 'diffuseMap');
    var reflectionMapDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfo.prototype, 'reflectionMap');
    var skyboxMaterialDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfo.prototype, 'skyboxMaterial');
    apply(function () {
      $.tooltip('i18n:skybox.enabled')(SkyboxInfo.prototype, 'enabled', enabledDescriptor);
    }, 'tooltip', 'enabled');
    apply(function () {
      $.editable(SkyboxInfo.prototype, 'enabled', enabledDescriptor);
    }, 'editable', 'enabled');
    apply(function () {
      $.tooltip('i18n:skybox.EnvironmentLightingType')(SkyboxInfo.prototype, 'envLightingType', envLightingTypeDescriptor);
    }, 'tooltip', 'envLightingType');
    apply(function () {
      $.type(EnvironmentLightingType)(SkyboxInfo.prototype, 'envLightingType', envLightingTypeDescriptor);
    }, 'type', 'envLightingType');
    apply(function () {
      $.editable(SkyboxInfo.prototype, 'envLightingType', envLightingTypeDescriptor);
    }, 'editable', 'envLightingType');
    apply(function () {
      $.tooltip('i18n:skybox.useHDR')(SkyboxInfo.prototype, 'useHDR', useHDRDescriptor);
    }, 'tooltip', 'useHDR');
    apply(function () {
      $.editable(SkyboxInfo.prototype, 'useHDR', useHDRDescriptor);
    }, 'editable', 'useHDR');
    apply(function () {
      $.tooltip('i18n:skybox.envmap')(SkyboxInfo.prototype, 'envmap', envmapDescriptor);
    }, 'tooltip', 'envmap');
    apply(function () {
      $.type(TextureCube)(SkyboxInfo.prototype, 'envmap', envmapDescriptor);
    }, 'type', 'envmap');
    apply(function () {
      $.editable(SkyboxInfo.prototype, 'envmap', envmapDescriptor);
    }, 'editable', 'envmap');
    apply(function () {
      $.tooltip('i18n:skybox.rotationAngle')(SkyboxInfo.prototype, 'rotationAngle', rotationAngleDescriptor);
    }, 'tooltip', 'rotationAngle');
    apply(function () {
      $.slide(SkyboxInfo.prototype, 'rotationAngle', rotationAngleDescriptor);
    }, 'slide', 'rotationAngle');
    apply(function () {
      $.range([0, 360, 1])(SkyboxInfo.prototype, 'rotationAngle', rotationAngleDescriptor);
    }, 'range', 'rotationAngle');
    apply(function () {
      $.type(CCFloat)(SkyboxInfo.prototype, 'rotationAngle', rotationAngleDescriptor);
    }, 'type', 'rotationAngle');
    apply(function () {
      $.displayOrder(100)(SkyboxInfo.prototype, 'diffuseMap', diffuseMapDescriptor);
    }, 'displayOrder', 'diffuseMap');
    apply(function () {
      $.type(TextureCube)(SkyboxInfo.prototype, 'diffuseMap', diffuseMapDescriptor);
    }, 'type', 'diffuseMap');
    apply(function () {
      $$.readOnly(SkyboxInfo.prototype, 'diffuseMap', diffuseMapDescriptor);
    }, 'readOnly', 'diffuseMap');
    apply(function () {
      $.editable(SkyboxInfo.prototype, 'diffuseMap', diffuseMapDescriptor);
    }, 'editable', 'diffuseMap');
    apply(function () {
      $.visible(function () {
        if (this.useIBL && this.applyDiffuseMap) {
          return true;
        }
        return false;
      })(SkyboxInfo.prototype, 'diffuseMap', diffuseMapDescriptor);
    }, 'visible', 'diffuseMap');
    apply(function () {
      $.displayOrder(100)(SkyboxInfo.prototype, 'reflectionMap', reflectionMapDescriptor);
    }, 'displayOrder', 'reflectionMap');
    apply(function () {
      $.type(TextureCube)(SkyboxInfo.prototype, 'reflectionMap', reflectionMapDescriptor);
    }, 'type', 'reflectionMap');
    apply(function () {
      $$.readOnly(SkyboxInfo.prototype, 'reflectionMap', reflectionMapDescriptor);
    }, 'readOnly', 'reflectionMap');
    apply(function () {
      $.editable(SkyboxInfo.prototype, 'reflectionMap', reflectionMapDescriptor);
    }, 'editable', 'reflectionMap');
    apply(function () {
      $.visible(function () {
        var _this$_resource;
        if ((_this$_resource = this._resource) !== null && _this$_resource !== void 0 && _this$_resource.reflectionMap) {
          return true;
        }
        return false;
      })(SkyboxInfo.prototype, 'reflectionMap', reflectionMapDescriptor);
    }, 'visible', 'reflectionMap');
    apply(function () {
      $.tooltip('i18n:skybox.material')(SkyboxInfo.prototype, 'skyboxMaterial', skyboxMaterialDescriptor);
    }, 'tooltip', 'skyboxMaterial');
    apply(function () {
      $.type(Material)(SkyboxInfo.prototype, 'skyboxMaterial', skyboxMaterialDescriptor);
    }, 'type', 'skyboxMaterial');
    apply(function () {
      $.editable(SkyboxInfo.prototype, 'skyboxMaterial', skyboxMaterialDescriptor);
    }, 'editable', 'skyboxMaterial');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_envLightingType', function () {
        return EnvironmentLightingType.HEMISPHERE_DIFFUSE;
      });
    }, 'serializable', '_envLightingType');
    apply(function () {
      $.formerlySerializedAs('_envmap')(SkyboxInfo.prototype, '_envmapHDR', function () {
        return null;
      });
    }, 'formerlySerializedAs', '_envmapHDR');
    apply(function () {
      $.type(TextureCube)(SkyboxInfo.prototype, '_envmapHDR', function () {
        return null;
      });
    }, 'type', '_envmapHDR');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_envmapHDR', function () {
        return null;
      });
    }, 'serializable', '_envmapHDR');
    apply(function () {
      $.type(TextureCube)(SkyboxInfo.prototype, '_envmapLDR', function () {
        return null;
      });
    }, 'type', '_envmapLDR');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_envmapLDR', function () {
        return null;
      });
    }, 'serializable', '_envmapLDR');
    apply(function () {
      $.type(TextureCube)(SkyboxInfo.prototype, '_diffuseMapHDR', function () {
        return null;
      });
    }, 'type', '_diffuseMapHDR');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_diffuseMapHDR', function () {
        return null;
      });
    }, 'serializable', '_diffuseMapHDR');
    apply(function () {
      $.type(TextureCube)(SkyboxInfo.prototype, '_diffuseMapLDR', function () {
        return null;
      });
    }, 'type', '_diffuseMapLDR');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_diffuseMapLDR', function () {
        return null;
      });
    }, 'serializable', '_diffuseMapLDR');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_enabled', function () {
        return false;
      });
    }, 'serializable', '_enabled');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_useHDR', function () {
        return true;
      });
    }, 'serializable', '_useHDR');
    apply(function () {
      $.type(Material)(SkyboxInfo.prototype, '_editableMaterial', function () {
        return null;
      });
    }, 'type', '_editableMaterial');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_editableMaterial', function () {
        return null;
      });
    }, 'serializable', '_editableMaterial');
    apply(function () {
      $.type(TextureCube)(SkyboxInfo.prototype, '_reflectionHDR', function () {
        return null;
      });
    }, 'type', '_reflectionHDR');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_reflectionHDR', function () {
        return null;
      });
    }, 'serializable', '_reflectionHDR');
    apply(function () {
      $.type(TextureCube)(SkyboxInfo.prototype, '_reflectionLDR', function () {
        return null;
      });
    }, 'type', '_reflectionLDR');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_reflectionLDR', function () {
        return null;
      });
    }, 'serializable', '_reflectionLDR');
    apply(function () {
      $.serializable(SkyboxInfo.prototype, '_rotationAngle', function () {
        return 0;
      });
    }, 'serializable', '_rotationAngle');
    apply(function () {
      $.ccclass('cc.SkyboxInfo')(SkyboxInfo);
    }, 'ccclass', null);
  } // end of patch_cc_SkyboxInfo

  //---- class cc_SphereLight

  function patch_cc_SphereLight(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx30 = _extends({}, ctx),
      SphereLight = _ctx30.SphereLight,
      scene = _ctx30.scene,
      Camera = _ctx30.Camera,
      PhotometricTerm = _ctx30.PhotometricTerm,
      CCInteger = _ctx30.CCInteger,
      CCFloat = _ctx30.CCFloat;
    var luminousFluxDescriptor = Object.getOwnPropertyDescriptor(SphereLight.prototype, 'luminousFlux');
    var luminanceDescriptor = Object.getOwnPropertyDescriptor(SphereLight.prototype, 'luminance');
    var termDescriptor = Object.getOwnPropertyDescriptor(SphereLight.prototype, 'term');
    var sizeDescriptor = Object.getOwnPropertyDescriptor(SphereLight.prototype, 'size');
    var rangeDescriptor = Object.getOwnPropertyDescriptor(SphereLight.prototype, 'range');
    apply(function () {
      $.serializable(SphereLight.prototype, '_size', function () {
        return 0.15;
      });
    }, 'serializable', '_size');
    apply(function () {
      $.formerlySerializedAs('_luminance')(SphereLight.prototype, '_luminanceHDR', function () {
        return 1700 / scene.nt2lm(0.15);
      });
    }, 'formerlySerializedAs', '_luminanceHDR');
    apply(function () {
      $.serializable(SphereLight.prototype, '_luminanceHDR', function () {
        return 1700 / scene.nt2lm(0.15);
      });
    }, 'serializable', '_luminanceHDR');
    apply(function () {
      $.serializable(SphereLight.prototype, '_luminanceLDR', function () {
        return 1700 / scene.nt2lm(0.15) * Camera.standardExposureValue * Camera.standardLightMeterScale;
      });
    }, 'serializable', '_luminanceLDR');
    apply(function () {
      $.serializable(SphereLight.prototype, '_term', function () {
        return PhotometricTerm.LUMINOUS_FLUX;
      });
    }, 'serializable', '_term');
    apply(function () {
      $.serializable(SphereLight.prototype, '_range', function () {
        return 1;
      });
    }, 'serializable', '_range');
    apply(function () {
      $.type(CCInteger)(SphereLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'type', 'luminousFlux');
    apply(function () {
      $.range([0, Number.POSITIVE_INFINITY, 100])(SphereLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'range', 'luminousFlux');
    apply(function () {
      $.editable(SphereLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'editable', 'luminousFlux');
    apply(function () {
      $.tooltip('i18n:lights.luminous_flux')(SphereLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'tooltip', 'luminousFlux');
    apply(function () {
      $.displayOrder(-1)(SphereLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'displayOrder', 'luminousFlux');
    apply(function () {
      $.type(CCInteger)(SphereLight.prototype, 'luminance', luminanceDescriptor);
    }, 'type', 'luminance');
    apply(function () {
      $.range([0, Number.POSITIVE_INFINITY, 10])(SphereLight.prototype, 'luminance', luminanceDescriptor);
    }, 'range', 'luminance');
    apply(function () {
      $.editable(SphereLight.prototype, 'luminance', luminanceDescriptor);
    }, 'editable', 'luminance');
    apply(function () {
      $.tooltip('i18n:lights.luminance')(SphereLight.prototype, 'luminance', luminanceDescriptor);
    }, 'tooltip', 'luminance');
    apply(function () {
      $.displayOrder(-1)(SphereLight.prototype, 'luminance', luminanceDescriptor);
    }, 'displayOrder', 'luminance');
    apply(function () {
      $.editable(SphereLight.prototype, 'term', termDescriptor);
    }, 'editable', 'term');
    apply(function () {
      $.tooltip('i18n:lights.term')(SphereLight.prototype, 'term', termDescriptor);
    }, 'tooltip', 'term');
    apply(function () {
      $.displayOrder(-2)(SphereLight.prototype, 'term', termDescriptor);
    }, 'displayOrder', 'term');
    apply(function () {
      $.type(PhotometricTerm)(SphereLight.prototype, 'term', termDescriptor);
    }, 'type', 'term');
    apply(function () {
      $.type(CCFloat)(SphereLight.prototype, 'size', sizeDescriptor);
    }, 'type', 'size');
    apply(function () {
      $.range([0.0, 10.0, 0.001])(SphereLight.prototype, 'size', sizeDescriptor);
    }, 'range', 'size');
    apply(function () {
      $.slide(SphereLight.prototype, 'size', sizeDescriptor);
    }, 'slide', 'size');
    apply(function () {
      $.editable(SphereLight.prototype, 'size', sizeDescriptor);
    }, 'editable', 'size');
    apply(function () {
      $.tooltip('i18n:lights.size')(SphereLight.prototype, 'size', sizeDescriptor);
    }, 'tooltip', 'size');
    apply(function () {
      $.type(CCFloat)(SphereLight.prototype, 'range', rangeDescriptor);
    }, 'type', 'range');
    apply(function () {
      $$.rangeMin(0)(SphereLight.prototype, 'range', rangeDescriptor);
    }, 'rangeMin', 'range');
    apply(function () {
      $.editable(SphereLight.prototype, 'range', rangeDescriptor);
    }, 'editable', 'range');
    apply(function () {
      $.tooltip('i18n:lights.range')(SphereLight.prototype, 'range', rangeDescriptor);
    }, 'tooltip', 'range');
    apply(function () {
      $.executeInEditMode(SphereLight);
    }, 'executeInEditMode', null);
    apply(function () {
      $.menu('Light/SphereLight')(SphereLight);
    }, 'menu', null);
    apply(function () {
      $.help('i18n:cc.SphereLight')(SphereLight);
    }, 'help', null);
    apply(function () {
      $.ccclass('cc.SphereLight')(SphereLight);
    }, 'ccclass', null);
  } // end of patch_cc_SphereLight

  //---- class cc_SpotLight

  function patch_cc_SpotLight(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx31 = _extends({}, ctx),
      SpotLight = _ctx31.SpotLight,
      scene = _ctx31.scene,
      Camera = _ctx31.Camera,
      PhotometricTerm = _ctx31.PhotometricTerm,
      PCFType = _ctx31.PCFType,
      CCFloat = _ctx31.CCFloat,
      cclegacy = _ctx31.cclegacy,
      ShadowType = _ctx31.ShadowType,
      CCBoolean = _ctx31.CCBoolean;
    var luminousFluxDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'luminousFlux');
    var luminanceDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'luminance');
    var termDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'term');
    var sizeDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'size');
    var rangeDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'range');
    var spotAngleDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'spotAngle');
    var angleAttenuationStrengthDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'angleAttenuationStrength');
    var shadowEnabledDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'shadowEnabled');
    var shadowPcfDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'shadowPcf');
    var shadowBiasDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'shadowBias');
    var shadowNormalBiasDescriptor = Object.getOwnPropertyDescriptor(SpotLight.prototype, 'shadowNormalBias');
    apply(function () {
      $.serializable(SpotLight.prototype, '_size', function () {
        return 0.15;
      });
    }, 'serializable', '_size');
    apply(function () {
      $.formerlySerializedAs('_luminance')(SpotLight.prototype, '_luminanceHDR', function () {
        return 1700 / scene.nt2lm(0.15);
      });
    }, 'formerlySerializedAs', '_luminanceHDR');
    apply(function () {
      $.serializable(SpotLight.prototype, '_luminanceHDR', function () {
        return 1700 / scene.nt2lm(0.15);
      });
    }, 'serializable', '_luminanceHDR');
    apply(function () {
      $.serializable(SpotLight.prototype, '_luminanceLDR', function () {
        return 1700 / scene.nt2lm(0.15) * Camera.standardExposureValue * Camera.standardLightMeterScale;
      });
    }, 'serializable', '_luminanceLDR');
    apply(function () {
      $.serializable(SpotLight.prototype, '_term', function () {
        return PhotometricTerm.LUMINOUS_FLUX;
      });
    }, 'serializable', '_term');
    apply(function () {
      $.serializable(SpotLight.prototype, '_range', function () {
        return 1;
      });
    }, 'serializable', '_range');
    apply(function () {
      $.serializable(SpotLight.prototype, '_spotAngle', function () {
        return 60;
      });
    }, 'serializable', '_spotAngle');
    apply(function () {
      $.serializable(SpotLight.prototype, '_angleAttenuationStrength', function () {
        return 0;
      });
    }, 'serializable', '_angleAttenuationStrength');
    apply(function () {
      $.serializable(SpotLight.prototype, '_shadowEnabled', function () {
        return false;
      });
    }, 'serializable', '_shadowEnabled');
    apply(function () {
      $.serializable(SpotLight.prototype, '_shadowPcf', function () {
        return PCFType.HARD;
      });
    }, 'serializable', '_shadowPcf');
    apply(function () {
      $.serializable(SpotLight.prototype, '_shadowBias', function () {
        return 0.00001;
      });
    }, 'serializable', '_shadowBias');
    apply(function () {
      $.serializable(SpotLight.prototype, '_shadowNormalBias', function () {
        return 0.0;
      });
    }, 'serializable', '_shadowNormalBias');
    apply(function () {
      $.range([0, Number.POSITIVE_INFINITY, 100])(SpotLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'range', 'luminousFlux');
    apply(function () {
      $.displayOrder(-1)(SpotLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'displayOrder', 'luminousFlux');
    apply(function () {
      $.tooltip('i18n:lights.luminous_flux')(SpotLight.prototype, 'luminousFlux', luminousFluxDescriptor);
    }, 'tooltip', 'luminousFlux');
    apply(function () {
      $.range([0, Number.POSITIVE_INFINITY, 10])(SpotLight.prototype, 'luminance', luminanceDescriptor);
    }, 'range', 'luminance');
    apply(function () {
      $.displayOrder(-1)(SpotLight.prototype, 'luminance', luminanceDescriptor);
    }, 'displayOrder', 'luminance');
    apply(function () {
      $.tooltip('i18n:lights.luminance')(SpotLight.prototype, 'luminance', luminanceDescriptor);
    }, 'tooltip', 'luminance');
    apply(function () {
      $.tooltip('i18n:lights.term')(SpotLight.prototype, 'term', termDescriptor);
    }, 'tooltip', 'term');
    apply(function () {
      $.displayOrder(-2)(SpotLight.prototype, 'term', termDescriptor);
    }, 'displayOrder', 'term');
    apply(function () {
      $.type(PhotometricTerm)(SpotLight.prototype, 'term', termDescriptor);
    }, 'type', 'term');
    apply(function () {
      $.type(CCFloat)(SpotLight.prototype, 'size', sizeDescriptor);
    }, 'type', 'size');
    apply(function () {
      $.range([0.0, 10.0, 0.001])(SpotLight.prototype, 'size', sizeDescriptor);
    }, 'range', 'size');
    apply(function () {
      $.slide(SpotLight.prototype, 'size', sizeDescriptor);
    }, 'slide', 'size');
    apply(function () {
      $.editable(SpotLight.prototype, 'size', sizeDescriptor);
    }, 'editable', 'size');
    apply(function () {
      $.tooltip('i18n:lights.size')(SpotLight.prototype, 'size', sizeDescriptor);
    }, 'tooltip', 'size');
    apply(function () {
      $.tooltip('i18n:lights.range')(SpotLight.prototype, 'range', rangeDescriptor);
    }, 'tooltip', 'range');
    apply(function () {
      $.tooltip('i18n:lights.spotAngle')(SpotLight.prototype, 'spotAngle', spotAngleDescriptor);
    }, 'tooltip', 'spotAngle');
    apply(function () {
      $.range([2, 180, 1])(SpotLight.prototype, 'spotAngle', spotAngleDescriptor);
    }, 'range', 'spotAngle');
    apply(function () {
      $.slide(SpotLight.prototype, 'spotAngle', spotAngleDescriptor);
    }, 'slide', 'spotAngle');
    apply(function () {
      $.tooltip('i18n:lights.angleAttenuationStrength')(SpotLight.prototype, 'angleAttenuationStrength', angleAttenuationStrengthDescriptor);
    }, 'tooltip', 'angleAttenuationStrength');
    apply(function () {
      $.range([0, 1, 0.001])(SpotLight.prototype, 'angleAttenuationStrength', angleAttenuationStrengthDescriptor);
    }, 'range', 'angleAttenuationStrength');
    apply(function () {
      $.slide(SpotLight.prototype, 'angleAttenuationStrength', angleAttenuationStrengthDescriptor);
    }, 'slide', 'angleAttenuationStrength');
    apply(function () {
      $.type(CCBoolean)(SpotLight.prototype, 'shadowEnabled', shadowEnabledDescriptor);
    }, 'type', 'shadowEnabled');
    apply(function () {
      $.editable(SpotLight.prototype, 'shadowEnabled', shadowEnabledDescriptor);
    }, 'editable', 'shadowEnabled');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 1
        }
      })(SpotLight.prototype, 'shadowEnabled', shadowEnabledDescriptor);
    }, 'property', 'shadowEnabled');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap;
      })(SpotLight.prototype, 'shadowEnabled', shadowEnabledDescriptor);
    }, 'visible', 'shadowEnabled');
    apply(function () {
      $.tooltip('i18n:lights.shadowEnabled')(SpotLight.prototype, 'shadowEnabled', shadowEnabledDescriptor);
    }, 'tooltip', 'shadowEnabled');
    apply(function () {
      $.type(PCFType)(SpotLight.prototype, 'shadowPcf', shadowPcfDescriptor);
    }, 'type', 'shadowPcf');
    apply(function () {
      $.editable(SpotLight.prototype, 'shadowPcf', shadowPcfDescriptor);
    }, 'editable', 'shadowPcf');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 2
        }
      })(SpotLight.prototype, 'shadowPcf', shadowPcfDescriptor);
    }, 'property', 'shadowPcf');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap;
      })(SpotLight.prototype, 'shadowPcf', shadowPcfDescriptor);
    }, 'visible', 'shadowPcf');
    apply(function () {
      $.tooltip('i18n:lights.shadowPcf')(SpotLight.prototype, 'shadowPcf', shadowPcfDescriptor);
    }, 'tooltip', 'shadowPcf');
    apply(function () {
      $.type(CCFloat)(SpotLight.prototype, 'shadowBias', shadowBiasDescriptor);
    }, 'type', 'shadowBias');
    apply(function () {
      $.editable(SpotLight.prototype, 'shadowBias', shadowBiasDescriptor);
    }, 'editable', 'shadowBias');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 3
        }
      })(SpotLight.prototype, 'shadowBias', shadowBiasDescriptor);
    }, 'property', 'shadowBias');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap;
      })(SpotLight.prototype, 'shadowBias', shadowBiasDescriptor);
    }, 'visible', 'shadowBias');
    apply(function () {
      $.tooltip('i18n:lights.shadowBias')(SpotLight.prototype, 'shadowBias', shadowBiasDescriptor);
    }, 'tooltip', 'shadowBias');
    apply(function () {
      $.type(CCFloat)(SpotLight.prototype, 'shadowNormalBias', shadowNormalBiasDescriptor);
    }, 'type', 'shadowNormalBias');
    apply(function () {
      $.editable(SpotLight.prototype, 'shadowNormalBias', shadowNormalBiasDescriptor);
    }, 'editable', 'shadowNormalBias');
    apply(function () {
      $.property({
        group: {
          name: 'DynamicShadowSettings',
          displayOrder: 4
        }
      })(SpotLight.prototype, 'shadowNormalBias', shadowNormalBiasDescriptor);
    }, 'property', 'shadowNormalBias');
    apply(function () {
      $.visible(function () {
        return cclegacy.director.root.pipeline.pipelineSceneData.shadows.type === ShadowType.ShadowMap;
      })(SpotLight.prototype, 'shadowNormalBias', shadowNormalBiasDescriptor);
    }, 'visible', 'shadowNormalBias');
    apply(function () {
      $.tooltip('i18n:lights.shadowNormalBias')(SpotLight.prototype, 'shadowNormalBias', shadowNormalBiasDescriptor);
    }, 'tooltip', 'shadowNormalBias');
    apply(function () {
      $.executeInEditMode(SpotLight);
    }, 'executeInEditMode', null);
    apply(function () {
      $.menu('Light/SpotLight')(SpotLight);
    }, 'menu', null);
    apply(function () {
      $.help('i18n:cc.SpotLight')(SpotLight);
    }, 'help', null);
    apply(function () {
      $.ccclass('cc.SpotLight')(SpotLight);
    }, 'ccclass', null);
  } // end of patch_cc_SpotLight

  //---- class cc_SpriteFrame

  function patch_cc_SpriteFrame(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx32 = _extends({}, ctx),
      SpriteFrame = _ctx32.SpriteFrame;
    apply(function () {
      $.ccclass('cc.SpriteFrame')(SpriteFrame);
    }, 'ccclass', null);
  } // end of patch_cc_SpriteFrame

  //---- class cc_Tetrahedron

  function patch_cc_Tetrahedron(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx33 = _extends({}, ctx),
      Tetrahedron = _ctx33.Tetrahedron,
      Mat3 = _ctx33.Mat3,
      Vec3 = _ctx33.Vec3,
      CircumSphere = _ctx33.CircumSphere;
    apply(function () {
      $.serializable(Tetrahedron.prototype, 'invalid', function () {
        return false;
      });
    }, 'serializable', 'invalid');
    apply(function () {
      $.serializable(Tetrahedron.prototype, 'vertex0', function () {
        return -1;
      });
    }, 'serializable', 'vertex0');
    apply(function () {
      $.serializable(Tetrahedron.prototype, 'vertex1', function () {
        return -1;
      });
    }, 'serializable', 'vertex1');
    apply(function () {
      $.serializable(Tetrahedron.prototype, 'vertex2', function () {
        return -1;
      });
    }, 'serializable', 'vertex2');
    apply(function () {
      $.serializable(Tetrahedron.prototype, 'vertex3', function () {
        return -1;
      });
    }, 'serializable', 'vertex3');
    apply(function () {
      $.serializable(Tetrahedron.prototype, 'neighbours', function () {
        return [-1, -1, -1, -1];
      });
    }, 'serializable', 'neighbours');
    apply(function () {
      $.serializable(Tetrahedron.prototype, 'matrix', function () {
        return new Mat3();
      });
    }, 'serializable', 'matrix');
    apply(function () {
      $.serializable(Tetrahedron.prototype, 'offset', function () {
        return new Vec3(0.0, 0.0, 0.0);
      });
    }, 'serializable', 'offset');
    apply(function () {
      $.serializable(Tetrahedron.prototype, 'sphere', function () {
        return new CircumSphere();
      });
    }, 'serializable', 'sphere');
    apply(function () {
      $.ccclass('cc.Tetrahedron')(Tetrahedron);
    }, 'ccclass', null);
  } // end of patch_cc_Tetrahedron

  //---- class cc_TextAsset

  function patch_cc_TextAsset(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx34 = _extends({}, ctx),
      TextAsset = _ctx34.TextAsset;
    apply(function () {
      $.editable(TextAsset.prototype, 'text', function () {
        return '';
      });
    }, 'editable', 'text');
    apply(function () {
      $.serializable(TextAsset.prototype, 'text', function () {
        return '';
      });
    }, 'serializable', 'text');
    apply(function () {
      $.ccclass('cc.TextAsset')(TextAsset);
    }, 'ccclass', null);
  } // end of patch_cc_TextAsset

  //---- class cc_Texture2D

  function patch_cc_Texture2D(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx35 = _extends({}, ctx),
      Texture2D = _ctx35.Texture2D,
      ImageAsset = _ctx35.ImageAsset;
    apply(function () {
      $.type([ImageAsset])(Texture2D.prototype, '_mipmaps', function () {
        return [];
      });
    }, 'type', '_mipmaps');
    apply(function () {
      $.ccclass('cc.Texture2D')(Texture2D);
    }, 'ccclass', null);
  } // end of patch_cc_Texture2D

  //---- class cc_TextureBase

  function patch_cc_TextureBase(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx36 = _extends({}, ctx),
      TextureBase = _ctx36.TextureBase,
      PixelFormat = _ctx36.PixelFormat,
      Filter = _ctx36.Filter,
      WrapMode = _ctx36.WrapMode;
    apply(function () {
      $.serializable(TextureBase.prototype, '_format', function () {
        return PixelFormat.RGBA8888;
      });
    }, 'serializable', '_format');
    apply(function () {
      $.serializable(TextureBase.prototype, '_minFilter', function () {
        return Filter.LINEAR;
      });
    }, 'serializable', '_minFilter');
    apply(function () {
      $.serializable(TextureBase.prototype, '_magFilter', function () {
        return Filter.LINEAR;
      });
    }, 'serializable', '_magFilter');
    apply(function () {
      $.serializable(TextureBase.prototype, '_mipFilter', function () {
        return Filter.NONE;
      });
    }, 'serializable', '_mipFilter');
    apply(function () {
      $.serializable(TextureBase.prototype, '_wrapS', function () {
        return WrapMode.REPEAT;
      });
    }, 'serializable', '_wrapS');
    apply(function () {
      $.serializable(TextureBase.prototype, '_wrapT', function () {
        return WrapMode.REPEAT;
      });
    }, 'serializable', '_wrapT');
    apply(function () {
      $.serializable(TextureBase.prototype, '_wrapR', function () {
        return WrapMode.REPEAT;
      });
    }, 'serializable', '_wrapR');
    apply(function () {
      $.serializable(TextureBase.prototype, '_anisotropy', function () {
        return 0;
      });
    }, 'serializable', '_anisotropy');
    apply(function () {
      $.ccclass('cc.TextureBase')(TextureBase);
    }, 'ccclass', null);
  } // end of patch_cc_TextureBase

  //---- class cc_TextureCube

  function patch_cc_TextureCube(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx37 = _extends({}, ctx),
      TextureCube = _ctx37.TextureCube,
      MipmapMode = _ctx37.MipmapMode;
    apply(function () {
      $.serializable(TextureCube.prototype, 'isRGBE', function () {
        return false;
      });
    }, 'serializable', 'isRGBE');
    apply(function () {
      $.serializable(TextureCube.prototype, '_mipmapAtlas', function () {
        return null;
      });
    }, 'serializable', '_mipmapAtlas');
    apply(function () {
      $.serializable(TextureCube.prototype, '_mipmapMode', function () {
        return MipmapMode.NONE;
      });
    }, 'serializable', '_mipmapMode');
    apply(function () {
      $.serializable(TextureCube.prototype, '_mipmaps', function () {
        return [];
      });
    }, 'serializable', '_mipmaps');
    apply(function () {
      $.ccclass('cc.TextureCube')(TextureCube);
    }, 'ccclass', null);
  } // end of patch_cc_TextureCube

  //---- class cc_Vertex

  function patch_cc_Vertex(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx38 = _extends({}, ctx),
      Vertex = _ctx38.Vertex,
      Vec3 = _ctx38.Vec3;
    apply(function () {
      $.serializable(Vertex.prototype, 'position', function () {
        return new Vec3(0, 0, 0);
      });
    }, 'serializable', 'position');
    apply(function () {
      $.serializable(Vertex.prototype, 'normal', function () {
        return new Vec3(0, 0, 0);
      });
    }, 'serializable', 'normal');
    apply(function () {
      $.serializable(Vertex.prototype, 'coefficients', function () {
        return [];
      });
    }, 'serializable', 'coefficients');
    apply(function () {
      $.ccclass('cc.Vertex')(Vertex);
    }, 'ccclass', null);
  } // end of patch_cc_Vertex

  //---- class DeferredPipeline

  function patch_DeferredPipeline(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx39 = _extends({}, ctx),
      DeferredPipeline = _ctx39.DeferredPipeline,
      RenderTextureConfig = _ctx39.RenderTextureConfig;
    apply(function () {
      $.displayOrder(2)(DeferredPipeline.prototype, 'renderTextures', function () {
        return [];
      });
    }, 'displayOrder', 'renderTextures');
    apply(function () {
      $.serializable(DeferredPipeline.prototype, 'renderTextures', function () {
        return [];
      });
    }, 'serializable', 'renderTextures');
    apply(function () {
      $.type([RenderTextureConfig])(DeferredPipeline.prototype, 'renderTextures', function () {
        return [];
      });
    }, 'type', 'renderTextures');
    apply(function () {
      $.ccclass('DeferredPipeline')(DeferredPipeline);
    }, 'ccclass', null);
  } // end of patch_DeferredPipeline

  //---- class ForwardFlow

  function patch_ForwardFlow(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx40 = _extends({}, ctx),
      ForwardFlow = _ctx40.ForwardFlow;
    apply(function () {
      $.ccclass('ForwardFlow')(ForwardFlow);
    }, 'ccclass', null);
  } // end of patch_ForwardFlow

  //---- class ForwardPipeline

  function patch_ForwardPipeline(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx41 = _extends({}, ctx),
      ForwardPipeline = _ctx41.ForwardPipeline,
      RenderTextureConfig = _ctx41.RenderTextureConfig;
    apply(function () {
      $.displayOrder(2)(ForwardPipeline.prototype, 'renderTextures', function () {
        return [];
      });
    }, 'displayOrder', 'renderTextures');
    apply(function () {
      $.serializable(ForwardPipeline.prototype, 'renderTextures', function () {
        return [];
      });
    }, 'serializable', 'renderTextures');
    apply(function () {
      $.type([RenderTextureConfig])(ForwardPipeline.prototype, 'renderTextures', function () {
        return [];
      });
    }, 'type', 'renderTextures');
    apply(function () {
      $.ccclass('ForwardPipeline')(ForwardPipeline);
    }, 'ccclass', null);
  } // end of patch_ForwardPipeline

  //---- class ForwardStage

  function patch_ForwardStage(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx42 = _extends({}, ctx),
      ForwardStage = _ctx42.ForwardStage,
      RenderQueueDesc = _ctx42.RenderQueueDesc;
    apply(function () {
      $.displayOrder(2)(ForwardStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'displayOrder', 'renderQueues');
    apply(function () {
      $.serializable(ForwardStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'serializable', 'renderQueues');
    apply(function () {
      $.type([RenderQueueDesc])(ForwardStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'type', 'renderQueues');
    apply(function () {
      $.ccclass('ForwardStage')(ForwardStage);
    }, 'ccclass', null);
  } // end of patch_ForwardStage

  //---- class FrameBufferDesc

  function patch_FrameBufferDesc(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx43 = _extends({}, ctx),
      FrameBufferDesc = _ctx43.FrameBufferDesc,
      CCString = _ctx43.CCString,
      RenderTexture = _ctx43.RenderTexture;
    apply(function () {
      $.editable(FrameBufferDesc.prototype, 'name', function () {
        return '';
      });
    }, 'editable', 'name');
    apply(function () {
      $.serializable(FrameBufferDesc.prototype, 'name', function () {
        return '';
      });
    }, 'serializable', 'name');
    apply(function () {
      $.editable(FrameBufferDesc.prototype, 'renderPass', function () {
        return 0;
      });
    }, 'editable', 'renderPass');
    apply(function () {
      $.serializable(FrameBufferDesc.prototype, 'renderPass', function () {
        return 0;
      });
    }, 'serializable', 'renderPass');
    apply(function () {
      $.type([CCString])(FrameBufferDesc.prototype, 'colorTextures', function () {
        return [];
      });
    }, 'type', 'colorTextures');
    apply(function () {
      $.editable(FrameBufferDesc.prototype, 'depthStencilTexture', function () {
        return '';
      });
    }, 'editable', 'depthStencilTexture');
    apply(function () {
      $.serializable(FrameBufferDesc.prototype, 'depthStencilTexture', function () {
        return '';
      });
    }, 'serializable', 'depthStencilTexture');
    apply(function () {
      $.type(RenderTexture)(FrameBufferDesc.prototype, 'texture', function () {
        return null;
      });
    }, 'type', 'texture');
    apply(function () {
      $.ccclass('FrameBufferDesc')(FrameBufferDesc);
    }, 'ccclass', null);
  } // end of patch_FrameBufferDesc

  //---- class GbufferStage

  function patch_GbufferStage(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx44 = _extends({}, ctx),
      GbufferStage = _ctx44.GbufferStage,
      RenderQueueDesc = _ctx44.RenderQueueDesc;
    apply(function () {
      $.displayOrder(2)(GbufferStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'displayOrder', 'renderQueues');
    apply(function () {
      $.serializable(GbufferStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'serializable', 'renderQueues');
    apply(function () {
      $.type([RenderQueueDesc])(GbufferStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'type', 'renderQueues');
    apply(function () {
      $.ccclass('GbufferStage')(GbufferStage);
    }, 'ccclass', null);
  } // end of patch_GbufferStage

  //---- class LightingStage

  function patch_LightingStage(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx45 = _extends({}, ctx),
      LightingStage = _ctx45.LightingStage,
      Material = _ctx45.Material,
      RenderQueueDesc = _ctx45.RenderQueueDesc;
    apply(function () {
      $.displayOrder(3)(LightingStage.prototype, '_deferredMaterial', function () {
        return null;
      });
    }, 'displayOrder', '_deferredMaterial');
    apply(function () {
      $.serializable(LightingStage.prototype, '_deferredMaterial', function () {
        return null;
      });
    }, 'serializable', '_deferredMaterial');
    apply(function () {
      $.type(Material)(LightingStage.prototype, '_deferredMaterial', function () {
        return null;
      });
    }, 'type', '_deferredMaterial');
    apply(function () {
      $.displayOrder(2)(LightingStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'displayOrder', 'renderQueues');
    apply(function () {
      $.serializable(LightingStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'serializable', 'renderQueues');
    apply(function () {
      $.type([RenderQueueDesc])(LightingStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'type', 'renderQueues');
    apply(function () {
      $.ccclass('LightingStage')(LightingStage);
    }, 'ccclass', null);
  } // end of patch_LightingStage

  //---- class MainFlow

  function patch_MainFlow(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx46 = _extends({}, ctx),
      MainFlow = _ctx46.MainFlow;
    apply(function () {
      $.ccclass('MainFlow')(MainFlow);
    }, 'ccclass', null);
  } // end of patch_MainFlow

  //---- class PostProcessStage

  function patch_PostProcessStage(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx47 = _extends({}, ctx),
      PostProcessStage = _ctx47.PostProcessStage,
      Material = _ctx47.Material,
      RenderQueueDesc = _ctx47.RenderQueueDesc;
    apply(function () {
      $.displayOrder(3)(PostProcessStage.prototype, '_postProcessMaterial', function () {
        return null;
      });
    }, 'displayOrder', '_postProcessMaterial');
    apply(function () {
      $.serializable(PostProcessStage.prototype, '_postProcessMaterial', function () {
        return null;
      });
    }, 'serializable', '_postProcessMaterial');
    apply(function () {
      $.type(Material)(PostProcessStage.prototype, '_postProcessMaterial', function () {
        return null;
      });
    }, 'type', '_postProcessMaterial');
    apply(function () {
      $.displayOrder(2)(PostProcessStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'displayOrder', 'renderQueues');
    apply(function () {
      $.serializable(PostProcessStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'serializable', 'renderQueues');
    apply(function () {
      $.type([RenderQueueDesc])(PostProcessStage.prototype, 'renderQueues', function () {
        return [];
      });
    }, 'type', 'renderQueues');
    apply(function () {
      $.ccclass('PostProcessStage')(PostProcessStage);
    }, 'ccclass', null);
  } // end of patch_PostProcessStage

  //---- class ReflectionProbeFlow

  function patch_ReflectionProbeFlow(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx48 = _extends({}, ctx),
      ReflectionProbeFlow = _ctx48.ReflectionProbeFlow;
    apply(function () {
      $.ccclass('ReflectionProbeFlow')(ReflectionProbeFlow);
    }, 'ccclass', null);
  } // end of patch_ReflectionProbeFlow

  //---- class ReflectionProbeStage

  function patch_ReflectionProbeStage(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx49 = _extends({}, ctx),
      ReflectionProbeStage = _ctx49.ReflectionProbeStage;
    apply(function () {
      $.ccclass('ReflectionProbeStage')(ReflectionProbeStage);
    }, 'ccclass', null);
  } // end of patch_ReflectionProbeStage

  //---- class RenderFlow

  function patch_RenderFlow(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx50 = _extends({}, ctx),
      RenderFlow = _ctx50.RenderFlow,
      RenderStage = _ctx50.RenderStage;
    apply(function () {
      $.serializable(RenderFlow.prototype, '_name', function () {
        return '';
      });
    }, 'serializable', '_name');
    apply(function () {
      $.displayOrder(0)(RenderFlow.prototype, '_name', function () {
        return '';
      });
    }, 'displayOrder', '_name');
    apply(function () {
      $.serializable(RenderFlow.prototype, '_priority', function () {
        return 0;
      });
    }, 'serializable', '_priority');
    apply(function () {
      $.displayOrder(1)(RenderFlow.prototype, '_priority', function () {
        return 0;
      });
    }, 'displayOrder', '_priority');
    apply(function () {
      $.serializable(RenderFlow.prototype, '_tag', function () {
        return 0;
      });
    }, 'serializable', '_tag');
    apply(function () {
      $.displayOrder(2)(RenderFlow.prototype, '_tag', function () {
        return 0;
      });
    }, 'displayOrder', '_tag');
    apply(function () {
      $.serializable(RenderFlow.prototype, '_stages', function () {
        return [];
      });
    }, 'serializable', '_stages');
    apply(function () {
      $.type([RenderStage])(RenderFlow.prototype, '_stages', function () {
        return [];
      });
    }, 'type', '_stages');
    apply(function () {
      $.displayOrder(3)(RenderFlow.prototype, '_stages', function () {
        return [];
      });
    }, 'displayOrder', '_stages');
    apply(function () {
      $.ccclass('RenderFlow')(RenderFlow);
    }, 'ccclass', null);
  } // end of patch_RenderFlow

  //---- class RenderPassDesc

  function patch_RenderPassDesc(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx51 = _extends({}, ctx),
      RenderPassDesc = _ctx51.RenderPassDesc,
      ColorDesc = _ctx51.ColorDesc,
      DepthStencilDesc = _ctx51.DepthStencilDesc;
    apply(function () {
      $.editable(RenderPassDesc.prototype, 'index', function () {
        return -1;
      });
    }, 'editable', 'index');
    apply(function () {
      $.serializable(RenderPassDesc.prototype, 'index', function () {
        return -1;
      });
    }, 'serializable', 'index');
    apply(function () {
      $.type([ColorDesc])(RenderPassDesc.prototype, 'colorAttachments', function () {
        return [];
      });
    }, 'type', 'colorAttachments');
    apply(function () {
      $.type(DepthStencilDesc)(RenderPassDesc.prototype, 'depthStencilAttachment', function () {
        return new DepthStencilDesc();
      });
    }, 'type', 'depthStencilAttachment');
    apply(function () {
      $.ccclass('RenderPassDesc')(RenderPassDesc);
    }, 'ccclass', null);
  } // end of patch_RenderPassDesc

  //---- class RenderQueueDesc

  function patch_RenderQueueDesc(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx52 = _extends({}, ctx),
      RenderQueueDesc = _ctx52.RenderQueueDesc,
      RenderQueueSortMode = _ctx52.RenderQueueSortMode,
      CCString = _ctx52.CCString;
    apply(function () {
      $.editable(RenderQueueDesc.prototype, 'isTransparent', function () {
        return false;
      });
    }, 'editable', 'isTransparent');
    apply(function () {
      $.serializable(RenderQueueDesc.prototype, 'isTransparent', function () {
        return false;
      });
    }, 'serializable', 'isTransparent');
    apply(function () {
      $.type(RenderQueueSortMode)(RenderQueueDesc.prototype, 'sortMode', function () {
        return RenderQueueSortMode.FRONT_TO_BACK;
      });
    }, 'type', 'sortMode');
    apply(function () {
      $.type([CCString])(RenderQueueDesc.prototype, 'stages', function () {
        return [];
      });
    }, 'type', 'stages');
    apply(function () {
      $.ccclass('RenderQueueDesc')(RenderQueueDesc);
    }, 'ccclass', null);
  } // end of patch_RenderQueueDesc

  //---- class RenderStage

  function patch_RenderStage(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx53 = _extends({}, ctx),
      RenderStage = _ctx53.RenderStage;
    apply(function () {
      $.serializable(RenderStage.prototype, '_name', function () {
        return '';
      });
    }, 'serializable', '_name');
    apply(function () {
      $.displayOrder(0)(RenderStage.prototype, '_name', function () {
        return '';
      });
    }, 'displayOrder', '_name');
    apply(function () {
      $.serializable(RenderStage.prototype, '_priority', function () {
        return 0;
      });
    }, 'serializable', '_priority');
    apply(function () {
      $.displayOrder(1)(RenderStage.prototype, '_priority', function () {
        return 0;
      });
    }, 'displayOrder', '_priority');
    apply(function () {
      $.serializable(RenderStage.prototype, '_tag', function () {
        return 0;
      });
    }, 'serializable', '_tag');
    apply(function () {
      $.displayOrder(2)(RenderStage.prototype, '_tag', function () {
        return 0;
      });
    }, 'displayOrder', '_tag');
    apply(function () {
      $.ccclass('RenderStage')(RenderStage);
    }, 'ccclass', null);
  } // end of patch_RenderStage

  //---- class RenderTextureDesc

  function patch_RenderTextureDesc(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx54 = _extends({}, ctx),
      RenderTextureDesc = _ctx54.RenderTextureDesc,
      TextureType = _ctx54.TextureType,
      TextureUsageBit = _ctx54.TextureUsageBit,
      Format = _ctx54.Format;
    apply(function () {
      $.editable(RenderTextureDesc.prototype, 'name', function () {
        return '';
      });
    }, 'editable', 'name');
    apply(function () {
      $.serializable(RenderTextureDesc.prototype, 'name', function () {
        return '';
      });
    }, 'serializable', 'name');
    apply(function () {
      $.type(TextureType)(RenderTextureDesc.prototype, 'type', function () {
        return TextureType.TEX2D;
      });
    }, 'type', 'type');
    apply(function () {
      $.type(TextureUsageBit)(RenderTextureDesc.prototype, 'usage', function () {
        return TextureUsageBit.COLOR_ATTACHMENT;
      });
    }, 'type', 'usage');
    apply(function () {
      $.type(Format)(RenderTextureDesc.prototype, 'format', function () {
        return Format.UNKNOWN;
      });
    }, 'type', 'format');
    apply(function () {
      $.editable(RenderTextureDesc.prototype, 'width', function () {
        return -1;
      });
    }, 'editable', 'width');
    apply(function () {
      $.serializable(RenderTextureDesc.prototype, 'width', function () {
        return -1;
      });
    }, 'serializable', 'width');
    apply(function () {
      $.editable(RenderTextureDesc.prototype, 'height', function () {
        return -1;
      });
    }, 'editable', 'height');
    apply(function () {
      $.serializable(RenderTextureDesc.prototype, 'height', function () {
        return -1;
      });
    }, 'serializable', 'height');
    apply(function () {
      $.ccclass('RenderTextureDesc')(RenderTextureDesc);
    }, 'ccclass', null);
  } // end of patch_RenderTextureDesc

  //---- class ShadowFlow

  function patch_ShadowFlow(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx55 = _extends({}, ctx),
      ShadowFlow = _ctx55.ShadowFlow;
    apply(function () {
      $.ccclass('ShadowFlow')(ShadowFlow);
    }, 'ccclass', null);
  } // end of patch_ShadowFlow

  //---- class ShadowStage

  function patch_ShadowStage(ctx, apply) {
    if (apply === void 0) {
      apply = defaultExec;
    }
    var _ctx56 = _extends({}, ctx),
      ShadowStage = _ctx56.ShadowStage;
    apply(function () {
      $.ccclass('ShadowStage')(ShadowStage);
    }, 'ccclass', null);
  } // end of patch_ShadowStage
  _export({
    patch_BloomStage: patch_BloomStage,
    patch_cc_AmbientInfo: patch_cc_AmbientInfo,
    patch_cc_Asset: patch_cc_Asset,
    patch_cc_BufferAsset: patch_cc_BufferAsset,
    patch_cc_CircumSphere: patch_cc_CircumSphere,
    patch_cc_DirectionalLight: patch_cc_DirectionalLight,
    patch_cc_EffectAsset: patch_cc_EffectAsset,
    patch_cc_FogInfo: patch_cc_FogInfo,
    patch_cc_ImageAsset: patch_cc_ImageAsset,
    patch_cc_LightProbeInfo: patch_cc_LightProbeInfo,
    patch_cc_LightProbesData: patch_cc_LightProbesData,
    patch_cc_Line: patch_cc_Line,
    patch_cc_Material: patch_cc_Material,
    patch_cc_Mesh: patch_cc_Mesh,
    patch_cc_Node: patch_cc_Node,
    patch_cc_OctreeInfo: patch_cc_OctreeInfo,
    patch_cc_PointLight: patch_cc_PointLight,
    patch_cc_PostSettingsInfo: patch_cc_PostSettingsInfo,
    patch_cc_RangedDirectionalLight: patch_cc_RangedDirectionalLight,
    patch_cc_RenderPipeline: patch_cc_RenderPipeline,
    patch_cc_RenderTexture: patch_cc_RenderTexture,
    patch_cc_Scene: patch_cc_Scene,
    patch_cc_SceneAsset: patch_cc_SceneAsset,
    patch_cc_SceneGlobals: patch_cc_SceneGlobals,
    patch_cc_ShadowsInfo: patch_cc_ShadowsInfo,
    patch_cc_SimpleTexture: patch_cc_SimpleTexture,
    patch_cc_Skeleton: patch_cc_Skeleton,
    patch_cc_SkinInfo: patch_cc_SkinInfo,
    patch_cc_SkyboxInfo: patch_cc_SkyboxInfo,
    patch_cc_SphereLight: patch_cc_SphereLight,
    patch_cc_SpotLight: patch_cc_SpotLight,
    patch_cc_SpriteFrame: patch_cc_SpriteFrame,
    patch_cc_Tetrahedron: patch_cc_Tetrahedron,
    patch_cc_TextAsset: patch_cc_TextAsset,
    patch_cc_Texture2D: patch_cc_Texture2D,
    patch_cc_TextureBase: patch_cc_TextureBase,
    patch_cc_TextureCube: patch_cc_TextureCube,
    patch_cc_Vertex: patch_cc_Vertex,
    patch_DeferredPipeline: patch_DeferredPipeline,
    patch_ForwardFlow: patch_ForwardFlow,
    patch_ForwardPipeline: patch_ForwardPipeline,
    patch_ForwardStage: patch_ForwardStage,
    patch_FrameBufferDesc: patch_FrameBufferDesc,
    patch_GbufferStage: patch_GbufferStage,
    patch_LightingStage: patch_LightingStage,
    patch_MainFlow: patch_MainFlow,
    patch_PostProcessStage: patch_PostProcessStage,
    patch_ReflectionProbeFlow: patch_ReflectionProbeFlow,
    patch_ReflectionProbeStage: patch_ReflectionProbeStage,
    patch_RenderFlow: patch_RenderFlow,
    patch_RenderPassDesc: patch_RenderPassDesc,
    patch_RenderQueueDesc: patch_RenderQueueDesc,
    patch_RenderStage: patch_RenderStage,
    patch_RenderTextureDesc: patch_RenderTextureDesc,
    patch_ShadowFlow: patch_ShadowFlow,
    patch_ShadowStage: patch_ShadowStage
  });
  return {
    setters: [function (_coreDataDecoratorsIndexJs) {
      $$ = _coreDataDecoratorsIndexJs;
    }, function (_coreIndexJs) {
      $ = _coreIndexJs._decorator;
    }],
    execute: function () {
      defaultExec = function defaultExec(cb, decorator, attr) {
        cb();
      }; //---- class BloomStage
    }
  };
});