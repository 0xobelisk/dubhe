import fs from "node:fs/promises";
import path from "node:path";
import { formatMove, formatTypescript } from "./format";
import { debug } from "../debug";

export async function formatAndWriteMove(
  output: string,
  fullOutputPath: string,
  logPrefix?: string
): Promise<void> {
  const formattedOutput = await formatMove(output);
  let schemaPrefix =
`  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  `

  let initPrefix = `#[test_only]`

  let code = schemaPrefix + formattedOutput

  let deployHookPrefix = `#[allow(lint(share_owned), unused_let_mut)]`

  if (fullOutputPath.includes(".toml") || fullOutputPath.includes("system") || fullOutputPath.includes("migrate")) {
    code = formattedOutput
  } else if (fullOutputPath.includes("init")) {
    code = initPrefix + formattedOutput
  } else if (fullOutputPath.includes("deploy_hook")) {
    code = deployHookPrefix + formattedOutput
  }

  await fs.mkdir(path.dirname(fullOutputPath), { recursive: true });
  await fs.writeFile(fullOutputPath, code);
  debug(`${logPrefix}: ${fullOutputPath}`);
}

/**
 * Formats typescript code using prettier and write it to a file
 * @param output typescript code
 * @param fullOutputPath full path to the output file
 * @param logPrefix prefix for debug logs
 */
export async function formatAndWriteTypescript(
    output: string,
    fullOutputPath: string,
    logPrefix: string,
): Promise<void> {
  const formattedOutput = await formatTypescript(output);

  await fs.mkdir(path.dirname(fullOutputPath), { recursive: true });

  await fs.writeFile(fullOutputPath, formattedOutput);
  debug(`${logPrefix}: ${fullOutputPath}`);
}
